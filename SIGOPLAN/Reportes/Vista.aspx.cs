using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using Data.Factory.Maquinaria.Captura;
using System.Web.Mvc;
using System.Reflection;
using Core.Enum.Maquinaria.Reportes;
using System.ComponentModel.DataAnnotations;
using Infrastructure.Utils;
using Data.Factory.Maquinaria.Reporte;
using Reportes.Reports;
using Core.DTO.Maquinaria.Reporte;
using System.Globalization;
using System.IO;
using Data.Factory.Encuestas;
using Data.Factory.Maquinaria.Inventario;
using Data.Factory.Proyecciones;
using Data.Factory.Maquinaria.Catalogos;
using Data.Factory.SeguimientoAcuerdos;
using Data.Factory.RecursosHumanos.Captura;
using Data.Factory.Principal.Usuarios;
using Data.Factory.Maquinaria.Inventario.ControlCalidad;
using Core.DTO.RecursosHumanos.Reclutamientos;
using Data.Factory.Maquinaria.Overhaul;
using Data.Factory.Facturacion.Prefacturacion;
using Data.Factory.Contabilidad;
using CrystalDecisions.Shared;
using Core.Entity.Maquinaria.Catalogo;
using CrystalDecisions.CrystalReports.Engine;
using Newtonsoft.Json;
using System.Windows.Forms;
using Core.Entity.Maquinaria;
using Core.DTO.Captura;
using Reportes.Reports.SeguimientoAcuerdos;
using Reportes.Reports.Maquinaria;
using Data.Factory.SeguimientoAcuerdos;
using Core.DTO.SeguimientoAcuerdos;
using Reportes.Reports.Captura;
using Core.DTO.Maquinaria.Inventario;
using Data.Factory.Maquinaria.Catalogos;
using Data.Factory.Principal.Usuarios;

using Data.Factory.RecursosHumanos.Captura;
using Core.Entity.RecursosHumanos.Captura;
using Core.DTO.RecursosHumanos;
using Core.Enum.RecursosHumanos;

using Reportes.Reports.Inventario;
using Data.Factory.Maquinaria.Inventario;
using Core.Enum.Maquinaria;
using Core.DTO;
using Core.Entity.RecursosHumanos.Reportes;
using CrystalDecisions.CrystalReports.Engine;
using CrystalDecisions.Shared;

using Reportes.Reports.RecursosHumanos;
using Core.DTO.Maquinaria;
using Data.Factory.Maquinaria.Inventario.ControlCalidad;
using Core.Entity.Maquinaria.Inventario.ControlCalidad;
using Reportes.Reports.Contabilidad;
using Core.DTO.Contabilidad;
using Reportes.Reports.Maquinaria.Catalogo;
using Core.DTO.Maquinaria.Catalogos;
using Reportes.Reports.Proyecciones;
using Core.DTO.Proyecciones;
using Data.Factory.Proyecciones;
using Reportes.Reports.Overhaul;
using Data.Factory.Maquinaria.Overhaul;
using Core.Entity.Maquinaria.Catalogo;
using Reportes.Reports.Administracion.ControlInterno;
using Data.Factory.Administracion.ControlInterno.Reporte;
using Core.DTO.Maquinaria.Captura;
using Core.Entity.Maquinaria.Captura;
using System.Text.RegularExpressions;
using Core.Entity.Maquinaria.Reporte;
using System.Web.Script.Serialization;
using Data.Factory.Facturacion.Prefacturacion;
using Reportes.Reports.Facturacion.Prefacturacion;
using Core.Entity.Maquinaria.Inventario;
using Core.DTO.Reportes;
using Core.DTO.Maquinaria.Overhaul;
using Core.DAO.Maquinaria.Rastreo;
using Core.DTO.Maquinaria.Rastreo;
using System.Drawing.Printing;
using Reportes.Reports.Administracion.Cotizaciones;
using Reportes.DataSet.Administracion.Cotizaciones;
using Core.DTO.RecursosHumanos.aditivadeductivaDTO;
using Core.DTO.Maquinaria.Captura.OT;
using Core.DTO.Maquinaria.Captura.aceites;
using Data.Factory.Contabilidad;
using System.Drawing;
using Reportes.Reports.Captura.OT;
using Reportes.Reports.Encuestas.Proveedores;
using Data.Factory.Encuestas;
using Core.DTO.Encuestas.Proveedores.Reportes;
using Reportes.Reports.Encuestas.Construccion;
using Reportes.Reports.Administracion.Facultamiento;
using Data.Factory.Administracion.Facultamiento;
using Core.Entity.Administrativo.Facultamiento;
using Core.Enum.Administracion.Facultamiento;
using Reportes.Reports.Maquinaria.HorasHombre;
using Reportes.DataSet.Maquinaria.Captura.HorasHombre;
using Core.Enum;
using Data.Factory.Maquinaria.Captura.HorasHombre;
using Core.DTO.Administracion.ControlInterno;
using Infrastructure.DTO;
using Reportes.Reports.Maquinaria.Mantenimiento;
using Data.Factory.Maquinaria.Mantenimiento;
using Core.Entity.Maquinaria.Mantenimiento;
using Core.DTO.Maquinaria.Mantenimiento;
using Core.Enum.Multiempresa;
using Reportes.Reports.Captura.ConciliacionHorometros;
using Core.Enum.Maquinaria.ConciliacionHorometros;
using Core.DTO.MAZDA;
using Reportes.Reports.Mazda;
using Data.Factory.MAZDA;
using Core.DTO.Maquinaria.Reporte.RepAnalisisUtilizacion;
using Reportes.Reports.Maquinaria.Conciliacion;
using Newtonsoft.Json.Converters;
using Core.DTO.Maquinaria.Captura.conciliacion;
using Core.DAO.Administracion.FacultamientosDpto;
using Data.Factory.Administracion.FacultamientsDpto;
using Core.DTO.Administracion.Facultamiento;
using Data.Factory.Principal.Bitacora;
using Core.Enum.Principal;
using Core.DAO.Principal.Bitacoras;
using Core.Enum.Principal.Bitacoras;
using Core.DTO.ControlObra;
using Data.Factory.ControlObra;
using Reportes.Reports.ControlObra;
using Reportes.DataSet.RecursosHumanos.PlantillaPersonal;
using Core.DTO.Enkontrol.Alamcen;
using Data.Factory.Enkontrol.Compras;
using Reportes.Reports.Enkontrol;
using Core.DTO.Enkontrol.Requisicion;
using Core.DTO.Enkontrol.OrdenCompra;
using Data.Factory.Enkontrol.Resguardo;
using Core.Enum.Administracion.CadenaProductiva;
using Core.DTO.Contabilidad.Propuesta;
using Reportes.Reports.Maquinaria.Barrenacion;
using Data.Factory.Maquinaria.Barrenacion;
using SIGOPLAN.Areas.Administrativo.Controllers.Contabilidad;
using SIGOPLAN.Areas.Administrativo.Controllers.Contabilidad.Reportes;
using Reportes.Reports.Administracion.Seguridad.Capacitacion;
using Data.Factory.Administracion.Seguridad.Capacitacion;
using Core.DAO.RecursosHumanos.Captura;
using Reportes.Reports.Administracion.Seguridad.Incidentes;
using Data.Factory.Administracion.Seguridad.Incidencias;
using Core.DTO.Administracion.Seguridad.Indicadores;
using Core.Enum.Maquinaria.Barrenacion;
using Core.DTO.Maquinaria.Captura.MaquinariaRentada;
using Reportes.Reports.Maquinaria.RN_Maquinaria;
using Core.Enum.Administracion.Seguridad.Indicadores.ReporteGlobal;
using Core.Entity.Maquinaria.Overhaul;
using Data.Factory.Maquinaria.Overhaul;
using Reportes.Reports.Maquinaria.ActivoFijo;
using Core.DTO.Maquinaria.Reporte.ActivoFijo;
using Reportes.Reports.Administracion.FlujoEfectivo;
using Core.DTO.Contabilidad.FlujoEfectivo;
using Reportes.Reports.Administracion.Seguridad.Evaluacion;
using Core.Entity.Administrativo.Seguridad.Evaluacion;
using Core.DTO.Administracion.Seguridad.Evaluacion;
using Reportes.Reports.Contabilidad.Cheques;
using Core.DTO.Contabilidad.Cheque;
using Core.DTO.Administracion.Cheque;
using Data.Factory.Administracion.Cheque;
using Reportes.Reports.Maquinaria.Documentos;
using Data.Factory.Administracion.DocumentosXPagar;
using Core.DTO.Administracion.DocumentosXPagar;
using Core.DTO.Contabilidad.DocumentosXPagar;
using Core.DTO.Maquinaria.Barrenacion.Reporte;
using Core.DTO.Administracion.Seguridad.Capacitacion;
using Data.DAO.Principal.Usuarios;
using Reportes.Reports.Maquinaria.Documentos.PropuestaArrendadora;
using Reportes.Reports.Maquinaria.Documentos.ReporteAdeudos;
using Data.Factory.Enkontrol.Compras;
using Core.DTO.Maquinaria.KPI.Captura;
using Reportes.Reports.Maquinaria.KPI;
using Core.DTO.Maquinaria.Barrenacion;
using Data.Factory.Enkontrol.Almacen;
using Core.DTO.Almacen;
using Core.Enum.Maquinaria.BackLogs;
using Data.Factory.Contabilidad.Nomina;
using Reportes.Reports.Maquinaria._Caratula;
using Core.DTO.Maquinaria._Caratulas;
using Reportes.Reports.Contabilidad.Nomina;
using Data.Factory.Enkontrol.General.CC;
using Reportes.Reports.Contabilidad.Nomina;
using Data.Factory.Enkontrol.General.CC;
using Reportes.Reports.Maquinaria.BackLogs;
using Core.Service.Maquinaria.BackLogs;
using Data.Factory.Maquinaria.BackLogs;
using Core.Entity.Maquinaria.BackLogs;
using Core.DTO.Maquinaria.Reporte.ActivoFijo.Colombia.Cedula;
using Core.DTO.Enkontrol.OrdenCompra.CuadroComparativo;
using Core.DTO.Administracion.Seguridad.ActoCondicion;
using Data.Factory.RecursosHumanos;
using Reportes.Reports.Administracion.Seguridad.ActoCondicion;
using Core.Service.Maquinaria.Capturas;
using Core.DTO.Administracion.Seguridad.ActoCondicion.Acta;
using Data.Factory.Administracion.Seguridad.ActoCondicion;
using Core.DTO.Maquinaria.BackLogs;
using Reportes.Reports.Contabilidad.EstadoFinanciero;
using Core.Entity.Administrativo.Contabilidad;
using System.Drawing.Imaging;
using System.Runtime.InteropServices;
using Core.Service.Contabilidad;
using Data.DAO.Contabilidad;
using Core.DTO.ControlObra.MatrizDeRiesgo;
using Reportes.Reports.Administracion.Seguridad.SaludOcupacional;
using Data.DAO.Administracion.Seguridad.SaludOcupacional;
using Core.Service.Administracion.Seguridad.SaludOcupacional;
using Core.DTO.Administracion.Seguridad.SaludOcupacional;
using Core.Enum.Administracion.Seguridad.SaludOcupacional;
using Core.DTO.Contabilidad.EstadoFinanciero;
using Core.Entity.ControlObra.MatrizDeRiesgo;
using Data.Factory.Contabilidad.Nomina;
using Core.Service.Subcontratistas;
using Data.DAO.Subcontratistas;
using Core.DTO.ControlObra.EvaluacionSubcontratista;
using Core.Service.RecursosHumanos.Vacaciones;
using Data.DAO.RecursosHumanos.Vacaciones;
using Reportes.Reports.RecursosHumanos.Vacaciones;
using Core.DTO.RecursosHumanos.Vacaciones;
using Core.Entity.RecursosHumanos.Vacaciones;
using Data.DAO.Administracion.CtrlPresupuestalOficinasCentrales;
using Core.Service.Administracion.CtrlPresupuestalOficinasCentrales;
using Reportes.Reports.Administracion.CtrlPptalOficinasCentrales;
using Core.DTO.Administracion.CtrlPptalOficinasCentrales;
using Core.Entity.Principal.Multiempresa;
using Core.DTO.RecursosHumanos.Reclutamientos;
using Core.DTO.RecursosHumanos.BajasPersonal;
using Reportes.Reports.RecursosHumanos.ReportesRH;
using Core.Service.RecursosHumanos.ReportesRH;
using Data.Factory.RecursosHumanos.ReportesRH;
using Core.Entity.Administrativo.RecursosHumanos.Enkontrol;
using Core.DTO.RecursosHumanos.Enkontrol;
using Core.Entity.Administrativo.RecursosHumanos.Reclutamientos;
using Reportes.Reports.RecursosHumanos.ReportesRH.rptConstancias;
using Core.DTO.RecursosHumanos.Constancias;
using Data.Factory.Administracion.Seguridad.CapacitacionSeguridad;
using Reportes.Reports.RecursosHumanos.Evaluacion360;
using Data.Factory.RecursosHumanos.Evaluacion360;
using Core.DTO.RecursosHumanos.Evaluacion360;
using Core.Entity.RecursosHumanos.Evaluacion360;
using Reportes.Reports.RecursosHumanos.ActoCondicion;
using Core.DTO.RecursosHumanos.ActoCondicion;
using Core.Enum.RecursosHumanos.ActoCondicion;
using Reportes.Reports.ControlObra.Subcontratistas;
using Reportes.Reports.RecursosHumanos.Tabuladores;
using Reportes.Reports.CuentasPorCobrar;
using Data.Factory.CuentasPorCobrar;
using Core.DTO.Maquinaria.Rentabilidad;
using Core.DTO.Administracion.Seguridad.Capacitacion.CincoS;
using Core.Entity.Administrativo.Seguridad.Capacitacion.CincoS;
using Data.EntityFramework.Context;
using Core.DTO.RecursosHumanos.Plantilla;
using Core.DTO.RecursosHumanos.Tabuladores;
using Data.Factory.RecursosHumanos.Tabuladores;

using Core.Entity.Administrativo.Contabilidad.Nomina;
using Core.Enum.RecursosHumanos.Prestamos;
using Core.Enum.RecursosHumanos.Vacaciones;

namespace SIGOPLAN.Reportes
{
    public partial class Vista : System.Web.UI.Page
    {

        #region Factory

        GestionDeProyectoFactoryService gestionDeProyectoService = new GestionDeProyectoFactoryService();
        CapChequeFactoryServices capChequeFactoryServices = new CapChequeFactoryServices();
        EncuestasFactoryServices encuestasFactoryServices = new EncuestasFactoryServices();
        ConciliacionFactoryServices cfs = new ConciliacionFactoryServices();
        CapHorasHombreFactoryServices capHorasHombreFactoryServices = new CapHorasHombreFactoryServices();
        EncuestasSubContratistasFactoryServices encuestasSubContratistasFactoryServices = new EncuestasSubContratistasFactoryServices();
        EncuestasProveedoresFactoryServices encuestasProveedoresFactoryServices = new EncuestasProveedoresFactoryServices();
        MotivosParoFactoryServices motivosParoFactoryServices = new MotivosParoFactoryServices();
        AsignacionEquiposFactoryServices asignacionEquiposFactoryServices = new AsignacionEquiposFactoryServices();
        AutorizaMovimientosInternosFactoryServices autorizaMovimientosInternosFactoryServices = new AutorizaMovimientosInternosFactoryServices();
        ControlInternoMovimientoFactoryServices controlInternoMovimientoFactoryServices = new ControlInternoMovimientoFactoryServices();
        StandbyDetFactoryServices standbyDetFactoryServices = new StandbyDetFactoryServices();
        StandbyFactoryServices standbyFactoryServices = new StandbyFactoryServices();
        CapturaOTFactoryServices capturaOTFactoryServices = new CapturaOTFactoryServices();
        CapturaOTDetFactoryServices capturaOTDetFactoryServices = new CapturaOTDetFactoryServices();
        ResguardoEquipoFactoryServices resguardoEquipoFactoryServices = new ResguardoEquipoFactoryServices();
        RespuestaResguardoVehiculosFactoryServices respuestaResguardoVehiculosFactoryServices = new RespuestaResguardoVehiculosFactoryServices();
        CapturaHorometroFactoryServices capturaHorometroFactoryServices = new CapturaHorometroFactoryServices();
        TESTDATAFactoryServices tESTDATAFactoryServices = new TESTDATAFactoryServices();
        CapturaCombustibleFactoryServices capturaCombustibleFactoryServices = new CapturaCombustibleFactoryServices();
        RepComparativaTiposFactoryServices repComparativaTiposFactoryServices = new RepComparativaTiposFactoryServices();
        EncabezadoFactoryServices encabezadoFactoryServices = new EncabezadoFactoryServices();
        SeguimientoAcuerdosFactoryServices seguimientoAcuerdosFactoryServices = new SeguimientoAcuerdosFactoryServices();
        CentroCostosFactoryServices centroCostosFactoryServices = new CentroCostosFactoryServices();
        FormatoCambioFactoryService capturaFormatoCambioFactoryServices = new FormatoCambioFactoryService();
        UsuarioFactoryServices usuarioFactoryServices = new UsuarioFactoryServices();
        MaquinaFactoryServices maquinaFactoryServices = new MaquinaFactoryServices();
        AutorizacionFormatoCambioFactoryService capturaAutorizacionFormatoCambioService = new AutorizacionFormatoCambioFactoryService();
        ControlEnvioyRecepcionFactoryServices controlEnvioyRecepcionFactoryServices = new ControlEnvioyRecepcionFactoryServices();
        ControlCalidadFactoryServices ControlCalidadService = new ControlCalidadFactoryServices();
        GrupoPreguntasFactoryServices GrupoPreguntasCalidad = new GrupoPreguntasFactoryServices();
        PreguntasCalidadFactoryServices PreguntasCalidad = new PreguntasCalidadFactoryServices();
        RespuestasCalidadFactoryServices RespuestasCalidadService = new RespuestasCalidadFactoryServices();
        AutorizacionStandByFactoryServices autorizacionStandByFactoryServices = new AutorizacionStandByFactoryServices();
        CapturadeObrasFactoryServices capturadeObrasFactoryServices = new CapturadeObrasFactoryServices();
        NotaCreditoFactoryServices notaCreditoFactoryServices = new NotaCreditoFactoryServices();
        MaquinariaRentadaFactoryServices maquinariaRentadaFactoryServices = new MaquinariaRentadaFactoryServices();
        RepTraspasoFactoryServices RepTraspasoFactoryService = new RepTraspasoFactoryServices();
        EficienciaFactoryService EficienciaFactoryService = new EficienciaFactoryService();
        GrupoMaquinariaFactoryServices GrupoMaquinariaFactoryServices = new GrupoMaquinariaFactoryServices();
        private MaquinaFactoryServices MaquinaFactory = new MaquinaFactoryServices();
        RptIndicadorFactoryServices RptIndicadorFactoryServices = new RptIndicadorFactoryServices();
        PrefacturacionFactoryServices PrefacturacionFactoryServices = new PrefacturacionFactoryServices();
        RepPrefacturacionFactoryService RepPrefacturacionFactoryService = new RepPrefacturacionFactoryService();
        AceitesLubricantesFactoryService AceitesFactory = new AceitesLubricantesFactoryService();
        MaquinariaAceitesLubricantesFactoryService MaqAceiteFactory = new MaquinariaAceitesLubricantesFactoryService();
        KPIFactoryServices kpiFactoryServices = new KPIFactoryServices();
        private AditivaDeductivaFactoryService objAditivaDeductivaFactoryServices = new AditivaDeductivaFactoryService();
        private AutorizacionAditivaDeductivaFactoryService objAutadivaDeductivaFactoryService = new AutorizacionAditivaDeductivaFactoryService();
        private AditivaDeductivaDetFactoryService objAditivaDeductivaDetFactoryService = new AditivaDeductivaDetFactoryService();
        FacultamientoFactoryServices facultamientofs = new FacultamientoFactoryServices();
        PolizaFactoryServices polizaFS = new PolizaFactoryServices();
        FiniquitoFactoryService finiquitoFactoryServices = new FiniquitoFactoryService();
        private MantenimientoFactoryServices objMantenimientoFactory = new MantenimientoFactoryServices();
        MAZDAFactoryServices MAZDAFactoryServices = new MAZDAFactoryServices();
        RepAnalisisUtilizacionFactorySerrvices RepAnalisiUsos = new RepAnalisisUtilizacionFactorySerrvices();
        private FacultamientosFactoryServices facultamientosFactoryServices = new FacultamientosFactoryServices();
        ControlObraFactoryService controlObraFactoryService = new ControlObraFactoryService();
        PlantillaPersonalFactoryService plantillaPersonalFactoryService = new PlantillaPersonalFactoryService();
        RequisicionFactoryServices requisicionFactoryServices = new RequisicionFactoryServices();
        OrdenCompraFactoryService ordenCompraFactoryServices = new OrdenCompraFactoryService();
        ResguardoFactoryService resguardoFactoryServices = new ResguardoFactoryService();
        private RN_MaquinariaFactoryServices RN_MaquinariaFactory = new RN_MaquinariaFactoryServices();
        private Data.Factory.Maquinaria.Reporte.ActivoFijo.ActivoFijoFactoryServices affs = new Data.Factory.Maquinaria.Reporte.ActivoFijo.ActivoFijoFactoryServices();
        TallerOverhaulFactoryServices tallerOverhaulFactoryServices = new TallerOverhaulFactoryServices();
        AdministracionComponentesFactoryServices administracionComponentesFactoryServices = new AdministracionComponentesFactoryServices();
        BarrenacionFactoryService barrenacionFactoryService = new BarrenacionFactoryService();
        CapacitacionFactoryService capacitacionFactoryService = new CapacitacionFactoryService();
        CapacitacionSeguridadFactoryService capacitacionSeguridadFactoryService = new CapacitacionSeguridadFactoryService();
        BonoFactoryService bonofs = new BonoFactoryService();
        DatosDiariosFactoryServices serviceEstatusDiario = new DatosDiariosFactoryServices();
        RequisicionFactoryServices rfs = new RequisicionFactoryServices();
        private SeguridadIncidentesFactoryService SeguridadIncidentesServices = new SeguridadIncidentesFactoryService();
        private RemocionComponenteFactoryServices remocionComponenteServices = new RemocionComponenteFactoryServices();
        private ComponenteFactoryServices componenteServices = new ComponenteFactoryServices();
        ReporteFallaOverhaulFactoryServices ReporteFallaFS = new ReporteFallaOverhaulFactoryServices();
        ///// Service para poder loguear errores.
        private LogErrorFactoryServices logErrorFactoryServices = new LogErrorFactoryServices();
        DocumentosXPagarFactoryServices dXPFS = new DocumentosXPagarFactoryServices();
        private CuadroComparativoFactoryService cuadroComparativoFS = new CuadroComparativoFactoryService();
        AlmacenFactoryService almacenFactory = new AlmacenFactoryService();
        private RentabilidadFactoryServices rentabilidadfs = new RentabilidadFactoryServices();
        private NominaFactoryService nominafs = new NominaFactoryService();
        private CCFactoryService ccfs = new CCFactoryService();
        private BackLogsFactoryServices blFS = new BackLogsFactoryServices();
        private ReclutamientosFactoryServices ReclutamientoFS = new ReclutamientosFactoryServices();
        ActoCondicionFactoryService actoCondicionFS = new ActoCondicionFactoryService();
        private MatrizDeRiesgoFactoryService getMatrizDeRiesgoFactoryService = new MatrizDeRiesgoFactoryService();
        NominaFactoryService nominaFactoryService = new NominaFactoryService();
        BajasPersonalFactoryServices bajasFS = new BajasPersonalFactoryServices();
        ReportesRHFactoryServices reportesRHFS = new ReportesRHFactoryServices();
        private Evaluacion360FactoryServices evaluacion360FS = new Evaluacion360FactoryServices();
        private ActoCondicionCHFactoryService actoCondicionCHFS = new ActoCondicionCHFactoryService();
        private CincoSFactoryService CincoSFS = new CincoSFactoryService();
        private CapacitacionFactoryService capacitacionFS = new CapacitacionFactoryService();
        private TabuladoresFactoryService tabuladoresFS = new TabuladoresFactoryService();

        Core.DAO.Contabilidad.IEstadosFinancierosDAO estadosFinancierosDAO { get; set; }
        #endregion


        ParameterFields paramFields;
        tblM_CatMaquina objMaquinaria;
        private ReportDocument rd = new ReportDocument();

        private List<FechasDTO> GetQuincenas(int anio)
        {
            var ListaFechas = new List<FechasDTO>();
            var FechaFin = new DateTime();
            var FechaInicio = new DateTime(anio, 01, 01);
            var anioActual = FechaInicio.Year;
            var diasSem = 7;
            var i = 0;
            FechaInicio = FechaInicio.AddDays(diasSem);
            while (FechaInicio.Year == anioActual)
            {
                int diasMiercoles = ((int)DayOfWeek.Wednesday - (int)FechaInicio.DayOfWeek + 7) % 7;
                FechaInicio = FechaInicio.AddDays(diasMiercoles);
                FechaFin = FechaInicio.AddDays(diasSem);
                int diasMartes = ((int)DayOfWeek.Tuesday - (int)FechaInicio.DayOfWeek + 7) % 7;
                FechaFin = FechaFin.AddDays(diasMartes);
                ListaFechas.Add(new FechasDTO()
                {
                    Value = ++i,
                    Text = FechaInicio.ToShortDateString() + " - " + FechaFin.ToShortDateString()
                });
                FechaInicio = FechaFin.AddDays(1);
            }
            return ListaFechas;
        }

        private List<FechasDTO> GetFechas(DateTime fecha)
        {

            List<FechasDTO> ListaFechas = new List<FechasDTO>();
            DateTime FechaInicio = new DateTime();
            DateTime FechaFin = new DateTime();

            for (int i = 1; i <= 52; i++)
            {
                if (i == 1)
                {
                    var diaSemana = (int)fecha.DayOfWeek;
                    FechaInicio = fecha.AddDays(-(int)fecha.DayOfWeek - 4);
                    int diasViernes = ((int)DayOfWeek.Tuesday - (int)fecha.DayOfWeek + 7) % 7;
                    FechaFin = fecha.AddDays(diasViernes);

                    ListaFechas.Add(new FechasDTO
                    {
                        Value = i,
                        Text = FechaInicio.ToShortDateString() + " - " + FechaFin.ToShortDateString()
                    });

                }
                else
                {
                    var TempFecha = FechaFin.AddDays(1);

                    FechaInicio = TempFecha;
                    FechaFin = TempFecha.AddDays(6);

                    ListaFechas.Add(new FechasDTO
                    {
                        Value = i,
                        Text = FechaInicio.ToShortDateString() + " - " + FechaFin.ToShortDateString()
                    });
                }

            }

            return ListaFechas;

        }

        protected void Page_Load(object sender, EventArgs e)
        {

            DataSet dataT = new DataSet();
            paramFields = new ParameterFields();

            //try
            //{

            int reporte = Convert.ToInt32(Request.QueryString["idReporte"]);
            if (!IsPostBack)
            {
                Session.Remove("datosReporte");
                SetInfoReporte(reporte);
            }

            crvReporteEstandar.ReportSource = (ReportDocument)Session["reporte"];
            crvReporteEstandar.DataBind();

            crvReporteEstandar.DisplayGroupTree = false;
            crvReporteEstandar.EnableDrillDown = false;
            crvReporteEstandar.SeparatePages = false;
            crvReporteEstandar.DisplayToolbar = true;
            crvReporteEstandar.HasToggleGroupTreeButton = false;
            crvReporteEstandar.HasToggleParameterPanelButton = false;
            crvReporteEstandar.EnterpriseLogon = false;
            crvReporteEstandar.HasSearchButton = false;
            crvReporteEstandar.HasCrystalLogo = false;
            crvReporteEstandar.HasDrillUpButton = false;
            crvReporteEstandar.HasDrilldownTabs = false;
            crvReporteEstandar.ParameterFieldInfo = paramFields;
            crvReporteEstandar.EnableDatabaseLogonPrompt = false;
            crvReporteEstandar.DisplayToolbar = false;

            //}
            //catch (Exception)
            //{


            //}

            bool paraElVisor = Request.QueryString["esVisor"] != null ? Convert.ToBoolean(Request.QueryString["esVisor"]) : false;
            if (paraElVisor)
            {
                bool esDescargaVisor = Request.QueryString["esDescargaVisor"] != null ? Convert.ToBoolean(Request.QueryString["esDescargaVisor"]) : false;

                if (esDescargaVisor)
                {
                    rd.ExportToHttpResponse(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat, Response, true, "Reporte");
                }
                else
                {
                    MemoryStream ms = new MemoryStream();
                    var s = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    s.Seek(0, SeekOrigin.Begin);
                    s.CopyTo(ms);

                    var tupla = new Tuple<byte[], string>(ms.ToArray(), ".pdf");
                    Session["archivoVisor"] = tupla;
                }
            }
        }

        private ParameterFields SetInfoReporte(int reporte)
        {
            paramFields = new ParameterFields();
            dsStandbyParmDTO StandbyParmDTO = new dsStandbyParmDTO();
            //Parametros *-
            string pCC = "";
            DateTime pFechaInicio = new DateTime();
            DateTime pFechaFin = new DateTime();
            string pEconomico = "";
            int pTurno = 0;
            string pNombreCC = "";

            string responseString = "";

            crvReporteEstandar.Dispose();
            rd.Close();
            rd.Dispose();
            switch ((ReportesEnum)reporte)
            {
                //SECCION DE REPORTES ANTERIORES
                #region REPORTES VIEJOS
                /*case ReportesEnum.rptAutorizacionKPI:
                    {
                        rd = new rptAutorizaciones();

                        var pModulo = Request.QueryString["pModulo"].ToString();
                        string pFechaPeriodo = Request.QueryString["pFechaPeriodo"].ToString();
                        string titulo = "";

                        var reporteDTO = (List<kpiReporteConcentraadoDTO>)Session["rptListaCapturaDiaria"];
                        rd.Database.Tables[0].SetDataSource(getInfoEncaCplan(titulo, ""));
                        rd.Database.Tables[1].SetDataSource(reporteDTO);

                        rd.SetParameterValue("pFechaPeriodo", pFechaPeriodo);
                        rd.SetParameterValue("areaCuenta",titulo);
                        rd.SetParameterValue("areaCuenta", titulo);
                        
                        Session.Add("reporte", rd);

                        break;
                    }*/
                case ReportesEnum.GestionDeProyecto:
                    {
                        rd = new rptOrdenDeCambio();
                        var idOrdenDeCambio = Convert.ToInt32(Request.QueryString["idOrdenDeCambio"].ToString());
                        var objOrdenDeCambio = gestionDeProyectoService.getGestionDeProyectoService().obtenerOrdenDeCambioByID(idOrdenDeCambio);

                        //rd.Database.Tables[0].SetDataSource("");
                        var Encabezado = getInfoEncaOrdenDeCambio("CONSTRUPLAN", DateTime.Now.ToString(), idOrdenDeCambio);

                        rd.Database.Tables[0].SetDataSource(objOrdenDeCambio.lstMontos);
                        rd.Database.Tables[1].SetDataSource(getInfoEnca("Orden de Cambios", ""));
                        rd.Database.Tables[2].SetDataSource(new List<object>() { new { firmaSubcontratista = File.ReadAllBytes(objOrdenDeCambio.rutaFirmaSub), firmaConstruplan = File.ReadAllBytes(objOrdenDeCambio.rutaFirmaConstruplan) } });

                        rd.SetParameterValue("proyecto", objOrdenDeCambio.ordenCambio.Proyecto.ToString());
                        rd.SetParameterValue("cliente", objOrdenDeCambio.ordenCambio.CLiente.ToString());
                        rd.SetParameterValue("ubicacion", objOrdenDeCambio.ordenCambio.ubicacionProyecto.ToString());
                        rd.SetParameterValue("direccion", objOrdenDeCambio.ordenCambio.Direccion.ToString());
                        rd.SetParameterValue("contratista", objOrdenDeCambio.ordenCambio.Contratista.ToString());
                        rd.SetParameterValue("noOrden", objOrdenDeCambio.ordenCambio.NoOrden.ToString());
                        rd.SetParameterValue("cobrable", objOrdenDeCambio.ordenCambio.esCobrable == true ? "SI" : "NO");
                        rd.SetParameterValue("noContrato", objOrdenDeCambio.ordenCambio.numeroDeContrato.ToString());
                        rd.SetParameterValue("cc", objOrdenDeCambio.ordenCambio.cc.ToString());
                        rd.SetParameterValue("fechaEfectiva", objOrdenDeCambio.ordenCambio.fechaEfectiva.ToShortDateString());
                        rd.SetParameterValue("antecedentes", objOrdenDeCambio.ordenCambio.Antecedentes == null ? "" : objOrdenDeCambio.ordenCambio.Antecedentes.ToString());
                        rd.SetParameterValue("alcancesNuevos", objOrdenDeCambio.lstSoportesEvidencia == null ? 0 : objOrdenDeCambio.lstSoportesEvidencia.alcancesNuevos);
                        rd.SetParameterValue("moficicaciones", objOrdenDeCambio.lstSoportesEvidencia == null ? 0 : objOrdenDeCambio.lstSoportesEvidencia.modificacionesPorCambio);
                        rd.SetParameterValue("requerimientos", objOrdenDeCambio.lstSoportesEvidencia == null ? 0 : objOrdenDeCambio.lstSoportesEvidencia.requerimientosDeCampo);
                        rd.SetParameterValue("ajuste", objOrdenDeCambio.lstSoportesEvidencia == null ? "" : objOrdenDeCambio.lstSoportesEvidencia.ajusteDeVolumenes.ToString());
                        rd.SetParameterValue("servicios", objOrdenDeCambio.lstSoportesEvidencia == null ? 0 : objOrdenDeCambio.lstSoportesEvidencia.serviciosYSuministros);
                        rd.SetParameterValue("fechaInicial", objOrdenDeCambio.lstSoportesEvidencia.fechaInicial.ToShortDateString());
                        rd.SetParameterValue("fechaFinal", objOrdenDeCambio.lstSoportesEvidencia.fechaFinal.ToShortDateString());
                        rd.SetParameterValue("alcanceDescripcion", "");
                        rd.SetParameterValue("modificacionesDescripcion", "");
                        rd.SetParameterValue("requerimientosDescripcion", "");
                        rd.SetParameterValue("ajusteDescripcion", "");
                        rd.SetParameterValue("serviciosDescripcion", "");
                        //rd.SetParameterValue("alcanceDescripcion", objOrdenDeCambio.lstSoportesEvidencia.alcancesNuevosDescripcion.ToString());
                        //rd.SetParameterValue("modificacionesDescripcion", objOrdenDeCambio.lstSoportesEvidencia.modificacionesPorCambioDescripcion.ToString());
                        //rd.SetParameterValue("requerimientosDescripcion", objOrdenDeCambio.lstSoportesEvidencia.requerimientosDeCampoDescripcion.ToString());
                        //rd.SetParameterValue("ajusteDescripcion", objOrdenDeCambio.lstSoportesEvidencia.ajusteDeVolumenesDescripcion.ToString());
                        //rd.SetParameterValue("serviciosDescripcion", objOrdenDeCambio.lstSoportesEvidencia.serviciosYSuministrosDescripcion.ToString());
                        rd.SetParameterValue("montoOriginal", objOrdenDeCambio.lstSoportesEvidencia.MontoContratoOriginalFormatMX);
                        rd.SetParameterValue("montoOrdenesDeCambioPrevias", objOrdenDeCambio.lstSoportesEvidencia.sumaTotalDeOrdenesDeCambioPreviasFormatMX);
                        rd.SetParameterValue("montoEstaOrden", objOrdenDeCambio.lstSoportesEvidencia.numeroTotalSinMontoInicialFormatMX);
                        rd.SetParameterValue("montoTotal", objOrdenDeCambio.lstSoportesEvidencia.numeroTotalFormatMX);
                        rd.SetParameterValue("fechaInicioContrato", objOrdenDeCambio.ordenCambio.fechaSuscripcion.ToShortDateString());
                        rd.SetParameterValue("fechaFinContrato", objOrdenDeCambio.ordenCambio.fechaExpiracion.ToShortDateString());
                        //rd.SetParameterValue("fechaDescripcion", objOrdenDeCambio.lstSoportesEvidencia.fechaDescripcion.ToString());
                        rd.SetParameterValue("fechaDescripcion", "N/A");
                        rd.SetParameterValue("dias", objOrdenDeCambio.lstSoportesEvidencia.Dias.ToString());
                        rd.SetParameterValue("montoTotalConLetras", objOrdenDeCambio.lstSoportesEvidencia.numeroConLetras.ToString());
                        rd.SetParameterValue("otrasCondicioes", objOrdenDeCambio.ordenCambio.otrasCondicioes.ToString());
                        rd.SetParameterValue("diasDeContrato", objOrdenDeCambio.ordenCambio.diasDeContrato.ToString());
                        rd.SetParameterValue("sumaTotalDeDias", objOrdenDeCambio.ordenCambio.sumaTotalDeDias.ToString());
                        //rd.SetParameterValue("otrasCondicioes", objOrdenDeCambio.lstOrdenesDeCambio.otrasCondicioes.ToString());
                        //rd.SetParameterValue("diasDeContrato", objOrdenDeCambio.lstOrdenesDeCambio.diasDeContrato.ToString());
                        //rd.SetParameterValue("sumaTotalDeDias", objOrdenDeCambio.lstOrdenesDeCambio.sumaTotalDeDias.ToString());


                        //rd.SetParameterValue("puesto1", "N/A");
                        //rd.SetParameterValue("puesto2", "N/A");
                        //rd.SetParameterValue("puesto3", "N/A");
                        //rd.SetParameterValue("puesto4", "N/A");
                        //rd.SetParameterValue("puesto5", "N/A");

                        //rd.SetParameterValue("puesto1", objOrdenDeCambio.LstFirmas[0].nombreEmpleado.ToString());
                        //rd.SetParameterValue("puesto2", objOrdenDeCambio.LstFirmas[1].nombreEmpleado.ToString());
                        //rd.SetParameterValue("puesto3", objOrdenDeCambio.LstFirmas[2].nombreEmpleado.ToString());
                        //rd.SetParameterValue("puesto4", objOrdenDeCambio.LstFirmas[3].nombreEmpleado.ToString());
                        //rd.SetParameterValue("puesto5", objOrdenDeCambio.LstFirmas[4].nombreEmpleado.ToString());

                        rd.SetParameterValue("representanteLegal", objOrdenDeCambio.ordenCambio.representanteLegal);
                        //rd.SetParameterValue("gerenteProyecto", "N/A");
                        //rd.SetParameterValue("gerenteArea", "N/A");
                        //rd.SetParameterValue("directorDivision", "N/A");
                        //rd.SetParameterValue("gerentePMO", "N/A");
                        //rd.SetParameterValue("directorTecnico", "N/A");

                        rd.SetParameterValue("gerenteProyecto", objOrdenDeCambio.LstFirmas.Count() >= 1 ? objOrdenDeCambio.LstFirmas[0].nombreEmpleado.ToString() : "");
                        rd.SetParameterValue("gerenteArea", objOrdenDeCambio.LstFirmas.Count() >= 2 ? objOrdenDeCambio.LstFirmas[1].nombreEmpleado.ToString() : "");
                        rd.SetParameterValue("directorDivision", objOrdenDeCambio.LstFirmas.Count() >= 3 ? objOrdenDeCambio.LstFirmas[2].nombreEmpleado.ToString() : "");
                        rd.SetParameterValue("gerentePMO", objOrdenDeCambio.LstFirmas.Count() >= 4 ? objOrdenDeCambio.LstFirmas[3].nombreEmpleado.ToString() : "");
                        rd.SetParameterValue("directorTecnico", objOrdenDeCambio.LstFirmas.Count() >= 5 ? objOrdenDeCambio.LstFirmas[4].nombreEmpleado.ToString() : "");

                        Session["rptOrdenesDeCambio"] = rd;
                        Session.Add("reporte", rd);
                    }
                    break;
                case ReportesEnum.rptConcentradoKPI:
                    {
                        rd = new rptConcentradoKPI();
                        setMedidasReporte("HO");
                        var pModulo = Request.QueryString["pModulo"].ToString();
                        string titulo = "";
                        string pFechaPeriodo = "";
                        string pAC = "";
                        if (pModulo == "1")
                        {
                            try
                            {
                                titulo = "Reporte de KPI Homologado";
                                pFechaPeriodo = Request.QueryString["pFechaPeriodo"].ToString();
                                pAC = Session["acTemp"].ToString();
                            }
                            catch (Exception)
                            {
                                pFechaPeriodo = Session["fechaTemp"].ToString();

                            }
                        }

                        else
                        {
                            titulo = "Autorización de KPI Homologado";
                            try
                            {
                                pFechaPeriodo = Session["fechaTemp"].ToString();
                                pAC = Session["acTemp"].ToString();
                            }
                            catch (Exception)
                            {
                                pFechaPeriodo = "";
                            }
                        }

                        var reporteDTO = (List<kpiReporteConcentraadoDTO>)Session["rptListaCapturaDiaria"];
                        rd.Database.Tables[0].SetDataSource(getInfoEncaCplan(titulo, ""));
                        rd.Database.Tables[1].SetDataSource(reporteDTO);

                        rd.SetParameterValue("pFechaPeriodo", pFechaPeriodo);
                        rd.SetParameterValue("pAC", pAC);
                        Session.Add("reporte", rd);

                        break;
                    }
                case ReportesEnum.rptBarrenacionOperadores:
                    {
                        rd = new rptGeneralCapturas();

                        var reporteDTO = (List<ReporteOperadoresDTO>)Session["rptBarrenacionOperadores"];
                        var promedioBarrenos = reporteDTO.Average(x => x.barrenos).ToString("#,##0.##");
                        var promedioRehabilitacion = reporteDTO.Average(x => x.rehabilitacion).ToString("#,##0.##");
                        var promedioMetrosLineales = reporteDTO.Average(x => x.metrosLineales).ToString("#,##0.##");
                        var promedioMetrosLinealesEfectivos = reporteDTO.Average(x => x.metrosLinealesEfectivos).ToString("#,##0.##");
                        var promedioBordo = reporteDTO.Average(x => x.bordo).ToString("#,##0.##");
                        var promedioEspaciamiento = reporteDTO.Average(x => x.espaciamiento).ToString("#,##0.##");
                        var promedioDensidadMaterial = reporteDTO.Average(x => x.densidadMaterial).ToString("#,##0.##");
                        var promediopM3 = reporteDTO.Average(x => x.m3).ToString("#,##0.##");
                        var promedioMetrolinealHr = reporteDTO.Average(x => x.metrolinealHr).ToString("#,##0.##");
                        var promedioToneladaHR = reporteDTO.Average(x => x.toneladaHR).ToString("#,##0.##");
                        var promedioM3HR = reporteDTO.Average(x => x.m3HR).ToString("#,##0.##");

                        rd.Database.Tables[0].SetDataSource(reporteDTO);
                        rd.Database.Tables[1].SetDataSource(getInfoEncaCplan("Reporte Capturas Diarias", ""));

                        rd.SetParameterValue("promedioBarrenos", promedioBarrenos);
                        rd.SetParameterValue("promedioRehabilitacion", promedioRehabilitacion);
                        rd.SetParameterValue("promedioMetrosLineales", promedioMetrosLineales);
                        rd.SetParameterValue("promedioMetrosLinealesEfectivos", promedioMetrosLinealesEfectivos);
                        rd.SetParameterValue("promedioBordo", promedioBordo);
                        rd.SetParameterValue("promedioEspaciamiento", promedioEspaciamiento);
                        rd.SetParameterValue("promedioDensidadMaterial", promedioDensidadMaterial);
                        rd.SetParameterValue("promediopM3", promediopM3);
                        rd.SetParameterValue("promedioMetrolinealHr", promedioMetrolinealHr);
                        rd.SetParameterValue("promedioToneladaHR", promedioToneladaHR);
                        rd.SetParameterValue("promedioM3HR", promedioM3HR);

                        Session.Add("reporte", rd);

                        break;
                    }
                case ReportesEnum.rptBarrenacionGeneralTurnos:
                    {
                        rd = new rptGeneralCapturas();

                        //var reporteDTO = Session["rptCapturaGeneral"];

                        var reporteDTO = (List<rptGeneralesCapturas>)Session["rptCapturaGeneral"];
                        var promedioBarrenos = reporteDTO.Average(x => x.barrenos).ToString("#,##0.##");
                        var promedioRehabilitacion = reporteDTO.Average(x => x.rehabilitacion).ToString("#,##0.##");
                        var promedioMetrosLineales = reporteDTO.Average(x => x.metrosLineales).ToString("#,##0.##");
                        var promedioMetrosLinealesEfectivos = reporteDTO.Average(x => x.metrosLinealesEfectivos).ToString("#,##0.##");
                        var promedioBordo = reporteDTO.Average(x => x.bordo).ToString("#,##0.##");
                        var promedioEspaciamiento = reporteDTO.Average(x => x.espaciamiento).ToString("#,##0.##");
                        var promedioDensidadMaterial = reporteDTO.Average(x => x.densidadMaterial).ToString("#,##0.##");
                        var promediopM3 = reporteDTO.Average(x => x.m3).ToString("#,##0.##");
                        var promedioMetrolinealHr = reporteDTO.Average(x => x.metrolinealHr).ToString("#,##0.##");
                        var promedioToneladaHR = reporteDTO.Average(x => x.toneladaHR).ToString("#,##0.##");
                        var promedioM3HR = reporteDTO.Average(x => x.m3HR).ToString("#,##0.##");

                        rd.Database.Tables[0].SetDataSource(reporteDTO);
                        rd.Database.Tables[1].SetDataSource(getInfoEncaCplan("Reporte Capturas Diarias", ""));

                        rd.SetParameterValue("promedioBarrenos", promedioBarrenos);
                        rd.SetParameterValue("promedioRehabilitacion", promedioRehabilitacion);
                        rd.SetParameterValue("promedioMetrosLineales", promedioMetrosLineales);
                        rd.SetParameterValue("promedioMetrosLinealesEfectivos", promedioMetrosLinealesEfectivos);
                        rd.SetParameterValue("promedioBordo", promedioBordo);
                        rd.SetParameterValue("promedioEspaciamiento", promedioEspaciamiento);
                        rd.SetParameterValue("promedioDensidadMaterial", promedioDensidadMaterial);
                        rd.SetParameterValue("promediopM3", promediopM3);
                        rd.SetParameterValue("promedioMetrolinealHr", promedioMetrolinealHr);
                        rd.SetParameterValue("promedioToneladaHR", promedioToneladaHR);
                        rd.SetParameterValue("promedioM3HR", promedioM3HR);

                        Session.Add("reporte", rd);

                        break;
                    }

                case ReportesEnum.rptEquiposStandby:
                    {
                        rd = new rptEquiposStandby();

                        DataTable tableEncabezado = new DataTable();

                        tableEncabezado.Columns.Add("imgChart", System.Type.GetType("System.Byte[]"));

                        DataRow dr = tableEncabezado.NewRow();
                        tableEncabezado.Rows.Add(dr);
                        tableEncabezado.Rows[0]["imgChart"] = Session["imgRptStandbyBarrenadora"];

                        rd.Database.Tables[1].SetDataSource(tableEncabezado);
                        rd.Database.Tables[0].SetDataSource(getInfoEncaCplan("Reporte de Standby Barrenacion", ""));
                        Session.Add("reporte", rd);

                        break;
                    }
                case ReportesEnum.detalleAdeudoFinanciero:
                    {
                        rd = new rptEquipoDetAdeudos();

                        var pFechaAdeudos = Request.QueryString["pFechaAdeudos"].ToString();
                        var _fecha = Convert.ToDateTime(pFechaAdeudos);

                        List<adeudosDTO> reporteDTO = (List<adeudosDTO>)Session["getRptAdeudosDetalle"];// var reporteDTO = dXPFS.GetDocumentosXPagarServices().getRptAdeudosDetalle(tipoMoneda, instituciones, pFechaAdeudos, tipo)["reporte"];
                        decimal totalDeuda = reporteDTO.Sum(r => r.valorFinanciado);
                        decimal totalImportePagado = reporteDTO.Sum(r => r.importePagado);
                        decimal totalSaldoPendiente = reporteDTO.Sum(r => r.saldoPendiente);
                        decimal totalSaldoCP = reporteDTO.Sum(r => r.saldoCP);
                        decimal totalSaldoLP = reporteDTO.Sum(r => r.saldoLP);


                        rd.Database.Tables[1].SetDataSource(reporteDTO);
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Reporte de Adeudos Financieros Detalle", ""));
                        rd.SetParameterValue("totalDeuda", totalDeuda);
                        rd.SetParameterValue("totalImportePagado", totalImportePagado);
                        rd.SetParameterValue("totalSaldoPendiente", totalSaldoPendiente);
                        rd.SetParameterValue("totalSaldoCP", totalSaldoCP);
                        rd.SetParameterValue("totalSaldoLP", totalSaldoLP);
                        rd.SetParameterValue("fecha", "Periodo al " + _fecha.Day + " de " + _fecha.ToString("MMMM") + " de " + _fecha.Year);
                        Session.Add("reporte", rd);

                        break;
                    }
                case ReportesEnum.adeudoFinanciero:
                    {
                        rd = new rptAdeudosInstitucion();
                        var rptGeneralPesos = Session["rptGeneralAdeudo"];

                        rd.Database.Tables[1].SetDataSource(rptGeneralPesos);
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Reporte de Adeudos Financieros", ""));
                        Session.Add("reporte", rd);

                        break;
                    }
                case ReportesEnum.PropuestaPago:
                    {
                        rd = new rptPropuestaArrendadora();
                        var pfechaInicio = Convert.ToDateTime(Request.QueryString["pFechaInicio"].ToString());
                        var pfechaFin = Convert.ToDateTime(Request.QueryString["pFechaFin"].ToString());

                        var strPer = "Periodo del " + pfechaInicio.ToShortDateString() + " Al " + pfechaFin.ToShortDateString();

                        var reporteDTO = dXPFS.GetDocumentosXPagarServices().LoadReportePropuestaArrendadora(pfechaInicio, pfechaFin);
                        rd.Database.Tables[1].SetDataSource(HttpContext.Current.Session["rptContratoLista"]);
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Propuesta Semanal", ""));
                        rd.SetParameterValue("rangoFecha", strPer);
                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.EjecutivoBarrenacion:
                    {
                        rd = new rtpEjecutivo();

                        reporteEjecutivoDTO dto = new reporteEjecutivoDTO();
                        setMedidasReporte("NOMODAL");
                        List<reporteEjecutivoDTO> dtoEjecutivo = new List<reporteEjecutivoDTO>();
                        var rEjecutivo = Session["dtoEjecutivo"] as reporteEjecutivoDTO;
                        List<rentaEquipoDetalleDTO> dtoDetalleRenta = (List<rentaEquipoDetalleDTO>)Session["dtoDetRentaQuipos"];
                        dtoEjecutivo.Add(rEjecutivo);
                        rd.Database.Tables[1].SetDataSource(dtoEjecutivo);
                        rd.Database.Tables[0].SetDataSource(getInfoEncaCplan("Reporte Ejecutivo", ""));
                        rd.Database.Tables[2].SetDataSource(dtoDetalleRenta);
                        Session.Add("reporte", rd);
                        break;

                    }
                case ReportesEnum.Amortizacion:
                    {
                        rd = new rptTabuladorPagos();
                        int pContratoID = Convert.ToInt32(Request.QueryString["pContratoID"].ToString());
                        var reporteDTO = dXPFS.GetDocumentosXPagarServices().DesgloseGeneral(pContratoID);

                        List<AmortizacioContratoDTO> detalle = reporteDTO.detalle.Select(r => new
                                AmortizacioContratoDTO
                                {
                                    Parcialidad = r.Parcialidad,
                                    AmortizacionCapital = r.AmortizacionCapital,
                                    IVASCapital = r.IVASCapital,
                                    Interes = r.Interes,
                                    IVAInteres = r.IVAInteres,
                                    FechaVencimiento = r.FechaVencimiento.ToShortDateString(),
                                    Intereses = r.Intereses.ToString(),
                                    Id = r.Id,
                                    Importe = r.Importe,
                                    Saldo = r.Saldo

                                }).ToList();
                        contratoDTO contrato = new contratoDTO();

                        contrato.descripcion = reporteDTO.contrato.Descripcion;
                        contrato.fechaContrato = reporteDTO.contrato.fechaFirma.Value;
                        contrato.folioContrato = reporteDTO.contrato.Folio;
                        contrato.institucion = reporteDTO.contrato.Institucion.Nombre;
                        contrato.tipoCambio = reporteDTO.contrato.TipoCambio;
                        List<contratoDTO> contratoDt = new List<contratoDTO>();
                        contratoDt.Add(contrato);

                        rd.Database.Tables[2].SetDataSource(detalle);
                        rd.Database.Tables[1].SetDataSource(contratoDt);
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Tabla de Amortizacion,", ""));
                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.ReporteFlujoEfectivoOperativo:
                    {
                        rd = new rptCedulaActivoFijo();
                        setMedidasReporte("HO");

                        DateTime pFechaSaldoActual = Convert.ToDateTime("29/02/2020");
                        string pAñoFecha = (pFechaSaldoActual.Year).ToString();
                        string pAñoAnterior = (pFechaSaldoActual.Year - 1).ToString();
                        string pFecha = pFechaSaldoActual.ToShortDateString();

                        var info = (ActivoFijoResumenCedulaDTO)Session["rptCedulaActivoFijo"];

                        rd.Database.Tables[0].SetDataSource(info.Depreciaciones);
                        rd.Database.Tables[1].SetDataSource(info.Saldos);
                        rd.Database.Tables[2].SetDataSource(getInfoEnca("RESUMEN CEDULA DE ACTIVO FIJO,", ""));
                        rd.SetParameterValue("saldo_anioAnterior", pAñoAnterior);
                        rd.SetParameterValue("saldo_fecha", pFecha);
                        rd.SetParameterValue("saldo_fechaAño", pAñoFecha);
                        rd.SetParameterValue("pAño", pAñoFecha);
                        rd.SetParameterValue("pFecha", pFecha);
                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.ReporteFlujoEfectivoDirecto:
                    {
                        rd = new rptDirectoProyectado();
                        setMedidasReporte("HO");
                        List<tblDirectoTheadDTO> encabezadoInfo = new List<tblDirectoTheadDTO>();

                        encabezadoInfo.Add((tblDirectoTheadDTO)Session["enc"]);
                        var informacionTabla = (List<FlujoEfectivoDirectoDTO>)Session["lstGenerarFlujoEfectivoDirecto"];
                        var fechaPeriodo = Request.QueryString["pFechaPeriodo"].ToString();

                        rd.Database.Tables[0].SetDataSource(informacionTabla);
                        rd.Database.Tables[1].SetDataSource(ToDataTable(encabezadoInfo));
                        rd.Database.Tables[2].SetDataSource(getInfoEnca("RESUMEN CEDULA DE ACTIVO FIJO,", ""));
                        rd.SetParameterValue("fechaPeriodo", fechaPeriodo);
                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.ReporteResumenCedulaActivoFijo:
                    {
                        if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan)
                        {
                            rd = new rptCedulaActivoFijoCPlan();
                            setMedidasReporte("HO");

                            DateTime pFechaSaldoActual = Convert.ToDateTime(Request.QueryString["pFechaSaldoActual"].ToString());// Convert.ToDateTime("29/02/2020");
                            string pAñoFecha = (pFechaSaldoActual.Year).ToString();
                            string pAñoAnterior = (pFechaSaldoActual.Year - 1).ToString();
                            string pFecha = pFechaSaldoActual.ToShortDateString();

                            var info = (ActivoFijoResumenCedulaDTO)Session["rptCedulaActivoFijo"];

                            rd.Database.Tables[0].SetDataSource(getInfoEnca("RESUMEN CEDULA DE ACTIVO FIJO,", ""));
                            rd.Database.Tables[1].SetDataSource(info.Depreciaciones);
                            rd.Database.Tables[2].SetDataSource(info.Saldos);
                            var infoSaldoColombia = (List<CedulaSaldoColombiaDTO>)Session["rptSaldosColombia"];
                            rd.Database.Tables[3].SetDataSource(infoSaldoColombia);
                            rd.SetParameterValue("saldo_anioAnterior", pAñoAnterior);
                            rd.SetParameterValue("saldo_fecha", pFecha);
                            rd.SetParameterValue("saldo_fechaAño", pAñoFecha);
                            rd.SetParameterValue("pAño", pAñoFecha);
                            rd.SetParameterValue("pFecha", pFecha);
                            Session.Add("reporte", rd);
                        }
                        else
                        {
                            rd = new rptCedulaActivoFijo();
                            setMedidasReporte("HO");

                            DateTime pFechaSaldoActual = Convert.ToDateTime(Request.QueryString["pFechaSaldoActual"].ToString());// Convert.ToDateTime("29/02/2020");
                            string pAñoFecha = (pFechaSaldoActual.Year).ToString();
                            string pAñoAnterior = (pFechaSaldoActual.Year - 1).ToString();
                            string pFecha = pFechaSaldoActual.ToShortDateString();

                            var info = (ActivoFijoResumenCedulaDTO)Session["rptCedulaActivoFijo"];

                            rd.Database.Tables[0].SetDataSource(getInfoEnca("RESUMEN CEDULA DE ACTIVO FIJO,", ""));
                            rd.Database.Tables[1].SetDataSource(info.Depreciaciones);
                            rd.Database.Tables[2].SetDataSource(info.Saldos);
                            rd.SetParameterValue("saldo_anioAnterior", pAñoAnterior);
                            rd.SetParameterValue("saldo_fecha", pFecha);
                            rd.SetParameterValue("saldo_fechaAño", pAñoFecha);
                            rd.SetParameterValue("pAño", pAñoFecha);
                            rd.SetParameterValue("pFecha", pFecha);
                            Session.Add("reporte", rd);
                        }

                        break;
                    }
                case ReportesEnum.rptEncuestaUsuarioPermisos:
                    {
                        rd = new rptPlaneacionSemanal();

                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.rptGestionUsuariosEncuestas:
                    {
                        rd = new rptPlaneacionSemanal();
                        //   encuestasProveedoresFactoryServices.getEncuestasProveedoresFactoryServices().getEncuestaCerteza();
                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.semanal_preventivoEjecutar:
                    {
                        rd = new rptPlaneacionSemanal();

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Direccion de Maquinaria y Equipo", "Planificación semanal mantenimiento preventivo a ejectuar"));

                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.pm_Ejecutado:
                    {

                        rd = new rptPrecisionMantenimiento();
                        setMedidasReporte("HO");

                        string pAreaCuenta = Request.QueryString["pAreaCuenta"].ToString();
                        DateTime pFechaInicioPm = Convert.ToDateTime(Request.QueryString["pFechaInicioPm"].ToString());
                        DateTime pFechaFinPm = Convert.ToDateTime(Request.QueryString["pFechaFinPm"].ToString());
                        string pEconomico1 = Request.QueryString["pEconomico1"].ToString();

                        var programaSemanal = objMantenimientoFactory.getMantenimientoService().getPlaneacionSemanal(pAreaCuenta, pFechaInicioPm, pFechaFinPm, pEconomico1, false).Where(x => x.estatusPM == 3).ToList();

                        var pAdministradorMaquinaria = cfs.getConciliacionServices().getAuth(5, pAreaCuenta);
                        var pGerenteProyecto = cfs.getConciliacionServices().getAuth(1, pAreaCuenta);
                        var pProyecto = centroCostosFactoryServices.getCentroCostosService().getNombreCCFix(pAreaCuenta);
                        var pPlaneador = "N/A";
                        if (programaSemanal.Count() > 0)
                        {
                            var pIDPlaneador = programaSemanal.GroupBy(x => x.idPlaneador).Select(x => new { id = x.Key, contador = x.Count() }).OrderByDescending(x => x.contador).FirstOrDefault().id;
                            pPlaneador = usuarioFactoryServices.getUsuarioService().getNombreUsuario(pIDPlaneador);
                        }
                        var presision = programaSemanal.Select(x => new
                        {
                            economico = x.economico,
                            tipoServicio = x.tipoServicio,
                            fechaProgramado = x.fechaProgramado.ToShortDateString(),
                            horometroProgramado = x.horometroProgramado,
                            fechaEjecutado = x.fechaEjecutado.ToShortDateString(),
                            horometroEjecutado = x.horometroEjecutado,
                            observacion = x.observacion,
                            diferencia = Math.Abs(x.horometroProgramado - x.horometroEjecutado)/* - 250*/,
                            porError = Math.Round((Math.Abs(x.horometroProgramado - x.horometroEjecutado) / 250) * 100, 2),
                            fecha = x.fechaEjecutado
                        }).OrderBy(x => x.fecha).ToList();

                        int countDesfasados = presision.Where(x => x.diferencia > 25 || x.diferencia < -25).Count();
                        int countTotal = presision.Count();


                        decimal pPorCenError = countTotal != 0 ? (((decimal)countDesfasados / (decimal)countTotal) * 100) : (countDesfasados * 100);
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Direccion de Maquinaria y Equipo", "Planificacion Semanal de mantenimiento preventivo a ejecutar"));
                        rd.Database.Tables[1].SetDataSource(ToDataTable(presision));

                        if (pAdministradorMaquinaria == null) { rd.SetParameterValue("pAdministradorMaquinaria", "N/A"); }
                        else { rd.SetParameterValue("pAdministradorMaquinaria", pAdministradorMaquinaria.usuario.nombre + " " + pAdministradorMaquinaria.usuario.apellidoPaterno); }
                        rd.SetParameterValue("pPorCenError", Math.Round(pPorCenError, 2));
                        rd.SetParameterValue("pProyecto", pProyecto);
                        if (pGerenteProyecto == null) { rd.SetParameterValue("pGerenteProyecto", "N/A"); }
                        else { rd.SetParameterValue("pGerenteProyecto", pGerenteProyecto.usuario.nombre + " " + pGerenteProyecto.usuario.apellidoPaterno); }
                        rd.SetParameterValue("pPeriodoFechas", "Del " + pFechaInicioPm.ToShortDateString() + " AL " + pFechaFinPm.ToShortDateString());
                        rd.SetParameterValue("pPlaneador", pPlaneador);
                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.pm_planeacionSemanal:
                    {

                        rd = new rptPlanificacionSemanal();
                        setMedidasReporte("HO");

                        string pAreaCuenta = Request.QueryString["pAreaCuenta"].ToString();
                        DateTime pFechaInicioPm = Convert.ToDateTime(Request.QueryString["pFechaInicioPm"].ToString());
                        DateTime pFechaFinPm = Convert.ToDateTime(Request.QueryString["pFechaFinPm"].ToString());
                        string pEconomico1 = Request.QueryString["pEconomico1"].ToString();

                        var programaSemanal = objMantenimientoFactory.getMantenimientoService().getPlaneacionSemanal(pAreaCuenta, pFechaInicioPm, pFechaFinPm, pEconomico1, true).ToList();
                        var pAdministradorMaquinaria = cfs.getConciliacionServices().getAuth(9, pAreaCuenta);
                        var pGerenteProyecto = cfs.getConciliacionServices().getAuth(1, pAreaCuenta);
                        var pProyecto = centroCostosFactoryServices.getCentroCostosService().getNombreCCFix(pAreaCuenta);

                        var listaDuracion = Session["listaDuracion"] as List<cboDTO>;

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Direccion de Maquinaria y Equipo", "Planeacion Semanal de mantenimiento a ejecutar"));
                        rd.Database.Tables[1].SetDataSource(ToDataTable(programaSemanal.ToList().OrderByDescending(x => x.fechaProgramado).Select(x =>
                        {
                            var auxObservaciones = "";
                            var auxListaDutacion = listaDuracion.First(y => y.Text == x.economico && y.id == x.idMant);
                            if (auxListaDutacion.componentes != null)
                            {
                                if (x.observacion.Trim() != "") auxObservaciones += ". ";
                                foreach (var item in auxListaDutacion.componentes) { auxObservaciones += (item + ", "); }
                                auxObservaciones = auxObservaciones.Remove(auxObservaciones.Length - 2);

                            }
                            return new
                            {
                                economico = x.economico,
                                tipoServicio = x.tipoServicio,
                                fechaProgramado = x.fechaProgramado.ToShortDateString(),
                                horometroProgramado = x.horometroProgramado,
                                fechaEjecutado = "",// x.fechaEjecutado.ToShortDateString(),
                                horometroEjecutado = 0, //  x.horometroEjecutado,
                                observacion = x.observacion.Trim() + auxObservaciones,
                                duracion = auxListaDutacion.Value
                            };
                        }).ToList()));

                        rd.SetParameterValue("pAdministradorMaquinaria", pAdministradorMaquinaria == null ? "" : pAdministradorMaquinaria.usuario.nombre + " " + pAdministradorMaquinaria.usuario.apellidoPaterno);

                        rd.SetParameterValue("pProyecto", pProyecto);
                        rd.SetParameterValue("pGerenteProyecto", pGerenteProyecto == null ? "" : pGerenteProyecto.usuario.nombre + " " + pGerenteProyecto.usuario.apellidoPaterno);
                        rd.SetParameterValue("pPeriodoFechas", "Del " + pFechaInicioPm.ToShortDateString() + " AL " + pFechaFinPm.ToShortDateString());
                        Session.Add("reporte", rd);
                        break;
                    }

                case ReportesEnum.RPTCARATULAPRECIOS:
                    {
                        rd = new rptAutorizacionCaratula();
                        setMedidasReporte("NOMODAL");

                        int pCaratulaID = Convert.ToInt32(Request.QueryString["pCaratulaID"]);
                        int pIDAutoriza = Convert.ToInt32(Request.QueryString["pIDAutoriza"]);
                        var data = cfs.getConciliacionServices().loadAutorizacionCaratula(pIDAutoriza);

                        var listaCaratula = cfs.getConciliacionServices().getCaratulaByID(pCaratulaID);


                        var caratula = (tblAutorizaCaratulaDTO)Session["infoAutorizacionCaratula"];
                        var obra = cfs.getConciliacionServices().GetNameObra(caratula.obraID);
                        string pProyecto = obra;

                        string pNombElabora = caratula.usuarioElaboraNombre;
                        string pCadenaFirma = caratula.cadenaElabora;
                        string pNombreVobo1 = caratula.usuarioVobo1Nombre;
                        string pCadenaFirmaVobo1 = caratula.cadenaVobo1;
                        string pNombreVobo2 = caratula.usuarioVobo2Nombre;
                        string pCadenaVobo2 = caratula.cadenaVobo2;
                        string pNombreAutoriza1 = caratula.usuarioAutorizaNombre;
                        string pCadenaFirmaAutoriza = caratula.cadenaAutoriza;

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Direccion de Maquinaria y Equipo", "CARATULA CONCILIACION DE PRECIOS"));
                        rd.Database.Tables[1].SetDataSource(listaCaratula);

                        rd.SetParameterValue("pNombElabora", pNombElabora);
                        rd.SetParameterValue("pCadenaFirma", pCadenaFirma);

                        rd.SetParameterValue("pNombreVobo1", pNombreVobo1);
                        rd.SetParameterValue("pCadenaFirmaVobo1", pCadenaFirmaVobo1);
                        rd.SetParameterValue("pNombreVobo2", pNombreVobo2);
                        rd.SetParameterValue("pCadenaVobo2", pCadenaVobo2);
                        rd.SetParameterValue("pNombreAutoriza1", pNombreAutoriza1);
                        rd.SetParameterValue("pCadenaFirmaAutoriza", pCadenaFirmaAutoriza);

                        rd.SetParameterValue("pNombElabora", pNombElabora);
                        rd.SetParameterValue("pProyecto", pProyecto);
                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.RPTCARATULAPRECIOSMODAL:
                    {
                        rd = new rptAutorizacionCaratula();
                        setMedidasReporte("HO");

                        int pCaratulaID = Convert.ToInt32(Request.QueryString["pCaratulaID"]);
                        int pIDAutoriza = Convert.ToInt32(Request.QueryString["pIDAutoriza"]);
                        var data = cfs.getConciliacionServices().loadAutorizacionCaratula(pIDAutoriza);

                        var listaCaratula = cfs.getConciliacionServices().getCaratulaByID(pCaratulaID);


                        var caratula = (tblAutorizaCaratulaDTO)Session["infoAutorizacionCaratula"];
                        var obra = cfs.getConciliacionServices().GetNameObra(caratula.obraID);
                        string pProyecto = obra;

                        string pNombElabora = caratula.usuarioElaboraNombre;
                        string pCadenaFirma = caratula.cadenaElabora;
                        string pNombreVobo1 = caratula.usuarioVobo1Nombre;
                        string pCadenaFirmaVobo1 = caratula.cadenaVobo1;
                        string pNombreVobo2 = caratula.usuarioVobo2Nombre;
                        string pCadenaVobo2 = caratula.cadenaVobo2;
                        string pNombreAutoriza1 = caratula.usuarioAutorizaNombre;
                        string pCadenaFirmaAutoriza = caratula.cadenaAutoriza;

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Direccion de Maquinaria y Equipo", "CARATULA CONCILIACION DE PRECIOS"));
                        rd.Database.Tables[1].SetDataSource(listaCaratula);

                        rd.SetParameterValue("pNombElabora", pNombElabora);
                        rd.SetParameterValue("pCadenaFirma", pCadenaFirma);

                        rd.SetParameterValue("pNombreVobo1", pNombreVobo1);
                        rd.SetParameterValue("pCadenaFirmaVobo1", pCadenaFirmaVobo1);
                        rd.SetParameterValue("pNombreVobo2", pNombreVobo2);
                        rd.SetParameterValue("pCadenaVobo2", pCadenaVobo2);
                        rd.SetParameterValue("pNombreAutoriza1", pNombreAutoriza1);
                        rd.SetParameterValue("pCadenaFirmaAutoriza", pCadenaFirmaAutoriza);

                        rd.SetParameterValue("pNombElabora", pNombElabora);
                        rd.SetParameterValue("pProyecto", pProyecto);
                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.Prueba:
                    {
                        rd = new rptPrueba();

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("", "Reporte de Insumos de Almacén"));
                        Session.Add("reporte", rd);
                        break;
                    }

                case ReportesEnum.CONCILIACIONHOROMETROS:
                    {
                        if (Convert.ToInt32(Request.QueryString["pTipoVista"]) == 1)
                        {
                            setMedidasReporte("HO");
                        }
                        else
                        {
                            setMedidasReporte("NOMODAL");
                        }

                        rd = new rptConciliacionHorometros();
                        int pConciliacionID = Convert.ToInt32(Request.QueryString["pConciliacionID"]);
                        var auth = cfs.getConciliacionServices().loadAutorizacionFromConciliacacionId(pConciliacionID);
                        var encConciliacion = cfs.getConciliacionServices().getCapEncConciliacion(pConciliacionID);
                        var conciliaciones = cfs.getConciliacionServices().getConciliaciones(pConciliacionID);
                        var gerente = usuarioFactoryServices.getUsuarioService().getPassByID(auth.autorizaGerenteID);
                        var admin = usuarioFactoryServices.getUsuarioService().getPassByID(auth.autorizaAdmin);
                        var director = usuarioFactoryServices.getUsuarioService().getPassByID(auth.autorizaDirector);
                        var centroCostos = centroCostosFactoryServices.getCentroCostosService().getEntityCCConstruplan(encConciliacion.centroCostosID);
                        var intMoneda = cfs.getConciliacionServices().getMonedaCaratula(encConciliacion.centroCostosID);

                        string moneda = "";
                        moneda = intMoneda == 1 ? "M.N." : "USD";

                        var sumaTotal = conciliaciones.Sum(x => x.total);


                        DateTime fecha = DateTime.Now;
                        DateTime FechaSend = new DateTime(encConciliacion.anio, 01, 01);
                        //var Data = encConciliacion.esQuincena ? GetQuincenas(encConciliacion.anio).FirstOrDefault(x => x.Value == encConciliacion.fechaID) : GetFechas(FechaSend).FirstOrDefault(x => x.Value == encConciliacion.fechaID);
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("", "CONCILIACIÓN DE HOROMETROS"));
                        rd.Database.Tables[1].SetDataSource(conciliaciones.Select(c => new
                        {
                            no = c.numero,
                            economico = c.economico,
                            descripcion = c.descripcion,
                            hi = c.horometroInicial,
                            hf = c.horometroFinal,
                            he = c.horometroEfectivo,
                            unidad = c.unidad == 1 ? "HORAS" : "DÍA",
                            costoHora = c.costo,
                            costoTotal = c.total,
                            carga = EnumHelper.GetDescription((EmpresaEnum)c.idEmpresa).ToString(),
                            observaciones = c.observaciones

                        }).OrderBy(c => c.economico).ToList());
                        rd.SetParameterValue("FechaInicio", encConciliacion.fechaInicio.ToShortDateString());
                        rd.SetParameterValue("fechaFinal", encConciliacion.fechaFin.ToShortDateString());
                        ////if (Data != null)
                        ////{
                        ////    var ArraySplit = Data.Text.Split('-');
                        ////    FechaSend = Convert.ToDateTime(ArraySplit[1]);
                        ////    rd.SetParameterValue("FechaInicio", ArraySplit[0]);
                        ////    if (centroCostos.id == 55 && encConciliacion.fechaID == 19)
                        ////    {
                        ////        rd.SetParameterValue("fechaFinal", "18/09/2019 - 30/09/2019");
                        ////    }
                        ////    else
                        ////    {
                        ////        rd.SetParameterValue("fechaFinal", ArraySplit[1]);
                        ////    }
                        ////}
                        rd.SetParameterValue("pProyecto", centroCostos.cc + " " + centroCostos.descripcion);
                        rd.SetParameterValue("nombreGerente", string.Format("{0} {1} {2}", gerente.nombre, gerente.apellidoPaterno, gerente.apellidoMaterno));
                        rd.SetParameterValue("cadenaGerente", auth.firmaGerente);
                        rd.SetParameterValue("cadenaAdministrador", auth.firmaAdmin);
                        rd.SetParameterValue("nombreAdministrador", string.Format("{0} {1} {2}", admin.nombre, admin.apellidoPaterno, admin.apellidoMaterno));
                        rd.SetParameterValue("cadenaDirector", auth.firmaDirector);
                        rd.SetParameterValue("nombreDirector", string.Format("{0} {1} {2}", director.nombre, director.apellidoPaterno, director.apellidoMaterno));
                        rd.SetParameterValue("moneda", moneda);


                        Session.Add("reporte", rd);
                    }
                    break;

                case ReportesEnum.RPTDESERVICIO:
                    {
                        setMedidasReporte("HO");
                        rd = new rptServicioProgramado();
                        int idMant = Int32.Parse(Request.QueryString["fId"]);
                        tblM_ParamReport objmantenimiento = new tblM_ParamReport();

                        objmantenimiento = objMantenimientoFactory.getMantenimientoService().ConsultarMantenimientobyID(idMant);

                        var reporteProg = objMantenimientoFactory.getMantenimientoService().GetReporteProgramado(idMant);

                        var leyendas = reporteProg.leyendas.Where(x => !x.Contains("Inspección")).Select(x => new
                        {
                            leyenda = x
                        });

                        var leyendas2 = reporteProg.leyendas.Where(x => x.Contains("Inspección")).Select(x => new ReporteActExtDNsDTO
                        {
                            descripcion = x,
                            check = "x"
                        });

                        rd.Database.Tables[0].SetDataSource(reporteProg.miscelaneos);
                        rd.Database.Tables[1].SetDataSource(leyendas2);
                        rd.Database.Tables[2].SetDataSource(leyendas);
                        rd.Database.Tables[3].SetDataSource(getInfoEnca("Dirección de Maquinaria y Equipo", "Reporte de Servicio"));

                        rd.SetParameterValue("tipopm", objmantenimiento.tipopm ?? "");
                        rd.SetParameterValue("solicitado", reporteProg.enterado);
                        rd.SetParameterValue("modelo", objmantenimiento.modelo ?? "");
                        rd.SetParameterValue("economico", objmantenimiento.economico ?? "");
                        rd.SetParameterValue("fechaImpresion", DateTime.Today.Date.ToShortDateString());
                        rd.SetParameterValue("horometroActual", reporteProg.horometroActual);

                        rd.SetParameterValue("componentes1", reporteProg.componentes1);
                        rd.SetParameterValue("componentes2", reporteProg.componentes2);
                        rd.SetParameterValue("componentes3", reporteProg.componentes3);
                        rd.SetParameterValue("componentes4", reporteProg.componentes4);
                        rd.SetParameterValue("componentes5", reporteProg.componentes5);

                        rd.SetParameterValue("check1si", reporteProg.componentes1 != "" ? "x" : "");
                        rd.SetParameterValue("check1no", reporteProg.componentes1 != "" ? "" : "x");
                        rd.SetParameterValue("check2si", reporteProg.componentes2 != "" ? "x" : "");
                        rd.SetParameterValue("check2no", reporteProg.componentes2 != "" ? "" : "x");
                        rd.SetParameterValue("check3si", reporteProg.componentes3 != "" ? "x" : "");
                        rd.SetParameterValue("check3no", reporteProg.componentes3 != "" ? "" : "x");
                        rd.SetParameterValue("check4si", reporteProg.componentes4 != "" ? "x" : "");
                        rd.SetParameterValue("check4no", reporteProg.componentes4 != "" ? "" : "x");
                        rd.SetParameterValue("check5si", reporteProg.componentes5 != "" ? "x" : "");
                        rd.SetParameterValue("check5no", reporteProg.componentes5 != "" ? "" : "x");

                        //rd.SetParameterValue("realizo", reporteProg.realizo);
                        rd.SetParameterValue("realizo", reporteProg.realizo);
                        rd.SetParameterValue("comentarios", reporteProg.comentarios != null ? reporteProg.comentarios : "");

                        rd.SetParameterValue("enterado", reporteProg.enterado);
                        rd.SetParameterValue("fechaFooter", reporteProg.fechaFooter);

                        var A = objMantenimientoFactory.getMantenimientoService().CargaDeProyectado(idMant);

                        var modeloID = objMantenimientoFactory.getMantenimientoService().ConsultaModelobyMantenimiento(idMant);

                        #region Actividades Lubricantes
                        var obj = objMantenimientoFactory.getMantenimientoService().ConsultarJGEstructura2(modeloID);
                        var objHist = objMantenimientoFactory.getMantenimientoService().ConsultarJGHis(idMant);
                        var objProy = objMantenimientoFactory.getMantenimientoService().CargaDeProyectado(idMant);
                        var objComponentes = objMantenimientoFactory.getMantenimientoService().getCatComponentesViscosidades();
                        var objSuministros = obj.Select(x => x.aceiteDTO.Select(y => y.edadSuministro).Select(f => f));

                        var actividadesLubricantes = obj.Select(x => new
                        {
                            objComponente = x.componenteMantenimiento,
                            componente = x.descripcion,
                            Suministros = x.aceiteDTO.Where(y => y.componenteID == x.componenteMantenimiento.idCompVis),
                            TipoPrueba = "",
                            VidaUtil = "",
                            Info = "",
                            VidaConsumida = "",
                            VidaRestante = "",
                            Programar = "",
                            objHis = objHist.FirstOrDefault(oh => oh.idComp == x.componenteMantenimiento.idCompVis),
                            proyectado = objProy.FirstOrDefault(p => p.idComp == x.componenteMantenimiento.idCompVis),
                            idComponente = x.aceiteDTO.FirstOrDefault().componenteID
                        });
                        #endregion

                        #region Actividades Extras
                        var objActividadesExtras = objMantenimientoFactory.getMantenimientoService().ConsultarActividadesExtras(modeloID);
                        var objActividadesExtrashis = objMantenimientoFactory.getMantenimientoService().ConsultarActividadesExtrashis(idMant);
                        var objProyActExt = objMantenimientoFactory.getMantenimientoService().CargaDeAEProyectado(idMant);

                        var actividadesExtras = objActividadesExtras.Select(x => new
                        {
                            actividad = x.descripcion,
                            vidaUtil = x.perioricidad,
                            info = "",
                            vidaConsumida = "",
                            vidaRestante = "",
                            programar = "",
                            x.Componente,
                            x.descripcion,
                            x.id,
                            x.idAct,
                            x.idformato,
                            x.idTipo,
                            x.leyenda,
                            x.orden,
                            x.perioricidad,
                            x.PM,
                            x.Tipo,
                            hrsAplico = objActividadesExtrashis.FirstOrDefault(y => y.actividad.Equals(x.descripcion)).Hrsaplico,
                            proyectado = objProyActExt.FirstOrDefault(y => y.idAct == x.idAct)
                        });
                        #endregion

                        #region Actividades DN's
                        var objActividadesDN = objMantenimientoFactory.getMantenimientoService().ConsultarActividadesDN(modeloID, 1);
                        var objActividadesDNHis = objMantenimientoFactory.getMantenimientoService().ConsultarActividadesDNhis(idMant);
                        var objDNProyectado = objMantenimientoFactory.getMantenimientoService().CargaDeDNProyectado(idMant);

                        var actividadesDNs = objActividadesDN.Select(x => new
                        {
                            actividad = x.descripcion,
                            vidaUtil = x.perioricidad,
                            info = "",
                            vidaConsumida = "",
                            vidaRestante = "",
                            programar = "",
                            proyectado = objDNProyectado.FirstOrDefault(y => y.idAct == x.idAct),
                            Hrsaplico = objActividadesDNHis.FirstOrDefault(f => f.actividad.Equals(x.descripcion)).Hrsaplico
                        });
                        #endregion



                        Session.Add("reporte", rd);
                    }
                    break;
                case ReportesEnum.RPTINSUMOSCONSULTA:
                    {
                        switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
                        {
                            case EmpresaEnum.Peru:
                                {
                                    #region PERÚ
                                    rd = new rptListadoInsumosPeru();

                                    string pInsumoC = Request.QueryString["pInsumoC"];
                                    string pDescripcionC = Request.QueryString["pDescripcionC"];

                                    var DataConstruplan = (List<rptInsumosDTO>)Session["rptInsumosConstruplan"];

                                    decimal pCantidadConstruplan = DataConstruplan.Sum(x => x.cantidad);

                                    rd.Database.Tables[0].SetDataSource(getInfoEnca("", "Reporte de Insumos de Almacén"));
                                    rd.Database.Tables[1].SetDataSource(DataConstruplan);

                                    rd.SetParameterValue("pInsumoC", string.Join(", ", DataConstruplan.Select(x => x.insumo)));
                                    rd.SetParameterValue("pDescripcionC", "");
                                    rd.SetParameterValue("pSuma", pCantidadConstruplan);
                                    rd.SetParameterValue("pCantidadConstruplan", pCantidadConstruplan);

                                    Session.Add("reporte", rd);

                                    break;
                                    #endregion
                                }
                            default:
                                {
                                    #region DEMÁS EMPRESAS
                                    rd = new rptListadoInsumos();

                                    string pInsumoC = Request.QueryString["pInsumoC"];
                                    string pDescripcionC = Request.QueryString["pDescripcionC"];

                                    var DataConstruplan = (List<rptInsumosDTO>)Session["rptInsumosConstruplan"];
                                    var DataArrendadora = (List<rptInsumosDTO>)Session["rptInsumosArrendadora"];

                                    decimal pCantidadConstruplan = DataConstruplan.Sum(x => x.cantidad);
                                    decimal pCantidadArrendadora = DataArrendadora.Sum(x => x.cantidad);

                                    rd.Database.Tables[0].SetDataSource(getInfoEnca("", "Reporte de Insumos de Almacén"));
                                    rd.Database.Tables[1].SetDataSource(DataConstruplan);
                                    rd.Database.Tables[2].SetDataSource(DataArrendadora);

                                    rd.SetParameterValue("pInsumoC", string.Join(", ", DataConstruplan.Union(DataArrendadora).Select(x => x.insumo)));
                                    rd.SetParameterValue("pDescripcionC", "");
                                    rd.SetParameterValue("pSuma", pCantidadArrendadora + pCantidadConstruplan);
                                    rd.SetParameterValue("pCantidadConstruplan", pCantidadConstruplan);
                                    rd.SetParameterValue("pCantidadArrendadora", pCantidadArrendadora);

                                    Session.Add("reporte", rd);
                                    break;
                                    #endregion
                                }
                        }
                    }
                    break;
                case ReportesEnum.RPTHORASHOMBREEQUIPO:
                    {
                        rd = new rptHorasHombreMaquina();
                        InfoEncabezadoEvaluacion EncabezadoReprote = new InfoEncabezadoEvaluacion();
                        var sendData = Session["HoraHombreENmaquinaria"];

                        string pFechaInicio1 = Request.QueryString["pFechainicio"];
                        string pFechaFin1 = Request.QueryString["pFechaFin"];
                        string cc = Request.QueryString["pCC"];

                        string nombreCentroCostos = centroCostosFactoryServices.getCentroCostosService().getNombreCCArrendadoraRH(cc);

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Dirección de Maquinaria y Equipo", "Dirección de Maquinaria y Equipo"));
                        rd.Database.Tables[1].SetDataSource(sendData);


                        rd.SetParameterValue("pFechaInicio", pFechaInicio1);
                        rd.SetParameterValue("pFechaFin", pFechaFin1);
                        rd.SetParameterValue("pCC", cc + "- " + nombreCentroCostos);
                        rd.SetParameterValue("hCC", setTitleCC());


                        Session.Add("reporte", rd);

                    }
                    break;
                case ReportesEnum.CONCENTRADOHHPDETALLE:
                    {
                        rd = new rptPuestosGenerales();
                        InfoEncabezadoEvaluacion EncabezadoReprote = new InfoEncabezadoEvaluacion();
                        var sendData = Session["rptDetalleGeneralPorPuesto"];

                        var periodo = Request.QueryString["pPerioriodo"];

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Dirección de Maquinaria y Equipo", "REPORTE CONCENTRADO POR PUESTO."));
                        rd.Database.Tables[1].SetDataSource(sendData);


                        rd.SetParameterValue("Periodo", "Periodo : " + periodo);
                        Session.Add("reporte", rd);

                    }
                    break;
                case ReportesEnum.UTLIZACION:
                    {
                        rd = new rptUtilizacionDetallePuesto();
                        InfoEncabezadoEvaluacion EncabezadoReprote = new InfoEncabezadoEvaluacion();
                        var sendData = Session["DetallePersonaDT"];
                        var puestoID = Request.QueryString["pPuestoID"];

                        var Puesto = capHorasHombreFactoryServices.getCapHorasHombreFactoryServices().getListaPuestos().FirstOrDefault(x => x.Value == puestoID);

                        var periodo = Request.QueryString["pPerioriodo"];

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Dirección de Maquinaria y Equipo", "REPORTE UTILIZACION"));
                        rd.Database.Tables[1].SetDataSource(sendData);

                        rd.SetParameterValue("puesto", Puesto != null ? Puesto.Text : "");
                        rd.SetParameterValue("Periodo", "Periodo : " + periodo);
                        Session.Add("reporte", rd);


                    }
                    break;
                case ReportesEnum.CONCENTRADOHHPUESTOS:
                    {
                        rd = new verReportePuestosDistribucion();
                        InfoEncabezadoEvaluacion EncabezadoReprote = new InfoEncabezadoEvaluacion();
                        var sendData = Session["ConcentradoGeneral"];

                        var puestoID = Request.QueryString["pPuestoID"];

                        var Puesto = capHorasHombreFactoryServices.getCapHorasHombreFactoryServices().getListaPuestos().FirstOrDefault(x => x.Value == puestoID);

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Dirección de Maquinaria y Equipo", "REPORTE DISTRIBUCION POR PUESTO"));
                        rd.Database.Tables[1].SetDataSource(sendData);

                        var periodo = Request.QueryString["pPerioriodo"];
                        rd.SetParameterValue("Periodo", "Periodo : " + periodo);
                        rd.SetParameterValue("puesto", Puesto != null ? Puesto.Text : "");
                        Session.Add("reporte", rd);

                    }
                    break;

                case ReportesEnum.CONCENTRADOHHEMPLEADO:
                    {
                        rd = new rptConcentradoHHEmpleado();
                        InfoEncabezadoEvaluacion EncabezadoReprote = new InfoEncabezadoEvaluacion();
                        var sendData = Session["DetallePersonaDTSession"];

                        string pPuesto = Request.QueryString["pPuesto"];
                        string pNombre = Request.QueryString["pNombre"];
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Dirección de Maquinaria y Equipo", ""));
                        rd.Database.Tables[1].SetDataSource(sendData);

                        rd.SetParameterValue("pNombre", pNombre);
                        rd.SetParameterValue("pPuesto", pPuesto);

                        Session.Add("reporte", rd);

                    }
                    break;
                case ReportesEnum.EvaluacionaSubContratistas:
                    {
                        rd = new rptEvaluacionSubContratista();
                        InfoEncabezadoEvaluacion EncabezadoReprote = new InfoEncabezadoEvaluacion();
                        List<InfoEncabezadoEvaluacion> EncabezadoReproteListo = new List<InfoEncabezadoEvaluacion>();
                        var rEncuestaID = Convert.ToInt16(Request.QueryString["rEncuestaID"]);


                        var Data = encuestasSubContratistasFactoryServices.getEncuestasSubContratistasFactoryServices().GetEncuestaContestada(rEncuestaID);
                        var DataInfoEncabezado = encuestasSubContratistasFactoryServices.getEncuestasSubContratistasFactoryServices().GetDetalleEncuesta(rEncuestaID);

                        var usuariop = usuarioFactoryServices.getUsuarioService().ListUsersById(DataInfoEncabezado.evaluador).FirstOrDefault();
                        rd.Database.Tables[1].SetDataSource(GetRespuestas(Data));
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Dirección de Maquinaria y Equipo", ""));
                        string servicioContratado = DataInfoEncabezado.descripcionServicio;
                        string comentario = DataInfoEncabezado.comentarios != null ? DataInfoEncabezado.comentarios : "";
                        rd.SetParameterValue("fechaEvaluacion", Data.FirstOrDefault().fecha.Date.ToShortDateString());
                        rd.SetParameterValue("nombreContratista", DataInfoEncabezado.nombreSubContratista);
                        rd.SetParameterValue("noContrato", DataInfoEncabezado.noContrato != null ? DataInfoEncabezado.noContrato : "");
                        rd.SetParameterValue("servicioContratado", servicioContratado);
                        rd.SetParameterValue("nombreProyecto", DataInfoEncabezado.nombreProyecto ?? "");
                        rd.SetParameterValue("evaluador", usuariop != null ? usuariop.nombre + " " + usuariop.apellidoPaterno : "");
                        rd.SetParameterValue("comentario", comentario);

                        Session.Add("reporte", rd);
                    }
                    break;
                case ReportesEnum.EvaluacionProveedoresServicio:
                    {
                        rd = new rptEvaludacionProveedoresServicio();
                        InfoEncabezadoEvaluacion EncabezadoReprote = new InfoEncabezadoEvaluacion();
                        List<InfoEncabezadoEvaluacion> EncabezadoReproteListo = new List<InfoEncabezadoEvaluacion>();
                        var pencuestaProveedorDet = Convert.ToInt16(Request.QueryString["encuestaProveedorDet"]);
                        var ptipo = Convert.ToInt16(Request.QueryString["tipo"]);

                        var Data = encuestasProveedoresFactoryServices.getEncuestasProveedoresFactoryServices().GetEncuestaContestada(pencuestaProveedorDet, ptipo);
                        var DataInfoEncabezado = encuestasProveedoresFactoryServices.getEncuestasProveedoresFactoryServices().GetEncabezadoEncuestaRequisicion(pencuestaProveedorDet, ptipo);

                        rd.Database.Tables[1].SetDataSource(GetRespuestas(Data));
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Dirección de Maquinaria y Equipo", ""));
                        rd.SetParameterValue("Comentarios", DataInfoEncabezado.comentarios ?? "");


                        Session.Add("reporte", rd);

                    }
                    break;
                case ReportesEnum.EncuestaEvaluacionContinuaProveedor:
                    {
                        rd = new rptEvaluacionContinuaProveedores();
                        InfoEncabezadoEvaluacion EncabezadoReprote = new InfoEncabezadoEvaluacion();
                        List<InfoEncabezadoEvaluacion> EncabezadoReproteListo = new List<InfoEncabezadoEvaluacion>();
                        var pencuestaProveedorDet = Convert.ToInt32(Request.QueryString["encuestaProveedorDet"]);
                        var ptipo = Convert.ToInt32(Request.QueryString["tipo"]);
                        var Data = encuestasProveedoresFactoryServices.getEncuestasProveedoresFactoryServices().GetEncuestaContestada(pencuestaProveedorDet, ptipo);
                        var DataInfoEncabezado = encuestasProveedoresFactoryServices.getEncuestasProveedoresFactoryServices().GetEncabezadoEncuesta(pencuestaProveedorDet, ptipo);

                        var FechaEvaluacion = encuestasProveedoresFactoryServices.getEncuestasProveedoresFactoryServices().getEncuestaByFolioIDOC(DataInfoEncabezado.id);


                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Dirección de Maquinaria y Equipo", ""));
                        rd.Database.Tables[1].SetDataSource(GetRespuestas(Data));

                        //  rd.Database.Tables[2].SetDataSource(ToDataTable(EncabezadoReproteListo.ToList()));



                        EncabezadoReprote.antiguedadDelProveedor = DataInfoEncabezado.fechaAntiguedad.ToShortDateString();
                        EncabezadoReprote.comentario = DataInfoEncabezado.comentarios != null ? DataInfoEncabezado.comentarios : "";
                        EncabezadoReprote.evaluador = DataInfoEncabezado.centrocostos;
                        EncabezadoReprote.fechaEvaluacion = DataInfoEncabezado.fechaOC != null ? DataInfoEncabezado.fechaOC.Value.ToShortDateString() : DataInfoEncabezado.fechaEvaluacion.Value.ToShortDateString();
                        EncabezadoReprote.firmaEvaluador = "";
                        EncabezadoReprote.nombreProveedor = DataInfoEncabezado.nombreProveedor;
                        EncabezadoReprote.tipodeProveedor = DataInfoEncabezado.tipoProveedor != null ? DataInfoEncabezado.tipoProveedor : "";

                        //rd.SetParameterValue("pPersonalDetalle", ptituloGrafica);
                        rd.SetParameterValue("antiguedadDelProveedor", DataInfoEncabezado.fechaAntiguedad.ToShortDateString());
                        rd.SetParameterValue("comentario", EncabezadoReprote.comentario);
                        var nombreEvaluador = usuarioFactoryServices.getUsuarioService().ListUsersById(DataInfoEncabezado.evaluadorID).FirstOrDefault();

                        rd.SetParameterValue("evaluador", nombreEvaluador != null ? nombreEvaluador.nombre + " " + nombreEvaluador.apellidoPaterno + " " + nombreEvaluador.apellidoMaterno : "");

                        rd.SetParameterValue("fechaEvaluacion", FechaEvaluacion);
                        rd.SetParameterValue("firmaEvaluador", "");
                        rd.SetParameterValue("tipodeProveedor", DataInfoEncabezado.tipoMoneda);
                        rd.SetParameterValue("nombreProveedor", DataInfoEncabezado.nombreProveedor);
                        rd.SetParameterValue("ubicacionProveedor", DataInfoEncabezado.ubicacionProveedor);

                        Session.Add("reporte", rd);

                    }
                    break;
                case ReportesEnum.ReporteMantenimientosFrecuenciaparo:
                    {
                        rd = new rptMantenimientoFrecuencia();
                        var pFIncio = Request.QueryString["pFIncio"];
                        var pFFin = Request.QueryString["pFFin"];
                        var pTipoParo = Request.QueryString["pTipoParo"];
                        var pMotivoParo = Request.QueryString["pMotivoParo"];
                        var pCodicionParo = Request.QueryString["pCodicionParo"];
                        var pGrupoMaquinaria = Request.QueryString["pGrupoMaquinaria"];
                        var pEconomico1 = Request.QueryString["pEconomico"];
                        var pCodicionEquipo = Request.QueryString["pCodicionEquipo"];
                        var ptituloGrafica = Request.QueryString["ptituloGrafica"];

                        var ListaGraficas = (List<string>)Session["base64FileGraficaList"];
                        DataTable tableEncabezado = new DataTable();

                        tableEncabezado.Columns.Add("Grafica01", System.Type.GetType("System.Byte[]"));
                        tableEncabezado.Columns.Add("Grafica02", System.Type.GetType("System.Byte[]"));

                        string resultIMG1 = ListaGraficas[0].Replace("data:image/png;base64,", "");
                        string resultIMG2 = ListaGraficas[1].Replace("data:image/png;base64,", "");

                        byte[] bytes1 = System.Convert.FromBase64String(resultIMG1);
                        byte[] bytes2 = System.Convert.FromBase64String(resultIMG2);

                        DataRow dr = tableEncabezado.NewRow();
                        tableEncabezado.Rows.Add(dr);
                        tableEncabezado.Rows[0]["Grafica01"] = bytes1;
                        tableEncabezado.Rows[0]["Grafica02"] = bytes2;

                        //    var listaRes = Session["generalManttoSession"];

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Dirección de Maquinaria y Equipo", ""));
                        rd.Database.Tables[1].SetDataSource(tableEncabezado);
                        //   rd.Database.Tables[2].SetDataSource(listaRes);//bien
                        //rd.SetParameterValue("pPersonalDetalle", ptituloGrafica);
                        rd.SetParameterValue("pFIncio", pFIncio);
                        rd.SetParameterValue("pFFin", pFFin);
                        rd.SetParameterValue("pMotivoParo", pMotivoParo);
                        rd.SetParameterValue("pCodicionParo", pCodicionParo);
                        rd.SetParameterValue("pGrupoMaquinaria", pGrupoMaquinaria);
                        rd.SetParameterValue("pEconomico1", pEconomico1);
                        rd.SetParameterValue("pCodicionEquipo", pCodicionEquipo);
                        rd.SetParameterValue("pTipoParo", pTipoParo);
                        rd.SetParameterValue("hEco", setTitleEco());
                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.GeneralHorasHombre:
                    {
                        rd = new rptGeneralHorasHombre();
                        var pFIncio = Request.QueryString["pFIncio"];
                        var pFFin = Request.QueryString["pFFin"];
                        var pTipoParo = Request.QueryString["pTipoParo"];
                        var pMotivoParo = Request.QueryString["pMotivoParo"];
                        var pCodicionParo = Request.QueryString["pCodicionParo"];
                        var pGrupoMaquinaria = Request.QueryString["pGrupoMaquinaria"];
                        var pEconomico1 = Request.QueryString["pEconomico"];
                        var pCodicionEquipo = Request.QueryString["pCodicionEquipo"];
                        var ptituloGrafica = Request.QueryString["ptituloGrafica"];

                        var ListaGraficas = (List<string>)Session["base64FileGraficaList"];
                        DataTable tableEncabezado = new DataTable();



                        tableEncabezado.Columns.Add("Grafica01", System.Type.GetType("System.Byte[]"));
                        tableEncabezado.Columns.Add("Grafica02", System.Type.GetType("System.Byte[]"));
                        tableEncabezado.Columns.Add("Grafica03", System.Type.GetType("System.Byte[]"));


                        string resultIMG1 = ListaGraficas[0].Replace("data:image/png;base64,", "");
                        string resultIMG2 = ListaGraficas[1].Replace("data:image/png;base64,", "");
                        // string resultIMG3 = ListaGraficas[2].Replace("data:image/png;base64,", "");

                        byte[] bytes1 = System.Convert.FromBase64String(resultIMG1);
                        byte[] bytes2 = System.Convert.FromBase64String(resultIMG2);
                        // byte[] bytes3 = System.Convert.FromBase64String(resultIMG3);



                        DataRow dr = tableEncabezado.NewRow();
                        tableEncabezado.Rows.Add(dr);
                        tableEncabezado.Rows[0]["Grafica01"] = bytes1;
                        tableEncabezado.Rows[0]["Grafica02"] = bytes2;
                        // tableEncabezado.Rows[0]["Grafica03"] = bytes3;

                        var listaRes = Session["reshorashombreDTO"];

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Dirección de Maquinaria y Equipo", ""));
                        rd.Database.Tables[1].SetDataSource(tableEncabezado);
                        rd.Database.Tables[2].SetDataSource(listaRes);//bien
                        //rd.SetParameterValue("pPersonalDetalle", ptituloGrafica);
                        rd.SetParameterValue("pFIncio", pFIncio);
                        rd.SetParameterValue("pFFin", pFFin);
                        rd.SetParameterValue("pMotivoParo", pMotivoParo);
                        rd.SetParameterValue("pCodicionParo", pCodicionParo);
                        rd.SetParameterValue("pGrupoMaquinaria", pGrupoMaquinaria);
                        rd.SetParameterValue("pEconomico1", pEconomico1);
                        rd.SetParameterValue("pCodicionEquipo", pCodicionEquipo);
                        rd.SetParameterValue("pTipoParo", pTipoParo);
                        rd.SetParameterValue("hEco", setTitleEco());
                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.PersonalDetallePuesto:
                    {
                        rd = new rptDetallePersonal();
                        var pFIncio = Request.QueryString["pFIncio"];
                        var pFFin = Request.QueryString["pFFin"];
                        var pTipoParo = Request.QueryString["pTipoParo"];
                        var pMotivoParo = Request.QueryString["pMotivoParo"];
                        var pCodicionParo = Request.QueryString["pCodicionParo"];
                        var pGrupoMaquinaria = Request.QueryString["pGrupoMaquinaria"];
                        var pEconomico1 = Request.QueryString["pEconomico"];
                        var pCodicionEquipo = Request.QueryString["pCodicionEquipo"];
                        var ptituloGrafica = Request.QueryString["ptituloGrafica"];

                        var listDetallePersonalDTO = ((List<tblDetallePersonalDTO>)Session["GetOTEmpleado"]).Select(x => new
                        {
                            Folio = x.folio,
                            noEconomico = x.economico,
                            MotivoParo = x.motivoParo,
                            HoraEntrada = x.inicioParo,
                            HoraSalida = x.finParo
                        }).ToList();

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Dirección de Maquinaria y Equipo", ""));
                        rd.Database.Tables[1].SetDataSource(listDetallePersonalDTO.ToList());//bien
                        rd.SetParameterValue("pPersonalDetalle", ptituloGrafica);
                        rd.SetParameterValue("pFIncio", pFIncio);
                        rd.SetParameterValue("pFFin", pFFin);
                        rd.SetParameterValue("pMotivoParo", pMotivoParo);
                        rd.SetParameterValue("pCodicionParo", pCodicionParo);
                        rd.SetParameterValue("pGrupoMaquinaria", pGrupoMaquinaria);
                        rd.SetParameterValue("pEconomico1", pEconomico1);
                        rd.SetParameterValue("pCodicionEquipo", pCodicionEquipo);
                        rd.SetParameterValue("pTipoParo", pTipoParo);

                        rd.SetParameterValue("hEco", setTitleEco());
                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.PuestoDetalle:
                    {
                        rd = new rptPuestoFrecuencias();
                        string stringInBase64 = "";
                        DataTable tableEncabezado = new DataTable();

                        var pFIncio = Request.QueryString["pFIncio"];
                        var pFFin = Request.QueryString["pFFin"];
                        var pTipoParo = Request.QueryString["pTipoParo"];
                        var pMotivoParo = Request.QueryString["pMotivoParo"];
                        var pCodicionParo = Request.QueryString["pCodicionParo"];
                        var pGrupoMaquinaria = Request.QueryString["pGrupoMaquinaria"];
                        var pEconomico1 = Request.QueryString["pEconomico"];
                        var pCodicionEquipo = Request.QueryString["pCodicionEquipo"];
                        var ptituloGrafica = Request.QueryString["ptituloGrafica"];

                        stringInBase64 = Session["base64FileGrafica"].ToString();
                        tableEncabezado.Columns.Add("IMGDATA", System.Type.GetType("System.Byte[]"));
                        string resultIMG = stringInBase64.Replace("data:image/png;base64,", "");
                        byte[] bytes = System.Convert.FromBase64String(resultIMG);

                        tableEncabezado.Rows.Add(bytes);

                        var dtDetalle = ((List<tblHorasHombreDetDTO>)Session["rpttblHorasHombreDetDTO"]).Select(x => new DetallePuestoDTO
                        {
                            nombrePersonal = x.personalNombre,
                            hrsPreventivo = x.hrasPreventivo,
                            hrsPredictivo = x.hrasPredictivo,
                            hrsCorrectivo = x.hrasCorrectivo,
                            cantidadOT = x.cantidadOT,
                            totalhrsOT = x.promedioHrasOT

                        });

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Dirección de Maquinaria y Equipo", ptituloGrafica));

                        rd.Database.Tables[2].SetDataSource(tableEncabezado);//bien
                        rd.Database.Tables[1].SetDataSource(dtDetalle.ToList());//bien

                        rd.SetParameterValue("pFIncio", pFIncio);
                        rd.SetParameterValue("pFFin", pFFin);
                        rd.SetParameterValue("pMotivoParo", pMotivoParo);
                        rd.SetParameterValue("pCodicionParo", pCodicionParo);
                        rd.SetParameterValue("pGrupoMaquinaria", pGrupoMaquinaria);
                        rd.SetParameterValue("pEconomico1", pEconomico1);
                        rd.SetParameterValue("pCodicionEquipo", pCodicionEquipo);
                        rd.SetParameterValue("pTipoParo", pTipoParo);
                        rd.SetParameterValue("hEco", setTitleEco());
                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.impresion:
                    {
                        rd = new rptGraficasFrecuenciaParos();
                        string stringInBase64 = "";
                        DataTable tableEncabezado = new DataTable();

                        var pFIncio = Request.QueryString["pFIncio"];
                        var pFFin = Request.QueryString["pFFin"];
                        var pTipoParo = Request.QueryString["pTipoParo"];
                        var pMotivoParo = Request.QueryString["pMotivoParo"];
                        var pCodicionParo = Request.QueryString["pCodicionParo"];
                        var pGrupoMaquinaria = Request.QueryString["pGrupoMaquinaria"];
                        var pEconomico1 = Request.QueryString["pEconomico"];
                        var pCodicionEquipo = Request.QueryString["pCodicionEquipo"];
                        var ptituloGrafica = Request.QueryString["ptituloGrafica"];

                        stringInBase64 = Session["base64FileGrafica"].ToString();
                        tableEncabezado.Columns.Add("IMGDATA", System.Type.GetType("System.Byte[]"));
                        string resultIMG = stringInBase64.Replace("data:image/png;base64,", "");
                        byte[] bytes = System.Convert.FromBase64String(resultIMG);

                        tableEncabezado.Rows.Add(bytes);

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Dirección de Maquinaria y Equipo", ptituloGrafica));
                        rd.Database.Tables[1].SetDataSource(tableEncabezado);//bien


                        rd.SetParameterValue("pFIncio", pFIncio);
                        rd.SetParameterValue("pFFin", pFFin);
                        rd.SetParameterValue("pMotivoParo", pMotivoParo);
                        rd.SetParameterValue("pCodicionParo", pCodicionParo);
                        rd.SetParameterValue("pGrupoMaquinaria", pGrupoMaquinaria);
                        rd.SetParameterValue("pEconomico1", pEconomico1);
                        rd.SetParameterValue("pCodicionEquipo", pCodicionEquipo);
                        rd.SetParameterValue("pTipoParo", pTipoParo);
                        rd.SetParameterValue("hEco", setTitleEco());
                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.DetalleFrecuenciaParos:
                    {
                        setMedidasReporte("HO");
                        rd = new rptDetFrecuenciaParo();

                        var data = (List<detFrecuenciaParoDTO>)Session["rptdetFrecuenciaParoDTO"];
                        var pFIncio = Request.QueryString["pFIncio"];
                        var pFFin = Request.QueryString["pFFin"];
                        var pTipoParo = Request.QueryString["pTipoParo"];
                        var pMotivoParo = Request.QueryString["pMotivoParo"];
                        var pCodicionParo = Request.QueryString["pCodicionParo"];
                        var pGrupoMaquinaria = Request.QueryString["pGrupoMaquinaria"];
                        var pEconomico1 = Request.QueryString["pEconomico"];
                        var pCodicionEquipo = Request.QueryString["pCodicionEquipo"];

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Dirección de Maquinaria y Equipo", "Reporte detalle de Horas hombre"));//bien

                        rd.Database.Tables[1].SetDataSource(data);//bien
                        /* rd.SetParameterValue("pFIncio", pFIncio);
                         rd.SetParameterValue("pFFin", pFFin);
                         rd.SetParameterValue("pMotivoParo", pMotivoParo);
                         rd.SetParameterValue("pCodicionParo", pCodicionParo);
                         rd.SetParameterValue("pGrupoMaquinaria", pGrupoMaquinaria);
                         rd.SetParameterValue("pEconomico1", pEconomico1);
                         rd.SetParameterValue("pCodicionEquipo", pCodicionEquipo);
                         rd.SetParameterValue("pTipoParo", pTipoParo);*/
                        rd.SetParameterValue("hEco", setTitleEco());
                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.DetalleHorasHombre:
                    {
                        setMedidasReporte("HO");
                        rd = new rptHorasHombre();

                        var data = (List<tblHorasHombreDetDTO>)Session["rpttblHorasHombreDetDTO"];
                        var pFIncio = Request.QueryString["pFIncio"];
                        var pFFin = Request.QueryString["pFFin"];
                        var pTipoParo = Request.QueryString["pTipoParo"];
                        var pMotivoParo = Request.QueryString["pMotivoParo"];
                        var pCodicionParo = Request.QueryString["pCodicionParo"];
                        var pGrupoMaquinaria = Request.QueryString["pGrupoMaquinaria"];
                        var pEconomico1 = Request.QueryString["pEconomico"];
                        var pCodicionEquipo = Request.QueryString["pCodicionEquipo"];

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Dirección de Maquinaria y Equipo", "Reporte detalle de Horas hombre"));//bien

                        rd.Database.Tables[1].SetDataSource(data);//bien
                        rd.SetParameterValue("pFIncio", pFIncio);
                        rd.SetParameterValue("pFFin", pFFin);
                        rd.SetParameterValue("pMotivoParo", pMotivoParo);
                        rd.SetParameterValue("pCodicionParo", pCodicionParo);
                        rd.SetParameterValue("pGrupoMaquinaria", pGrupoMaquinaria);
                        rd.SetParameterValue("pEconomico1", pEconomico1);
                        rd.SetParameterValue("pCodicionEquipo", pCodicionEquipo);
                        rd.SetParameterValue("pTipoParo", pTipoParo);
                        rd.SetParameterValue("hEco", setTitleEco());

                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.pendientessustitucion:
                    {
                        setMedidasReporte("HO");
                        rd = new rptEquiposPendientesAsignacion();
                        var datos1 = (List<EquiposPendientesDTO>)Session["rptEquiposPendientesDTO"];
                        var datos2 = (List<EquiposPendientesReemplazoDTO>)Session["rptEquiposPendientesReemplazoDTO"];
                        rd.Database.Tables[1].SetDataSource(datos1);
                        rd.Database.Tables[2].SetDataSource(datos2);
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Dirección general de Maquinaria y Equipo", "Reporte de tiempos solicitudes"));
                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.TiemposAsignacion:
                    {
                        setMedidasReporte("HO");
                        rd = new rptTiemposAsignacion();
                        var datos = (List<rptTiemposEntreAutorizaciones>)Session["rptTiemposAutorizacion"];
                        string pPeriodo = Request.QueryString["pPeriodo"];

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Dirección de Maquinaria y Equipo", "Reporte de tiempos de autorización de solicitudes de equipo"));
                        rd.Database.Tables[1].SetDataSource(datos);

                        rd.SetParameterValue("pPeriodo", pPeriodo);

                        Session.Add("reporte", rd);

                        break;
                    }
                case ReportesEnum.CONTROLINTERNOMAQUINARIA:
                    {
                        setMedidasReporte("HorizontalCarta_NoModal");
                        rd = new rptMovimientosControlInterno();
                        int idControlInterno = Convert.ToInt32(Request.QueryString["idControlInterno"]);
                        rptControlInternoMaquinariaDTO data = new rptControlInternoMaquinariaDTO();
                        List<rptControlInternoMaquinariaDTO> datos = new List<rptControlInternoMaquinariaDTO>();
                        string nombreRecibe = "";
                        string nombreEnvia = "";
                        string nombreEnterado = "";

                        string CadenaEnvia = "";
                        string CadenaRecibe = "";
                        string CadenaEnterado = "";
                        var Autorizadores = autorizaMovimientosInternosFactoryServices.getAutorizaMovimientosInternosFactoryServices().GetAutorizadores(idControlInterno);


                        if (Autorizadores != null)
                        {
                            var GetControlInterno = Autorizadores.ControMovimientoInterno;
                            var GetEconomico = controlInternoMovimientoFactoryServices.getControlInternoMovimientoFactoryServices().GetDataEconomicoID(GetControlInterno.EconomicoID);

                            data.Baterias = GetControlInterno.Bateria;
                            data.Combustible = GetControlInterno.Combustible;
                            data.Observaciones = GetControlInterno.Comentario;
                            data.noEconomico = GetEconomico.noEconomico;
                            data.Envio = centroCostosFactoryServices.getCentroCostosService().getNombreCCFix(GetControlInterno.Envio);
                            data.Destino = centroCostosFactoryServices.getCentroCostosService().getNombreCCFix(GetControlInterno.Destino); //GetControlInterno.Destino == 1 ? "PATIO MAQUINARIA HERMOSILLO" : "TALLER MECANICO CENTRAL"; //"TALLER MECANICO CENTRAL" : "PATIO MAQUINARIA HERMOSILLO";
                            data.Horometro = GetControlInterno.Horometro.ToString();
                            data.Marca = GetEconomico.marca.descripcion;
                            data.Folio = GetControlInterno.Folio;
                            data.Marca1 = GetControlInterno.Marca2;
                            data.Modelo = GetEconomico.modeloEquipo.descripcion;
                            data.Registro = GetControlInterno.Registro;
                            data.Serie = GetEconomico.noSerie;
                            data.Serie1 = GetControlInterno.Serie2;
                            data.Fecha = GetControlInterno.FechaCaptura.ToShortDateString();
                            data.Estatus = GetControlInterno.Estatus.ToString();

                            var UsuarioRecibe = usuarioFactoryServices.getUsuarioService().ListUsersById(Autorizadores.usuarioRecibe).FirstOrDefault();
                            var UsuarioEnvia = usuarioFactoryServices.getUsuarioService().ListUsersById(Autorizadores.usuarioEnvio).FirstOrDefault();
                            var UsuarioEnterado = usuarioFactoryServices.getUsuarioService().ListUsersById(Autorizadores.usuarioValida).FirstOrDefault();



                            if (UsuarioRecibe != null)
                            {
                                nombreRecibe = UsuarioRecibe.nombre + " " + UsuarioRecibe.apellidoPaterno + " " + UsuarioRecibe.apellidoMaterno;
                                CadenaRecibe = Autorizadores.cadenafirmaRecibe;

                            }
                            if (UsuarioEnvia != null)
                            {
                                nombreEnvia = UsuarioEnvia.nombre + " " + UsuarioEnvia.apellidoPaterno + " " + UsuarioEnvia.apellidoMaterno;
                                CadenaEnvia = Autorizadores.cadenafirmaEnvia;
                            }
                            if (UsuarioEnterado != null)
                            {
                                nombreEnterado = UsuarioEnterado.nombre + " " + UsuarioEnterado.apellidoPaterno + " " + UsuarioEnterado.apellidoMaterno;
                                CadenaEnterado = Autorizadores.cadenafirmaEnterado;

                            }


                            datos.Add(data);
                        }
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Dirección general de Maquinaria y Equipo", "Inventario General de Maquinaria y Equipo"));
                        rd.Database.Tables[1].SetDataSource(datos);

                        rd.SetParameterValue("UsuarioRecibe", nombreRecibe);
                        rd.SetParameterValue("UsuarioEnvia", nombreEnvia);
                        rd.SetParameterValue("UsuarioEnterado", nombreEnterado);

                        rd.SetParameterValue("CadenaEnvia", CadenaEnvia);
                        rd.SetParameterValue("CadenaRecibe", CadenaRecibe);
                        rd.SetParameterValue("CadenaEnterado", CadenaEnterado);
                        rd.SetParameterValue("hEco", setTitleEco());

                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.PreviewStandby:
                    {
                        int medidas = Convert.ToInt32(Request.QueryString["size"]);
                        if (medidas == 1)
                        {
                            setMedidasReporte("HorizontalCarta_NoModal");
                        }
                        else
                        {
                            setMedidasReporte("HO");
                        }

                        setMedidasReporte("HO");
                        rd = new rptConciliacionSemanal();

                        int pID = Convert.ToInt32(Request.QueryString["pID"]);

                        var data = standbyFactoryServices.getStandbyFactoryServices().getStandByID(pID);
                        var result = standbyDetFactoryServices.getStandbyDetFactoryServices().getListaDetStandBy(pID);
                        var Autorizadores = autorizacionStandByFactoryServices.getAutorizacionStandByFactoryServices().GetAutorizacionByIDStanby(pID);
                        //     var data = autorizacionStandByFactoryServices.getAutorizacionStandByFactoryServices().GetReporte(CC, FechaInicio, FechaFin).ToList();

                        string CentroCostosNombre = centroCostosFactoryServices.getCentroCostosService().getNombreCCFix(data.CC);
                        var diaInicio = data.FechaInicio.Day;
                        var diaFin = data.FechaFin.Day;
                        var Mes = data.FechaInicio.ToString("MMMM", CultureInfo.CreateSpecificCulture("es"));
                        var mes2 = data.FechaFin.ToString("MMMM", CultureInfo.CreateSpecificCulture("es"));
                        var year = data.FechaFin.Year;

                        string descripcionFechas = "Relación de maquinaria que aplicará stand by, en la semana del " + data.FechaInicio.Day + " de " + Mes + " de " + data.FechaFin.Year + " al " + data.FechaFin.Day + " de " + mes2 + " de " + year;


                        List<rptConciliacionDTO> rptConciliacionDTOList = new List<rptConciliacionDTO>();
                        foreach (var item in result)
                        {
                            rptConciliacionDTO rptConciliacionOBJ = new rptConciliacionDTO();

                            var economico = maquinaFactoryServices.getMaquinaServices().GetMaquinaByID(item.noEconomicoID).FirstOrDefault();

                            rptConciliacionOBJ.DiaParo = item.DiaParo.ToShortDateString();
                            rptConciliacionOBJ.Economico = economico.noEconomico;
                            rptConciliacionOBJ.Descripcion = economico.descripcion;
                            rptConciliacionOBJ.HorometroInicio = item.HorometroInicial.ToString();
                            rptConciliacionOBJ.HorometroFinal = item.HorometroFinal.ToString();
                            rptConciliacionOBJ.TipoConsideracion = getTipo(item.TipoConsideracion);


                            rptConciliacionDTOList.Add(rptConciliacionOBJ);
                        }
                        var elabora1 = usuarioFactoryServices.getUsuarioService().ListUsersById(data.UsuarioElabora).FirstOrDefault();
                        var elabora2 = usuarioFactoryServices.getUsuarioService().ListUsersById(data.UsuarioGerente).FirstOrDefault();
                        string CadenaElabora1 = "";
                        string CadenaElabora2 = "";

                        if (Autorizadores != null)
                        {
                            CadenaElabora1 = Autorizadores.CadenaElabora;
                            CadenaElabora2 = Autorizadores.CadenaGerente;
                        }


                        StandbyParmDTO.Descripcion = descripcionFechas;
                        StandbyParmDTO.Centro_Costos = CentroCostosNombre;
                        StandbyParmDTO.elabora1 = elabora1.nombre + " " + elabora1.apellidoPaterno + " " + elabora1.apellidoMaterno;
                        StandbyParmDTO.elabora2 = elabora2.nombre + " " + elabora2.apellidoPaterno + " " + elabora2.apellidoMaterno;

                        rd.Database.Tables[1].SetDataSource(rptConciliacionDTOList);
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("", ""));
                        Session.Add("reporte", rd);
                        rd.SetParameterValue("Descripcion", descripcionFechas);
                        rd.SetParameterValue("Centro_Costos", CentroCostosNombre);

                        rd.SetParameterValue("CadenaElabora1", CadenaElabora1);
                        rd.SetParameterValue("CadenaElabora2", CadenaElabora2);

                        rd.SetParameterValue("elabora1", elabora1.nombre + " " + elabora1.apellidoPaterno + " " + elabora1.apellidoMaterno);
                        rd.SetParameterValue("elabora2", elabora2.nombre + " " + elabora2.apellidoPaterno + " " + elabora2.apellidoMaterno);
                        rd.SetParameterValue("hEco", setTitleEco());
                        rd.SetParameterValue("hCC", setTitleCC());
                        break;
                    }
                case ReportesEnum.OT:
                    {
                        setMedidasReporte("HO");
                        rd = new rptOrdenTrabajo();

                        int idOT = Convert.ToInt32(Request.QueryString["idOT"]);
                        int idBL = Convert.ToInt32(Request.QueryString["idBL"]);
                        int esOTVacia = Convert.ToInt32(Request.QueryString["esVacia"]);

                        OrdenTrabajoDTO objOT = new OrdenTrabajoDTO();
                        List<OrdenTrabajoDTO> listOtobj = new List<OrdenTrabajoDTO>();
                        List<dtsMotivosParoDTO> dtsMotivosParoDTO = new List<dtsMotivosParoDTO>();
                        byte[] Imagen = new byte[0];

                        var objOTServer = capturaOTFactoryServices.getCapturaOTFactoryServices().GetOTbyID(idOT);
                        var objOTDetServer = capturaOTDetFactoryServices.getCapturaOTDetFactoryServices().getListaOTDet(idOT);
                        tblM_CatMaquina objMaquina = new Core.Entity.Maquinaria.Catalogo.tblM_CatMaquina();
                        if (objOTServer != null)
                            objMaquina = maquinaFactoryServices.getMaquinaServices().GetMaquinaByID(objOTServer.EconomicoID).FirstOrDefault();

                        int tipoEvidencia = esOTVacia == 0 ? (int)TipoEvidenciaEnumBL.evidenciaOT : (int)TipoEvidenciaEnumBL.evidenciaOTVacia;
                        Imagen = capturaOTDetFactoryServices.getCapturaOTDetFactoryServices().obtenerImagen(idBL, tipoEvidencia);

                        string HoraEntrada = string.Empty;
                        DateTime? horaS = null;
                        if (objOTServer != null)
                        {
                            HoraEntrada = objOTServer.FechaEntrada.ToString("hh:mm tt");
                            if (objOTServer.FechaSalida != null)
                                horaS = (objOTServer.FechaSalida);
                        }

                        //var horaSalida = horaS == null ? "" : horaS.ToString("hh:mm tt");
                        var horaSalida = horaS != null && horaS.Value.Year > 2000 ? horaS.Value.ToString("hh:mm tt") : "";

                        objOT.Comentarios = objOTServer != null ? objOTServer.Comentario : string.Empty;
                        objOT.DescripcionTM = objOTServer != null ? objOTServer.DescripcionTiempoMuerto : string.Empty;
                        objOT.Economico = objMaquina != null ? objMaquina.noEconomico : string.Empty;
                        objOT.Fecha = objOTServer != null ? objOTServer.FechaCreacion.ToShortDateString() : string.Empty;
                        objOT.HoraEntrada = !string.IsNullOrEmpty(HoraEntrada) ? HoraEntrada : string.Empty;
                        objOT.HoraSalida = !string.IsNullOrEmpty(horaSalida) ? horaSalida : string.Empty;

                        Core.Entity.Principal.Usuarios.tblP_Usuario usuarioRealizo = new Core.Entity.Principal.Usuarios.tblP_Usuario();
                        Core.Entity.Principal.Usuarios.tblP_Autoriza usuarioEnterado = new Core.Entity.Principal.Usuarios.tblP_Autoriza();
                        if (objOTServer != null)
                        {
                            usuarioRealizo = usuarioFactoryServices.getUsuarioService().ListUsersById(objOTServer.usuarioCapturaID).FirstOrDefault();
                            usuarioEnterado = usuarioFactoryServices.getUsuarioService().getPerfilesUsuario(1, objOTServer.CC).FirstOrDefault();
                        }

                        string Enterado = "";
                        string Realizo = "";
                        if (usuarioEnterado != null && objOTServer != null)
                        {
                            var tempuser = usuarioFactoryServices.getUsuarioService().ListUsersById(objOTServer.usuarioCapturaID).FirstOrDefault();

                            if (tempuser != null)
                                Enterado = tempuser.nombre + " " + tempuser.apellidoPaterno + " " + tempuser.apellidoMaterno; // + " "
                        }
                        if (Realizo != null)
                            Realizo = usuarioRealizo.nombre + " " + usuarioRealizo.apellidoPaterno + " " + usuarioRealizo.apellidoMaterno; // + " "

                        tblM_CatCriteriosCausaParo GetInfoParo = new tblM_CatCriteriosCausaParo();
                        if (objOTServer != null)
                        {
                            GetInfoParo = motivosParoFactoryServices.getMotivosParoFactoryServices().getMotivosParo(objOTServer.MotivoParo);

                            if (GetInfoParo != null)
                                dtsMotivosParoDTO.Add(infoMotivosParo(GetInfoParo.id, GetInfoParo.TiempoMantenimiento, GetInfoParo.TipoParo, objOTServer.TipoParo3.ToString()));
                        }

                        if (objOTServer != null)
                        {
                            objOT.Horometro = objOTServer != null ? objOTServer.horometro : 0;
                        }
                        objOT.Modelo = objMaquina.modeloEquipo != null ? objMaquina.modeloEquipo.descripcion : string.Empty;
                        objOT.MotivoParo = GetInfoParo != null ? GetInfoParo.id.ToString() : "";
                        objOT.Obra = objOTServer != null ? centroCostosFactoryServices.getCentroCostosService().getNombreCCFix(objOTServer.CC) : string.Empty;
                        objOT.TiempoMuerto = objOTServer != null ? objOTServer.TiempoMuerto.ToString() : string.Empty;
                        objOT.TiempoReparacion = objOTServer != null ? objOTServer.TiempoReparacion.ToString() : string.Empty;
                        objOT.TiempoTotal = objOTServer != null ? objOTServer.TiempoTotalParo.ToString() : string.Empty;
                        objOT.TipoParo1 = objOTServer != null ? objOTServer.TipoParo1.ToString() : string.Empty;
                        objOT.TipoParo2 = objOTServer != null ? objOTServer.TipoParo2.ToString() : string.Empty;
                        objOT.TipoParo3 = objOTServer != null ? objOTServer.TipoParo3.ToString() : string.Empty;
                        objOT.Turno = objOTServer != null ? objOTServer.Turno.ToString() : string.Empty;
                        //objOT.MotivoParo = "1";

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Dirección general de Maquinaria y Equipo", "Orden de Trabajo"));
                        if (esOTVacia != 0)
                        {
                            BackLogsFactoryServices blFS = new BackLogsFactoryServices();
                            var objBL = blFS.GetBackLogs().GetBLOTVacia(idBL);
                            objOT.Economico = objBL.noEconomico;
                            objOT.DescripcionTM = objBL.descripcion;
                            listOtobj.Add(objOT);
                            rd.Database.Tables[1].SetDataSource(listOtobj);
                        }
                        else
                        {
                            listOtobj.Add(objOT);
                            rd.Database.Tables[1].SetDataSource(listOtobj);
                        }


                        var det = new List<PersonalOTDTO>();

                        if (objOTDetServer != null)
                        {
                            foreach (var x in objOTDetServer)
                            {
                                PersonalOTDTO objOTDTO = new PersonalOTDTO();
                                var catEmpleado = capturaOTDetFactoryServices.getCapturaOTDetFactoryServices().getCatEmpleados(x.PersonalID.ToString());
                                if (catEmpleado != null)
                                {
                                    objOTDTO.Nombre = catEmpleado.Nombre;
                                    objOTDTO.Puesto = catEmpleado.Puesto;
                                    objOTDTO.Horas = (x.HoraFin - x.HoraInicio).ToString().Substring(0, 5);
                                    if (idBL != 0)
                                        objOTDTO.imagen = Imagen;
                                    else
                                        objOTDTO.imagen = new byte[0];

                                    det.Add(objOTDTO);
                                }
                            }
                        }

                        if (esOTVacia != 0)
                        {
                            List<PersonalOTDTO> lstPersonalDTO = new List<PersonalOTDTO>();
                            PersonalOTDTO objOTDTO = new PersonalOTDTO();
                            objOTDTO.imagen = Imagen;
                            lstPersonalDTO.Add(objOTDTO);

                            rd.Database.Tables[2].SetDataSource(lstPersonalDTO); //lstPersonalDTO
                            rd.Database.Tables[3].SetDataSource("");
                            rd.SetParameterValue("Folio", "");
                            rd.SetParameterValue("H1", "");
                            rd.SetParameterValue("H2", "");
                            rd.SetParameterValue("H3", "");
                            rd.SetParameterValue("M1", "");
                            rd.SetParameterValue("M2", "");
                            rd.SetParameterValue("M3", "");
                            rd.SetParameterValue("Enterado", "");
                            rd.SetParameterValue("Realizo", "");
                            rd.SetParameterValue("FechaCaptura", "");
                            rd.SetParameterValue("hEco", "No Economico");
                        }
                        else
                        {
                            var folio = "";
                            folio = idOT.ToString().PadLeft(6, '0');
                            rd.Database.Tables[2].SetDataSource(det);
                            rd.Database.Tables[3].SetDataSource(dtsMotivosParoDTO);
                            rd.SetParameterValue("Folio", folio);
                            rd.SetParameterValue("Enterado", Enterado);
                            rd.SetParameterValue("Realizo", Realizo);
                            rd.SetParameterValue("hEco", setTitleEco());

                            if (objOTServer != null)
                            {
                                rd.SetParameterValue("H1", objOTServer.TiempoHorasTotal);
                                rd.SetParameterValue("H2", objOTServer.TiempoHorasReparacion);
                                rd.SetParameterValue("H3", objOTServer.TiempoHorasMuerto);
                                rd.SetParameterValue("M1", objOTServer.TiempoMinutosTotal);
                                rd.SetParameterValue("M2", objOTServer.TiempoMinutosReparacion);
                                rd.SetParameterValue("M3", objOTServer.TiempoMinutosMuerto);
                                rd.SetParameterValue("FechaCaptura", objOTServer.FechaSalida.ToString());
                            }
                            else
                            {
                                rd.SetParameterValue("H1", "");
                                rd.SetParameterValue("H2", "");
                                rd.SetParameterValue("H3", "");
                                rd.SetParameterValue("M1", "");
                                rd.SetParameterValue("M2", "");
                                rd.SetParameterValue("M3", "");
                                rd.SetParameterValue("FechaCaptura", "");
                            }
                        }

                        //if (idBL > 0)
                        //{

                        //}

                        rd.SetParameterValue("VersionDocumento", "Ver. 1, 01-08-2018");
                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.CHECKLISTRESGUARDOS:
                    {
                        int medidas = Convert.ToInt32(Request.QueryString["size"]);
                        if (medidas == 1)
                        {
                            setMedidasReporte("HorizontalCarta_NoModal");
                        }
                        else
                        {
                            setMedidasReporte("HO");
                        }
                        rd = new rptcheckListResguardo();
                        int idResguardo = Convert.ToInt32(Request.QueryString["idReguardo"]);

                        var objResguardoVehiculo = resguardoEquipoFactoryServices.getResguardoEquipoFactoryServices().getResguardoBYID(idResguardo);

                        List<RespuestasDTO> RespuestasResguardo = new List<RespuestasDTO>();
                        if (objResguardoVehiculo.estado == 3) { RespuestasResguardo = respuestaResguardoVehiculosFactoryServices.getRespuestaResguardoVehiculosServices().GetResguardoRespuestasLiberado(idResguardo); }
                        else { RespuestasResguardo = respuestaResguardoVehiculosFactoryServices.getRespuestaResguardoVehiculosServices().GetResguardoRespuestas(idResguardo); }

                        var RespuestasResguardoDocumentos = respuestaResguardoVehiculosFactoryServices.getRespuestaResguardoVehiculosServices().getDocumentos(idResguardo);




                        rd.Database.Tables[0].SetDataSource(RespuestasResguardo);
                        rd.Database.Tables[1].SetDataSource(RespuestasResguardoDocumentos);
                        //   rd.Database.Tables[0].SetDataSource(getInfoEnca("Dirección general de Maquinaria y Equipo", "Inventario General de Maquinaria y Equipo"));
                        rd.SetParameterValue("Comentario", objResguardoVehiculo.Comentario);

                        string FechaVersionInforme = objResguardoVehiculo.Fecha.Date >= new DateTime(2018, 07, 01) ? "Ver. 1, 01-08-2018" : "Ver. 2,20-02-2017"; //"Ver. 1, 01-08-2018";

                        rd.SetParameterValue("VersionInforme", FechaVersionInforme);

                        Session.Add("reporte", rd);
                        break;
                    }

                case ReportesEnum.INVENTARIOGENERALMAQUINARIA:
                    {
                        setMedidasReporte("HO");
                        rd = new rptInventarioGeneral();

                        List<inventarioGeneralDTO> objAutorizaionResguardo = (List<inventarioGeneralDTO>)Session["GetListaInventario"];

                        rd.Database.Tables[1].SetDataSource(objAutorizaionResguardo.OrderBy(x => x.Economico));
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Dirección general de Maquinaria y Equipo", "Inventario General de Maquinaria y Equipo"));
                        rd.SetParameterValue("hEco", setTitleEco());
                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.ASIGNACIONDEVEHICULOS:
                    {
                        int medidas = Convert.ToInt32(Request.QueryString["size"]);
                        if (medidas == 1)
                        {
                            setMedidasReporte("HorizontalCarta_NoModal");
                        }
                        else
                        {
                            setMedidasReporte("HO");
                        }

                        rd = new ResguardoVehiculos();
                        List<AutorizacionResguardoDTO> datos = new List<AutorizacionResguardoDTO>();
                        List<AutorizantesDTO> datos2 = new List<AutorizantesDTO>();


                        AutorizacionResguardoDTO objAutorizaionResguardo = (AutorizacionResguardoDTO)Session["rptAutoriacionResguardos"];

                        AutorizantesDTO objAutorizantesDTO = (AutorizantesDTO)Session["rptAutorizantesDTO"];

                        string tipoResguardo = Request.QueryString["tipoResguardo"];

                        string TituloResguardo = "";
                        var textFirma1 = "Entregó Resguardo";
                        var textFirma2 = "Aceptó Resguardo";

                        if (tipoResguardo == "2")
                        {
                            TituloResguardo = "Asignacion de resguardo de vehículo de servicio";

                        }
                        else if (tipoResguardo == "3")
                        {
                            TituloResguardo = "Liberacion de resguardo de vehículo de servicio";
                            textFirma1 = "Libera Resguardo";
                            textFirma2 = "Recibe Resguardo";
                        }

                        datos2.Add(objAutorizantesDTO);
                        datos.Add(objAutorizaionResguardo);
                        rd.Database.Tables[0].SetDataSource(datos);
                        rd.Database.Tables[1].SetDataSource(getInfoEnca(TituloResguardo, "Dirección de Maquinaria y Equipo"));
                        rd.Database.Tables[2].SetDataSource(datos2);
                        rd.SetParameterValue("hEco", setTitleEco());
                        rd.SetParameterValue("txtFirma1", textFirma1);
                        rd.SetParameterValue("txtFirma2", textFirma2);
                        Session.Add("reporte", rd);
                        // string FechaVersionInforme = objResguardoVehiculo.Fecha.Date >= new DateTime(2018, 07, 01) ? "Ver. 1, 01-08-2018" : "Ver. 2,20-02-2017"; //"Ver. 1, 01-08-2018";

                        rd.SetParameterValue("VersionInforme", "Ver. 1, 01-08-2018");
                        break;
                    }
                case ReportesEnum.SOLICITUDEQUIPOREEMPLAZO:
                    {
                        setMedidasReporte("HorizontalCarta_NoModal");
                        rd = new rptReempazoEquipo();

                        var datos = (List<SolicitudEquipoDTO>)Session["rptSolicitudEquipoReemplazoDTO"];


                        AutorizadoresReemplazoDTO autorizadores = new AutorizadoresReemplazoDTO();

                        var pAutorizadores = (AutorizadoresReemplazoDTO)Session["rptAutorizadores"];
                        var pFirmasAutorizadores = (AutorizadoresReemplazoDTO)Session["firmasAutorizadores"];
                        string nombreGerente = "";
                        string nombreElabora = "";
                        string nombreAsigna = "";
                        string ElaboraFirma = "";
                        string AsignaFirma = "";
                        string GerenteFirma = "";


                        if (pAutorizadores != null)
                        {

                            nombreGerente = pAutorizadores.nombreGerente;
                            nombreElabora = pAutorizadores.nombreElabora;
                            nombreAsigna = pAutorizadores.nombreasigna;
                        }

                        if (pFirmasAutorizadores != null)
                        {

                            if (pFirmasAutorizadores.nombreElabora != null)
                            {
                                ElaboraFirma = pFirmasAutorizadores.nombreElabora;
                                // setParametro("ElaboraFirma", pFirmasAutorizadores.nombreElabora);
                            }

                            if (pFirmasAutorizadores.nombreasigna != null)
                            {
                                AsignaFirma = pFirmasAutorizadores.nombreasigna;
                                //  setParametro("AsignaFirma", pFirmasAutorizadores.nombreasigna);
                            }
                            if (pFirmasAutorizadores.nombreGerente != null)
                            {
                                GerenteFirma = pFirmasAutorizadores.nombreGerente;
                                //setParametro("GerenteFirma", pFirmasAutorizadores.nombreGerente);
                            }
                        }
                        string CC = Request.QueryString["pCC"];

                        if (string.IsNullOrWhiteSpace(CC))
                        {
                            CC = Session["rptCC"].ToString();
                        }

                        string CentroCostosNombre = centroCostosFactoryServices.getCentroCostosService().getNombreCCFix(CC);

                        // setParametro("Centro_Costos", CentroCostosNombre);
                        //  setParametro("Folio", Session["FolioSolReemplazo"].ToString());

                        rd.Database.Tables[1].SetDataSource(datos);
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("SOLICITUD DE SUSTITUCIÓN DE EQUIPO", "DIRECCION DE MAQUINARIA Y EQUIPO"));

                        rd.SetParameterValue("ElaboraFirma", ElaboraFirma);
                        rd.SetParameterValue("AsignaFirma", AsignaFirma);
                        rd.SetParameterValue("GerenteFirma", GerenteFirma);
                        rd.SetParameterValue("Centro_Costos", CentroCostosNombre);
                        rd.SetParameterValue("Gerente", nombreGerente);
                        rd.SetParameterValue("Elabora", nombreElabora);
                        rd.SetParameterValue("Asigna", nombreAsigna);

                        rd.SetParameterValue("Folio", Session["FolioSolReemplazo"].ToString());

                        Session.Add("reporte", rd);

                        break;
                    }
                case ReportesEnum.Solicitud_EquipoNoModal:
                    {
                        rd = new rptElaboracionSolicitudEquipoAdicional();
                        rd.SetParameterValue("VersionDocumento", "Ver. 1, 01-08-2018");
                        setMedidasReporte("HorizontalCarta_NoModal");
                        //setMedidasReporte("HO");

                        List<SolicitudEquipoDTO> rptData = (List<SolicitudEquipoDTO>)Session["rptSolicitudEquipo"];
                        List<SolicitudEquipoDTO> rptDataAgrupada = new List<SolicitudEquipoDTO>();



                        var autorizadores = (AutorizadoresIDDTO)Session["rptAutorizadores"];
                        var FolioSolicitud = "";

                        if (rptData != null)
                        {
                            FolioSolicitud = rptData.FirstOrDefault().Folio;



                        }

                        foreach (var item in rptData)
                        {

                            if (rptDataAgrupada.FirstOrDefault(x => x.Grupoid == item.Grupoid && x.Modeloid == item.Modeloid) == null)
                            {
                                var especificaciones = rptData.Where(x => x.Grupoid == item.Grupoid && x.Modeloid == item.Modeloid && !string.IsNullOrEmpty(x.Descripcion)).Select(x => "-. " + x.Descripcion).ToList();
                                var obj = new SolicitudEquipoDTO();
                                obj.cantidadModelo = rptData.Where(x => x.Grupoid == item.Grupoid && x.Modeloid == item.Modeloid).Count();
                                var now = DateTime.Now;

                                //var yearsOld = Convert.ToDateTime(item.pFechaFin) - Convert.ToDateTime(item.pFechaInicio);
                                //int years = (int)(yearsOld.TotalDays / 365.25);
                                //int months = (int)(((yearsOld.TotalDays / 365.25) - years) * 12);


                                //obj.meses = "" + (months + 1);
                                var FechaInicio = Convert.ToDateTime(item.pFechaInicio);
                                var FechaFin = Convert.ToDateTime(item.pFechaFin);
                                obj.meses = "" + Math.Abs((FechaFin.Month - FechaInicio.Month) + 12 * (FechaFin.Year - FechaInicio.Year));
                                var html = string.Join("\r\n", especificaciones.ToArray());
                                obj.Descripcion = html;
                                //obj.cantidadModelo = rptData.Where(x => x.Grupoid == item.Grupoid && x.Modeloid == item.Modeloid).Sum(x => x.cantidadModelo);
                                obj.pHoras = rptData.Where(x => x.Grupoid == item.Grupoid && x.Modeloid == item.Modeloid).Sum(x => x.pHoras);
                                obj.Folio = item.Folio;
                                obj.Tipo = item.Tipo;
                                obj.Grupo = item.Grupo;
                                obj.Modelo = item.Modelo;
                                obj.pFechaInicio = item.pFechaInicio;
                                obj.pFechaFin = item.pFechaFin;
                                obj.tipoUtilizacion = item.tipoUtilizacion;
                                obj.pFechaObra = item.pFechaObra;
                                obj.pTipoPrioridad = item.pTipoPrioridad;
                                obj.condicionInicial = item.condicionInicial;
                                obj.condicionActual = item.condicionActual;
                                obj.link = item.link;
                                obj.Grupoid = item.Grupoid;
                                obj.Modeloid = item.Modeloid;
                                obj.justificacion = item.justificacion;
                                rptDataAgrupada.Add(obj);
                            }
                        }

                        var AutorizadorElabora = usuarioFactoryServices.getUsuarioService().ListUsersById(autorizadores.usuarioElaboro)
                            .Select(x => new { nombre = (x.nombre + " " + x.apellidoPaterno + " " + x.apellidoMaterno) }).FirstOrDefault();

                        var AutorizadorGerente = usuarioFactoryServices.getUsuarioService()
                            .ListUsersById(autorizadores.gerenteObra)
                            .Select(x => new { nombre = (x.nombre + " " + x.apellidoPaterno + " " + x.apellidoMaterno) }).FirstOrDefault();

                        var AutorizadorGerenteDirector = usuarioFactoryServices.getUsuarioService()
                          .ListUsersById(autorizadores.GerenteDirector)
                          .Select(x => new { nombre = (x.nombre + " " + x.apellidoPaterno + " " + x.apellidoMaterno) }).FirstOrDefault();

                        var AutorizadorDirector = usuarioFactoryServices.getUsuarioService()
                            .ListUsersById(autorizadores.directorDivision)
                            .Select(x => new { nombre = (x.nombre + " " + x.apellidoPaterno + " " + x.apellidoMaterno) }).FirstOrDefault();

                        var AutorizadorServicios = usuarioFactoryServices.getUsuarioService()
                            .ListUsersById(autorizadores.directorServicios)
                            .Select(x => new { nombre = (x.nombre + " " + x.apellidoPaterno + " " + x.apellidoMaterno) }).FirstOrDefault();

                        var AutorizadorDireccion = usuarioFactoryServices.getUsuarioService()
                            .ListUsersById(autorizadores.altaDireccion)
                            .Select(x => new { nombre = (x.nombre + " " + x.apellidoPaterno + " " + x.apellidoMaterno) }).FirstOrDefault();

                        string CadenaDireccion = "";
                        string CadenaDirector = "";
                        string CadenaGerente = "";
                        string CadenaElabora = "";
                        string CadenaGerenteDirector = "";
                        string CadenaServicios = "";

                        if (Session["rptCadenaAutorizacion"] != null)
                        {
                            var cadena = (CadenaAutorizacionDTO)Session["rptCadenaAutorizacion"];

                            CadenaDireccion = cadena.CadenaDireccion ?? "";
                            CadenaDirector = cadena.CadenaDirector ?? "";
                            CadenaGerente = cadena.CadenaGerente ?? "";
                            CadenaElabora = cadena.CadenaElabora ?? "";
                            CadenaGerenteDirector = cadena.CadenaGerenteDirector ?? "";
                            CadenaServicios = cadena.CadenaServicios ?? "";
                        }
                        rd.SetParameterValue("CadenaDireccion", CadenaDireccion);
                        rd.SetParameterValue("CadenaDirector", CadenaDirector);
                        rd.SetParameterValue("CadenaGerente", CadenaGerente);
                        rd.SetParameterValue("CadenaElabora", CadenaElabora);
                        rd.SetParameterValue("CadenaGerenteDirector", CadenaGerenteDirector);
                        rd.SetParameterValue("CadenaServicios", CadenaServicios);

                        rd.SetParameterValue("Elaboro", AutorizadorElabora.nombre ?? "");
                        rd.SetParameterValue("Solicito", AutorizadorGerente.nombre ?? "");
                        rd.SetParameterValue("valido", AutorizadorDirector.nombre ?? "");
                        rd.SetParameterValue("autorizo", AutorizadorDireccion.nombre ?? "");
                        rd.SetParameterValue("Valido2", AutorizadorGerenteDirector.nombre ?? "");
                        rd.SetParameterValue("Valido3", AutorizadorServicios.nombre ?? "");

                        var pCentroCostosVal = Request.QueryString["pCC"].ToString();

                        if (!string.IsNullOrEmpty(pCentroCostosVal))
                        {
                            pCC = Request.QueryString["pCC"];
                            pNombreCC = centroCostosFactoryServices.getCentroCostosService().getNombreCCFix(pCC);
                        }
                        else
                        {
                            pNombreCC = "";
                        }
                        //rd.SetParameterValue("CentroCostos", pNombreCC);
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("DIRECCIÓN DE MAQUINARIA Y EQUIPO", "SOLICITUD DE EQUIPO"));
                        rd.Database.Tables[1].SetDataSource(rptDataAgrupada);

                        rd.SetParameterValue("FolioDocumento", FolioSolicitud);
                        rd.SetParameterValue("CentroCostos", pNombreCC);
                        rd.SetParameterValue("hCC", setTitleCC().ToUpper() + ":");



                        if (true)
                        {
                            List<SolicitudEquipoJustificacionDTO> rptDataJ = (List<SolicitudEquipoJustificacionDTO>)Session["rptSolicitudEquipoJustificacion"];
                            rd.Database.Tables[2].SetDataSource(rptDataJ);
                        }

                        Session.Add("reporte", rd);


                    }
                    break;
                case ReportesEnum.NOTASCREDITOPendientesRechazadas:
                    {
                        setMedidasReporte("HO");
                        rd = new rptNotaCreditoPendientesRechazadas();

                        DateTime FechaInicio = Convert.ToDateTime(Request.QueryString["pFechaInicio"]);
                        DateTime FechaFin = Convert.ToDateTime(Request.QueryString["pFechaFin"]);
                        int TipoControl = Convert.ToInt32(Request.QueryString["tipoControl"]);
                        int Estatus = Convert.ToInt32(Request.QueryString["estatus"]);
                        string cc = Request.QueryString["cc"];
                        string almacen = Request.QueryString["almacen"];
                        string TipoNCheader = TipoControl == 1 ? "Reparación de Componentes" : TipoControl == 2 ? "casco reman" : "Reparación de Componentes y casco reman";
                        string ConcatDescr = "";
                        string tipo = TipoControl == 1 ? "Reparación de Componentes" : TipoControl == 2 ? "Casco reman" : "Reparación de Componentes y casco reman";

                        switch (Estatus)
                        {
                            case 3:
                                ConcatDescr = " rechazadas";
                                break;
                            case 1:
                                ConcatDescr = " pendientes";
                                break;
                            default:
                                break;
                        }

                        string TotalPeriodo = ConcatDescr + " Del periodo " + FechaInicio.ToShortDateString() + " Al " + FechaFin.ToShortDateString() + "  :";
                        // setParametro("TotalPeriodo", TotalPeriodo);
                        var dataRaw = notaCreditoFactoryServices.getNotaCredito().GetNotasCreditoRpt(FechaInicio, FechaFin, TipoControl, Estatus, cc, almacen);
                        var listaUsuarios = notaCreditoFactoryServices.getNotaCredito().obtenerListasuario();
                        var listaAlmacenes = notaCreditoFactoryServices.getNotaCredito().ObtenerAlmacenes();
                        List<RPTNotasCreditoDTO> listaData = new List<RPTNotasCreditoDTO>();
                        foreach (var x in dataRaw)
                        {
                            x.noAlmacen = x.noAlmacen == null ? "" : x.noAlmacen;
                            listaData.Add(new RPTNotasCreditoDTO
                            {
                                Generador = x.Generador ?? "",
                                OC = x.OC ?? "",
                                Equipo = x.idEconomico == 0 ? "" : (GetInfoMaquinaria(x.idEconomico) ?? ""),
                                Modelo = objMaquinaria.modeloEquipo.descripcion ?? "",
                                SerieEquipo = objMaquinaria.noSerie ?? "",
                                SerieComponente = x.SerieComponente ?? "",
                                Descripcion = x.Descripcion ?? "",
                                Fecha = x.Fecha.ToShortDateString() ?? "",
                                CausaRemosion = x.CausaRemosion == 1 ? "Programada" : "Falla",
                                HorometroEquipo = x.HorometroEconomico.ToString() ?? "",
                                HorometroComponente = x.HorometroComponente.ToString() ?? "",
                                MontoPesos = x.MontoPesos.ToString() ?? "",
                                MontoDLL = x.MontoDLL.ToString() ?? "",
                                AbonoDLL = x.AbonoDLL.ToString() ?? "",
                                NoCredito = x.ClaveCredito ?? "",
                                Comentario = x.Estado == 1 ? "Proceso" : x.Estado == 2 ? "Abonado" : "Denegado",
                                GrupoMes = x.Fecha.Year.ToString() + " - " + x.Fecha.Month.ToString().PadLeft(2, '0'),
                                DescripcionMes = x.Fecha.ToString("MMMM", CultureInfo.CreateSpecificCulture("es")).ToUpper(),
                                Anio = x.Fecha.Year.ToString(),
                                fechaCierre = x.FechaCaptura.ToShortDateString(),
                                Comentario2 = notaCreditoFactoryServices.getNotaCredito().GetComentario(x.id) ?? "",
                                TipoNC = x.TipoNC == 1 ? "Nota de crédito" : x.TipoNC == 2 ? "Casco Reman" : "",
                                cc = x.noAlmacen == null ? "" : listaAlmacenes.Where(r => r.almacen == x.noAlmacen.Trim()).ToList().Count() != 0 ? listaAlmacenes.Where(r => r.almacen == x.noAlmacen.Trim()).ToList().Select(y => y.almacen + "-" + y.descripcion).FirstOrDefault() : "",
                                nombreDelUsuario = listaUsuarios.Where(n => n.id == x.idUsuarioModifico).ToList().Count() == 0 ? "" : listaUsuarios.Where(n => n.id == x.idUsuarioModifico).ToList().Select(y => y.nombre + " " + y.apellidoPaterno + " " + y.apellidoMaterno).FirstOrDefault(),
                                montoTotalOC = x.montoTotalOC,
                            });

                        }
                        rd.Database.Tables[1].SetDataSource(listaData.OrderBy(x => x.GrupoMes));
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Control de " + TipoNCheader + ConcatDescr, "DIRECCION DE MAQUINARIA Y EQUIPO ADMINISTRACION DE OVERHAUL"));
                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.NOTASCREDITO:
                    {
                        setMedidasReporte("HO");
                        rd = new rptNotasCredito();

                        DateTime FechaInicio = Convert.ToDateTime(Request.QueryString["pFechaInicio"]);
                        DateTime FechaFin = Convert.ToDateTime(Request.QueryString["pFechaFin"]);
                        int TipoControl = Convert.ToInt32(Request.QueryString["tipoControl"]);
                        int Estatus = Convert.ToInt32(Request.QueryString["estatus"]);
                        string cc = Request.QueryString["cc"];
                        string almacen = Request.QueryString["almacen"];
                        string TipoNCheader = TipoControl == 1 ? "Reparación de Componentes" : TipoControl == 2 ? "casco reman" : "Reparación de Componentes y casco reman";
                        switch (Estatus)
                        {
                            case 2:
                                TipoNCheader += " abonadas";
                                break;
                            case 4:
                                TipoNCheader += " aplicadas";
                                break;
                            default:
                                break;
                        }

                        //DateTime FechaInicio = new DateTime(2017, 6, 1);//Convert.ToDateTime("01/06/2017");
                        //DateTime FechaFin = new DateTime(2017, 6, 20);

                        string TotalPeriodo = "Total del periodo " + FechaInicio.ToShortDateString() + " Al " + FechaFin.ToShortDateString() + "  :";
                        var dataRaw = notaCreditoFactoryServices.getNotaCredito().GetNotasCreditoRpt(FechaInicio, FechaFin, TipoControl, Estatus, cc, almacen);
                        var listaUsuarios = notaCreditoFactoryServices.getNotaCredito().obtenerListasuario();
                        var listaAlmacenes = notaCreditoFactoryServices.getNotaCredito().ObtenerAlmacenes();
                        var data = dataRaw.Select(
                            x => new
                            {
                                Generador = x.Generador ?? "",
                                OC = x.OC,
                                Equipo = GetInfoMaquinaria(x.idEconomico),
                                Modelo = objMaquinaria.modeloEquipo == null ? "" : objMaquinaria.modeloEquipo.descripcion,
                                SerieEquipo = objMaquinaria.noSerie ?? "",
                                SerieComponente = x.SerieComponente ?? "",
                                Descripcion = x.Descripcion ?? "",
                                Fecha = x.Fecha.ToShortDateString(),
                                CausaRemosion = x.CausaRemosion == 1 ? "Programada" : "Falla",
                                HorometroEquipo = x.HorometroEconomico,
                                HorometroComponente = x.HorometroComponente,
                                MontoPesos = x.MontoPesos,
                                MontoDLL = x.MontoDLL,
                                AbonoDLL = x.AbonoDLL,
                                NoCredito = x.ClaveCredito,
                                Comentario = x.Estado == 1 ? "Proceso" : x.Estado == 2 ? "Abonado" : "Denegado",
                                GrupoMes = x.FechaCaptura.Year.ToString() + " - " + x.FechaCaptura.Month.ToString().PadLeft(2, '0'),
                                DescripcionMes = x.FechaCaptura.ToString("MMMM", CultureInfo.CreateSpecificCulture("es")).ToUpper(),
                                Anio = x.FechaCaptura.Year,
                                fechaCierre = x.FechaCaptura.ToShortDateString(),
                                Comentario2 = notaCreditoFactoryServices.getNotaCredito().GetComentario(x.id) ?? "",
                                TipoNC = x.TipoNC == 1 ? "Nota de crédito" : x.TipoNC == 2 ? "Casco Reman" : "",
                                cc = x.noAlmacen == null ? "" : listaAlmacenes.Where(r => r.almacen == x.noAlmacen.Trim()).ToList().Count() != 0 ? listaAlmacenes.Where(r => r.almacen == x.noAlmacen.Trim()).ToList().Select(y => y.almacen + "-" + y.descripcion).FirstOrDefault() : "",
                                nombreDelUsuario = listaUsuarios.Where(n => n.id == x.idUsuarioModifico).ToList().Count() == 0 ? "" : listaUsuarios.Where(n => n.id == x.idUsuarioModifico).ToList().Select(y => y.nombre + " " + y.apellidoPaterno + " " + y.apellidoMaterno).FirstOrDefault()
                            }).ToList();

                        rd.Database.Tables[1].SetDataSource(data.OrderBy(x => x.GrupoMes));
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Control de " + TipoNCheader, "DIRECCION DE MAQUINARIA Y EQUIPO ADMINISTRACION DE OVERHAUL"));

                        rd.SetParameterValue("TotalPeriodo", TotalPeriodo);
                        Session.Add("reporte", rd);

                        break;
                    }
                case ReportesEnum.ConciliacionSemanalStandBy:
                    {
                        setMedidasReporte("HO");
                        rd = new rptConciliacionSemanal();

                        string CC = Request.QueryString["pCC"];
                        DateTime FechaInicio = Convert.ToDateTime(Request.QueryString["pFechaInicio"]);
                        DateTime FechaFin = Convert.ToDateTime(Request.QueryString["pFechaFin"]);

                        var data = autorizacionStandByFactoryServices.getAutorizacionStandByFactoryServices().GetReporte(CC, FechaInicio, FechaFin).ToList();
                        var data2 = autorizacionStandByFactoryServices.getAutorizacionStandByFactoryServices().GetAutorizadoresStandby(CC, FechaInicio, FechaFin).ToList();
                        string CentroCostosNombre = centroCostosFactoryServices.getCentroCostosService().getNombreCC(Convert.ToInt32(CC));
                        var diaInicio = FechaInicio.Day;
                        var diaFin = FechaFin.Day;
                        var Mes = FechaInicio.ToString("MMMM", CultureInfo.CreateSpecificCulture("es"));
                        var mes2 = FechaFin.ToString("MMMM", CultureInfo.CreateSpecificCulture("es"));
                        var year = FechaFin.Year;

                        string descripcionFechas = "Relación de maquinaria que aplicará stand by, en la semana del " + FechaInicio.Day + " de " + Mes + " de " + FechaFin.Year + " al " + FechaFin.Day + " de " + mes2 + " de " + FechaFin.Year;

                        string elabora1P = "";
                        string elabora2P = "";

                        if (data2.Count > 0)
                        {
                            var elabora1 = usuarioFactoryServices.getUsuarioService().ListUsersById(data2[0]).FirstOrDefault();
                            var elabora2 = usuarioFactoryServices.getUsuarioService().ListUsersById(data2[1]).FirstOrDefault();

                            elabora1P = elabora1.nombre + " " + elabora1.apellidoPaterno + " " + elabora1.apellidoMaterno;
                            elabora2P = elabora2.nombre + " " + elabora2.apellidoPaterno + " " + elabora2.apellidoMaterno;


                        }

                        rd.Database.Tables[1].SetDataSource(ToDataTable(data));
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("", ""));
                        rd.SetParameterValue("Descripcion", descripcionFechas);
                        rd.SetParameterValue("elabora1", elabora1P);
                        rd.SetParameterValue("elabora2", elabora2P);
                        rd.SetParameterValue("Centro_Costos", CentroCostosNombre);
                        rd.SetParameterValue("hEco", setTitleEco());
                        rd.SetParameterValue("hCC", setTitleCC());
                        Session.Add("reporte", rd);

                        break;
                    }
                case ReportesEnum.PROYECCIONES1:
                    {
                        setMedidasReporte("HO");
                        rd = new rtpEstadoResultados();
                        var pEscenario = Convert.ToInt32(Request.QueryString["Escenario"]);
                        var pDivisor = Convert.ToInt32(Request.QueryString["Divisor"]);
                        var pMes = Convert.ToInt32(Request.QueryString["meses"]);
                        var pAnio = Convert.ToInt32(Request.QueryString["anio"]);
                        var dtCObras = capturadeObrasFactoryServices.GetCapturaObras().getinfoCapturaObras(pEscenario, pDivisor, pMes, pAnio);
                        //Ventas
                        var JFluEngresosM = Newtonsoft.Json.JsonConvert.SerializeObject(dtCObras.FirstOrDefault(x => x.Key.Equals("FlujodeIngresosM")).Value);
                        var lstFluEngresosM = Newtonsoft.Json.JsonConvert.DeserializeObject<List<ConjuntoDatosDTO1>>(JFluEngresosM);
                        /*VentasNetas*/
                        var JVentasNetas = Newtonsoft.Json.JsonConvert.SerializeObject(dtCObras.FirstOrDefault(x => x.Key.Equals("VentasNetas")).Value);
                        var objVentasNetas = Newtonsoft.Json.JsonConvert.DeserializeObject<ConjuntoDatosDTO1>(JVentasNetas);
                        //Costo de ventas
                        var JValIngreos = Newtonsoft.Json.JsonConvert.SerializeObject(dtCObras.FirstOrDefault(x => x.Key.Equals("FlujodeIngresos")).Value);
                        var lstValIngreos = Newtonsoft.Json.JsonConvert.DeserializeObject<List<ConjuntoDatosDTO1>>(JValIngreos);
                        //Agregar totales
                        var JCostoGastoOperacion = Newtonsoft.Json.JsonConvert.SerializeObject(dtCObras.FirstOrDefault(x => x.Key.Equals("CostoDeVenta")).Value);
                        var objCostoGastoOperacion = Newtonsoft.Json.JsonConvert.DeserializeObject<ConjuntoDatosDTO1>(JCostoGastoOperacion);
                        //Contribución marginal
                        var JContribucionMarginal = Newtonsoft.Json.JsonConvert.SerializeObject(dtCObras.FirstOrDefault(x => x.Key.Equals("ContribucionMarginal")).Value);
                        var objContribucionMarginal = Newtonsoft.Json.JsonConvert.DeserializeObject<ConjuntoDatosDTO1>(JContribucionMarginal);
                        //Gastos de operación
                        var JTotalGtoOperacion = Newtonsoft.Json.JsonConvert.SerializeObject(dtCObras.FirstOrDefault(x => x.Key.Equals("TotalGtoOperacion")).Value);
                        var objTotalGtoOperacion = Newtonsoft.Json.JsonConvert.DeserializeObject<ConjuntoDatosDTO1>(JTotalGtoOperacion);
                        var JTotalGtosOperacionR1 = Newtonsoft.Json.JsonConvert.SerializeObject(dtCObras.FirstOrDefault(x => x.Key.Equals("TotalGtosOperacionR1")).Value);
                        var objTotalGtosOperacionR1 = Newtonsoft.Json.JsonConvert.DeserializeObject<ConjuntoDatosDTO1>(JTotalGtosOperacionR1);
                        //Utilidad de operación
                        var JUtilidadOperacion = Newtonsoft.Json.JsonConvert.SerializeObject(dtCObras.FirstOrDefault(x => x.Key.Equals("UtilidadOperacion")).Value);
                        var objUtilidadOperacion = Newtonsoft.Json.JsonConvert.DeserializeObject<ConjuntoDatosDTO1>(JUtilidadOperacion);
                        var JCostoIntegral = Newtonsoft.Json.JsonConvert.SerializeObject(dtCObras.FirstOrDefault(x => x.Key.Equals("CostoIntegral")).Value);
                        var objCostoIntegral = Newtonsoft.Json.JsonConvert.DeserializeObject<ConjuntoDatosDTO1>(JCostoIntegral);
                        //Utilidades
                        var JUtilidadAntesImp = Newtonsoft.Json.JsonConvert.SerializeObject(dtCObras.FirstOrDefault(x => x.Key.Equals("UtilidadAntesImp")).Value);
                        var objUtilidadAntesImp = Newtonsoft.Json.JsonConvert.DeserializeObject<ConjuntoDatosDTO1>(JUtilidadAntesImp);
                        var JUtilidadNeta = Newtonsoft.Json.JsonConvert.SerializeObject(dtCObras.FirstOrDefault(x => x.Key.Equals("UtilidadNeta")).Value);
                        var objUtilidadNeta = Newtonsoft.Json.JsonConvert.DeserializeObject<ConjuntoDatosDTO1>(JUtilidadNeta);

                        var Jimpuestos = Newtonsoft.Json.JsonConvert.SerializeObject(dtCObras.FirstOrDefault(x => x.Key.Equals("impuestos")).Value);
                        var objimpuestos = Newtonsoft.Json.JsonConvert.DeserializeObject<ConjuntoDatosDTO1>(Jimpuestos);

                        List<string> MesesSet = metodo(pMes, pAnio);
                        MesesDTO ParmMeses = new MesesDTO();
                        ParmMeses.MES1 = MesesSet[0];
                        ParmMeses.MES2 = MesesSet[1];
                        ParmMeses.MES3 = MesesSet[2];
                        ParmMeses.MES4 = MesesSet[3];
                        ParmMeses.MES5 = MesesSet[4];
                        ParmMeses.MES6 = MesesSet[5];
                        ParmMeses.MES7 = MesesSet[6];
                        ParmMeses.MES8 = MesesSet[7];
                        ParmMeses.MES9 = MesesSet[8];
                        ParmMeses.MES10 = MesesSet[9];
                        ParmMeses.MES11 = MesesSet[10];
                        ParmMeses.MES12 = MesesSet[11];

                        List<MesesDTO> listMesesPtm = new List<MesesDTO>();
                        listMesesPtm.Add(ParmMeses);

                        lstValIngreos.Add(objVentasNetas);
                        var lstCompleta = lstValIngreos.Concat(lstFluEngresosM).ToList();
                        lstCompleta.Add(objCostoGastoOperacion);
                        lstCompleta.Add(objContribucionMarginal);
                        lstCompleta.Add(objTotalGtoOperacion);
                        lstCompleta.Add(objTotalGtosOperacionR1);
                        lstCompleta.Add(objUtilidadOperacion);
                        lstCompleta.Add(objCostoIntegral);
                        lstCompleta.Add(objUtilidadAntesImp);
                        lstCompleta.Add(objimpuestos);
                        lstCompleta.Add(objUtilidadNeta);



                        var Anio = DateTime.Now.Year;
                        var anioNext = Anio + 1;

                        rd.Database.Tables[1].SetDataSource(getInfoEnca("ESTADO DE RESULTADOS 2017-2018", "( Cifras en Miles de Pesos )"));
                        rd.Database.Tables[0].SetDataSource(lstCompleta);
                        rd.Database.Tables[2].SetDataSource(ToDataTable(listMesesPtm));
                        Session.Add("reporte", rd);

                        break;
                    }
                case ReportesEnum.PROYECCIONES2:
                    {
                        setMedidasReporte("HO");
                        rd = new rtpEstadoResultados();
                        var pEscenario = Convert.ToInt32(Request.QueryString["Escenario"]);
                        var pDivisor = Convert.ToInt32(Request.QueryString["Divisor"]);
                        var pMes = Convert.ToInt32(Request.QueryString["meses"]);
                        var pAnio = Convert.ToInt32(Request.QueryString["anio"]);
                        var dtCObras = capturadeObrasFactoryServices.GetCapturaObras().getinfoCapturaObras(pEscenario, pDivisor, pMes, pAnio);
                        //Ingresos de Operación
                        var JIngresosVentas = Newtonsoft.Json.JsonConvert.SerializeObject(dtCObras.FirstOrDefault(x => x.Key.Equals("IngresosVentas")).Value);
                        var objIngresosVentas = Newtonsoft.Json.JsonConvert.DeserializeObject<ConjuntoDatosDTO1>(JIngresosVentas);
                        var JIngresosVentasMaq = Newtonsoft.Json.JsonConvert.SerializeObject(dtCObras.FirstOrDefault(x => x.Key.Equals("IngresosVentasMaq")).Value);
                        var objIngresosVentasMaq = Newtonsoft.Json.JsonConvert.DeserializeObject<ConjuntoDatosDTO1>(JIngresosVentasMaq);
                        //Costos y gastos de operación
                        var JTotalGtoOperacion = Newtonsoft.Json.JsonConvert.SerializeObject(dtCObras.FirstOrDefault(x => x.Key.Equals("TotalGtoOperacion")).Value);
                        var objTotalGtoOperacion = Newtonsoft.Json.JsonConvert.DeserializeObject<ConjuntoDatosDTO1>(JTotalGtoOperacion);
                        var JProveedorAcreedor = Newtonsoft.Json.JsonConvert.SerializeObject(dtCObras.FirstOrDefault(x => x.Key.Equals("ProveedorAcreedor")).Value);
                        var objProveedorAcreedor = Newtonsoft.Json.JsonConvert.DeserializeObject<ConjuntoDatosDTO1>(JProveedorAcreedor);
                        var JCostoVentaTotal = Newtonsoft.Json.JsonConvert.SerializeObject(dtCObras.FirstOrDefault(x => x.Key.Equals("CostoVentaTotal")).Value);
                        var objCostoVentaTotal = Newtonsoft.Json.JsonConvert.DeserializeObject<ConjuntoDatosDTO1>(JCostoVentaTotal);
                        var JCostoGastoOperacion = Newtonsoft.Json.JsonConvert.SerializeObject(dtCObras.FirstOrDefault(x => x.Key.Equals("CostoGastoOperacion")).Value);
                        var objCostoGastoOperacion = Newtonsoft.Json.JsonConvert.DeserializeObject<ConjuntoDatosDTO1>(JCostoGastoOperacion);
                        var JCostoGastoOperacionTotal = Newtonsoft.Json.JsonConvert.SerializeObject(dtCObras.FirstOrDefault(x => x.Key.Equals("CostoGastoOperacionTotal")).Value);
                        var objCostoGastoOperacionTotal = Newtonsoft.Json.JsonConvert.DeserializeObject<ConjuntoDatosDTO1>(JCostoGastoOperacionTotal);
                        //Flujo de operaciónes
                        var JFlujoOperacion = Newtonsoft.Json.JsonConvert.SerializeObject(dtCObras.FirstOrDefault(x => x.Key.Equals("FlujoOperacion")).Value);
                        var objFlujoOperacion = Newtonsoft.Json.JsonConvert.DeserializeObject<ConjuntoDatosDTO1>(JFlujoOperacion);
                        var JInversionesFisicas = Newtonsoft.Json.JsonConvert.SerializeObject(dtCObras.FirstOrDefault(x => x.Key.Equals("InversionesFisicas")).Value);
                        var objInversionesFisicas = Newtonsoft.Json.JsonConvert.DeserializeObject<ConjuntoDatosDTO1>(JInversionesFisicas);
                        //Flujo despues de inversiones
                        var JFlujoDespuesInversiones = Newtonsoft.Json.JsonConvert.SerializeObject(dtCObras.FirstOrDefault(x => x.Key.Equals("FlujoDespuesInversiones")).Value);
                        var objFlujoDespuesInversiones = Newtonsoft.Json.JsonConvert.DeserializeObject<ConjuntoDatosDTO1>(JFlujoDespuesInversiones);
                        var JInteresesGastoDeuda = Newtonsoft.Json.JsonConvert.SerializeObject(dtCObras.FirstOrDefault(x => x.Key.Equals("InteresesGastoDeuda")).Value);
                        var objInteresesGastoDeuda = Newtonsoft.Json.JsonConvert.DeserializeObject<ConjuntoDatosDTO1>(JInteresesGastoDeuda);
                        //Flujo despues de intereses
                        var JFlujoDespuesIntereses = Newtonsoft.Json.JsonConvert.SerializeObject(dtCObras.FirstOrDefault(x => x.Key.Equals("FlujoDespuesIntereses")).Value);
                        var objFlujoDespuesIntereses = Newtonsoft.Json.JsonConvert.DeserializeObject<ConjuntoDatosDTO1>(JFlujoDespuesIntereses);
                        var JPagosDiversos = Newtonsoft.Json.JsonConvert.SerializeObject(dtCObras.FirstOrDefault(x => x.Key.Equals("PagosDiversos")).Value);
                        var objPagosDiversos = Newtonsoft.Json.JsonConvert.DeserializeObject<ConjuntoDatosDTO1>(JPagosDiversos);
                        var JRCyCD = Newtonsoft.Json.JsonConvert.SerializeObject(dtCObras.FirstOrDefault(x => x.Key.Equals("RCyCD")).Value);
                        var objRCyCD = Newtonsoft.Json.JsonConvert.DeserializeObject<ConjuntoDatosDTO1>(JRCyCD);
                        //De caja
                        var JDeCaja = Newtonsoft.Json.JsonConvert.SerializeObject(dtCObras.FirstOrDefault(x => x.Key.Equals("DeCaja")).Value);
                        var objDeCaja = Newtonsoft.Json.JsonConvert.DeserializeObject<ConjuntoDatosDTO1>(JDeCaja);
                        //Aportaciones de capital
                        var JAportacionesCapital = Newtonsoft.Json.JsonConvert.SerializeObject(dtCObras.FirstOrDefault(x => x.Key.Equals("AportacionesCapital")).Value);
                        var objAportacionesCapital = Newtonsoft.Json.JsonConvert.DeserializeObject<ConjuntoDatosDTO1>(JAportacionesCapital);
                        //Disposiciones de créditos
                        var JCreditosBancarios = Newtonsoft.Json.JsonConvert.SerializeObject(dtCObras.FirstOrDefault(x => x.Key.Equals("CreditosBancarios")).Value);
                        var objCreditosBancarios = Newtonsoft.Json.JsonConvert.DeserializeObject<ConjuntoDatosDTO1>(JCreditosBancarios);
                        //Reservas
                        var JReservas = Newtonsoft.Json.JsonConvert.SerializeObject(dtCObras.FirstOrDefault(x => x.Key.Equals("Reservas")).Value);
                        var objReservas = Newtonsoft.Json.JsonConvert.DeserializeObject<ConjuntoDatosDTO1>(JReservas);
                        //Saldos
                        var JSaldoInicial = Newtonsoft.Json.JsonConvert.SerializeObject(dtCObras.FirstOrDefault(x => x.Key.Equals("SaldoInicial")).Value);
                        var objSaldoInicial = Newtonsoft.Json.JsonConvert.DeserializeObject<ConjuntoDatosDTO1>(JSaldoInicial);
                        var JSaldoFinalFlujoEfectivo = Newtonsoft.Json.JsonConvert.SerializeObject(dtCObras.FirstOrDefault(x => x.Key.Equals("SaldoFinalFlujoEfectivo")).Value);
                        var objSaldoFinalFlujoEfectivo = Newtonsoft.Json.JsonConvert.DeserializeObject<ConjuntoDatosDTO1>(JSaldoFinalFlujoEfectivo);

                        var lstCompleta = new List<ConjuntoDatosDTO1>();
                        lstCompleta.Add(objIngresosVentas);
                        lstCompleta.Add(objIngresosVentasMaq);

                        lstCompleta.Add(objCostoGastoOperacionTotal);

                        lstCompleta.Add(objCostoVentaTotal);
                        lstCompleta.Add(objCostoGastoOperacion);
                        lstCompleta.Add(objProveedorAcreedor);

                        lstCompleta.Add(objFlujoOperacion);

                        lstCompleta.Add(objInversionesFisicas);
                        lstCompleta.Add(objFlujoDespuesInversiones);

                        lstCompleta.Add(objInteresesGastoDeuda);

                        lstCompleta.Add(objFlujoDespuesIntereses);
                        lstCompleta.Add(objPagosDiversos);
                        lstCompleta.Add(objRCyCD);

                        lstCompleta.Add(objDeCaja);

                        lstCompleta.Add(objAportacionesCapital);

                        lstCompleta.Add(objCreditosBancarios);

                        lstCompleta.Add(objReservas);

                        lstCompleta.Add(objSaldoInicial);
                        lstCompleta.Add(objSaldoFinalFlujoEfectivo);
                        lstCompleta.Add(objCostoGastoOperacionTotal);

                        List<string> MesesSet = metodo(pMes, pAnio);
                        MesesDTO ParmMeses = new MesesDTO();
                        ParmMeses.MES1 = MesesSet[0];
                        ParmMeses.MES2 = MesesSet[1];
                        ParmMeses.MES3 = MesesSet[2];
                        ParmMeses.MES4 = MesesSet[3];
                        ParmMeses.MES5 = MesesSet[4];
                        ParmMeses.MES6 = MesesSet[5];
                        ParmMeses.MES7 = MesesSet[6];
                        ParmMeses.MES8 = MesesSet[7];
                        ParmMeses.MES9 = MesesSet[8];
                        ParmMeses.MES10 = MesesSet[9];
                        ParmMeses.MES11 = MesesSet[10];
                        ParmMeses.MES12 = MesesSet[11];

                        List<MesesDTO> listMesesPtm = new List<MesesDTO>();
                        listMesesPtm.Add(ParmMeses);


                        rd.Database.Tables[1].SetDataSource(getInfoEnca("FLUJO DE EFECTIVO 2018 - 2019", "( Cifras en Miles de Pesos )"));
                        rd.Database.Tables[0].SetDataSource(lstCompleta);
                        rd.Database.Tables[2].SetDataSource(ToDataTable(listMesesPtm));
                        Session.Add("reporte", rd);

                        break;
                    }
                case ReportesEnum.PROYECCIONES3:
                    {
                        var pEscenario = Convert.ToInt32(Request.QueryString["Escenario"]);
                        var pDivisor = Convert.ToInt32(Request.QueryString["Divisor"]);
                        var pMes = Convert.ToInt32(Request.QueryString["meses"]);
                        var pAnio = Convert.ToInt32(Request.QueryString["anio"]);
                        setMedidasReporte("HO");
                        rd = new rptFlujoEfectivo();
                        var dtCObras = capturadeObrasFactoryServices.GetCapturaObras().getinfoCapturaObras(pEscenario, pDivisor, pMes, pAnio);
                        //Activo circulante
                        EstadoResultadosDTO EfectivoInversiones = (EstadoResultadosDTO)dtCObras["EfectivoInversiones"];
                        EstadoResultadosDTO Clientes = (EstadoResultadosDTO)dtCObras["Clientes"];
                        EstadoResultadosDTO OtrosDeudores = (EstadoResultadosDTO)dtCObras["OtrosDeudores"];
                        EstadoResultadosDTO SumaCuentasPorCobrar = (EstadoResultadosDTO)dtCObras["SumaCuentasPorCobrar"];
                        EstadoResultadosDTO Inventarios = (EstadoResultadosDTO)dtCObras["Inventarios"];
                        EstadoResultadosDTO OtrosActivos = (EstadoResultadosDTO)dtCObras["OtrosActivos"];
                        EstadoResultadosDTO SumaActivoCirculante = (EstadoResultadosDTO)dtCObras["SumaActivoCirculante"];
                        //Activo no circulante
                        EstadoResultadosDTO ActivoNoCirculante = (EstadoResultadosDTO)dtCObras["ActivoNoCirculante"];
                        //Activo fijo-neto
                        EstadoResultadosDTO ActivoFijoNeto = (EstadoResultadosDTO)dtCObras["ActivoFijoNeto"];
                        //Activo Diferido
                        EstadoResultadosDTO ActivoDiferido = (EstadoResultadosDTO)dtCObras["ActivoDiferido"];
                        //suma activo total
                        EstadoResultadosDTO SumaActivoTotal = (EstadoResultadosDTO)dtCObras["SumaActivoTotal"];
                        //FIJO
                        EstadoResultadosDTO DocumentosInteresPorPagar = (EstadoResultadosDTO)dtCObras["DocumentosInteresPorPagar"];
                        EstadoResultadosDTO ProveedoresContratistas = (EstadoResultadosDTO)dtCObras["ProveedoresContratistas"];
                        EstadoResultadosDTO ImpuestosDerechoPorPagar = (EstadoResultadosDTO)dtCObras["ImpuestosDerechoPorPagar"];
                        EstadoResultadosDTO GastosAcomulados = (EstadoResultadosDTO)dtCObras["GastosAcomulados"];
                        EstadoResultadosDTO AcreedoresDiversos = (EstadoResultadosDTO)dtCObras["AcreedoresDiversos"];
                        EstadoResultadosDTO SumaPasivosCP = (EstadoResultadosDTO)dtCObras["SumaPasivosCP"];
                        EstadoResultadosDTO SumaPasivosTotal = (EstadoResultadosDTO)dtCObras["SumaPasivosTotal"];
                        //Capital contable
                        EstadoResultadosDTO CapitalSocial = (EstadoResultadosDTO)dtCObras["CapitalSocial"];
                        EstadoResultadosDTO AportFuturo = (EstadoResultadosDTO)dtCObras["AportFuturo"];
                        EstadoResultadosDTO ResultadoAcomulado = (EstadoResultadosDTO)dtCObras["ResultadoAcomulado"];
                        EstadoResultadosDTO ExcesoEnActualizacion = (EstadoResultadosDTO)dtCObras["ExcesoEnActualizacion"];
                        EstadoResultadosDTO ResultadoEjercicio = (EstadoResultadosDTO)dtCObras["ResultadoEjercicio"];
                        EstadoResultadosDTO SumaCapitalContable = (EstadoResultadosDTO)dtCObras["SumaCapitalContable"];
                        EstadoResultadosDTO SumaPasivoCapital = (EstadoResultadosDTO)dtCObras["SumaPasivoCapital"];
                        EstadoResultadosDTO Cuadre = (EstadoResultadosDTO)dtCObras["Cuadre"];

                        var lstCompleta = new List<EstadoResultadosDTO>();
                        lstCompleta.Add(EfectivoInversiones);
                        lstCompleta.Add(Clientes);
                        lstCompleta.Add(OtrosDeudores);
                        lstCompleta.Add(SumaCuentasPorCobrar);
                        lstCompleta.Add(Inventarios);
                        lstCompleta.Add(OtrosActivos);
                        lstCompleta.Add(SumaActivoCirculante);
                        //lstCompleta.Add(ActivoNoCirculante);
                        lstCompleta.Add(ActivoFijoNeto);
                        lstCompleta.Add(ActivoDiferido);
                        lstCompleta.Add(SumaActivoTotal);
                        lstCompleta.Add(DocumentosInteresPorPagar);
                        lstCompleta.Add(ProveedoresContratistas);
                        lstCompleta.Add(ImpuestosDerechoPorPagar);
                        lstCompleta.Add(GastosAcomulados);
                        lstCompleta.Add(AcreedoresDiversos);
                        lstCompleta.Add(SumaPasivosCP);
                        lstCompleta.Add(SumaPasivosTotal);
                        lstCompleta.Add(CapitalSocial);
                        lstCompleta.Add(AportFuturo);
                        lstCompleta.Add(ResultadoAcomulado);
                        lstCompleta.Add(ResultadoEjercicio);
                        lstCompleta.Add(ExcesoEnActualizacion);
                        lstCompleta.Add(SumaCapitalContable);
                        lstCompleta.Add(SumaPasivoCapital);
                        lstCompleta.Add(Cuadre);

                        List<string> MesesSet = metodo(pMes, pAnio);
                        MesesDTO ParmMeses = new MesesDTO();
                        ParmMeses.MES1 = MesesSet[0];
                        ParmMeses.MES2 = MesesSet[1];
                        ParmMeses.MES3 = MesesSet[2];
                        ParmMeses.MES4 = MesesSet[3];
                        ParmMeses.MES5 = MesesSet[4];
                        ParmMeses.MES6 = MesesSet[5];
                        ParmMeses.MES7 = MesesSet[6];
                        ParmMeses.MES8 = MesesSet[7];
                        ParmMeses.MES9 = MesesSet[8];
                        ParmMeses.MES10 = MesesSet[9];
                        ParmMeses.MES11 = MesesSet[10];
                        ParmMeses.MES12 = MesesSet[11];

                        List<MesesDTO> listMesesPtm = new List<MesesDTO>();
                        listMesesPtm.Add(ParmMeses);


                        rd.Database.Tables[0].SetDataSource(ToDataTable(lstCompleta));
                        rd.Database.Tables[1].SetDataSource(getInfoEnca("ESTADO DE POSICION FINANCIERA", "( Cifras en Miles de Pesos )"));
                        rd.Database.Tables[2].SetDataSource(ToDataTable(listMesesPtm));
                        Session.Add("reporte", rd);

                        break;
                    }
                case ReportesEnum.CifrasPrincipales:
                    {
                        setMedidasReporte("HO");
                        rd = new rptCifrasppal();

                        var pEscenario = Convert.ToInt32(Request.QueryString["Escenario"]);
                        var pDivisor = Convert.ToInt32(Request.QueryString["Divisor"]);
                        var pMes = Convert.ToInt32(Request.QueryString["meses"]);
                        var pAnio = Convert.ToInt32(Request.QueryString["anio"]);

                        var data = capturadeObrasFactoryServices.GetCapturaObras().getinfoCapturaObras(pEscenario, pDivisor, pMes, pAnio);


                        EstadoResultadosDTO ContribucionMarginal = (EstadoResultadosDTO)data["ContribucionMarginal"];
                        EstadoResultadosDTO VentasNetas = (EstadoResultadosDTO)data["VentasNetas"];
                        EstadoResultadosDTO UtilidadOperacion = (EstadoResultadosDTO)data["UtilidadOperacion"];
                        //EstadoResultadosDTO UtilidadNETA = (EstadoResultadosDTO)data["UtilidadNeta"];
                        EstadoResultadosDTO TotalGtoOperacion = (EstadoResultadosDTO)data["TotalGtoOperacion"];
                        EstadoResultadosDTO SaldoFinalFlujoEfectivo = (EstadoResultadosDTO)data["SaldoFinalFlujoEfectivo"];


                        EstadoResultadosDTO UtilidadNeta = (EstadoResultadosDTO)data["UtilidadNeta"];
                        CifrasPrincipalesDTO obj = new CifrasPrincipalesDTO();
                        List<DivisionesVentasDTO> listaDivisiones = (List<DivisionesVentasDTO>)data["ListaDivisionesVentas"];
                        List<CifrasPrincipalesDTO> dataSend = new List<CifrasPrincipalesDTO>();
                        //UTILIDAD BRUTA;



                        //>>>IMPORTE
                        obj.UImporteMes1 = (ContribucionMarginal.Fecha1).ToString("#,##0.##");
                        obj.UImporteMes2 = (ContribucionMarginal.Fecha2).ToString("#,##0.##");
                        obj.UImporteMes3 = (ContribucionMarginal.Fecha3).ToString("#,##0.##");
                        obj.UImporteMes4 = (ContribucionMarginal.Fecha4).ToString("#,##0.##");
                        obj.UImporteMes5 = (ContribucionMarginal.Fecha5).ToString("#,##0.##");
                        obj.UImporteMes6 = (ContribucionMarginal.Fecha6).ToString("#,##0.##");
                        obj.UImporteMes7 = (ContribucionMarginal.Fecha7).ToString("#,##0.##");
                        obj.UImporteMes8 = (ContribucionMarginal.Fecha8).ToString("#,##0.##");
                        obj.UImporteMes9 = (ContribucionMarginal.Fecha9).ToString("#,##0.##");
                        obj.UImporteMes10 = (ContribucionMarginal.Fecha10).ToString("#,##0.##");
                        obj.UImporteMes11 = (ContribucionMarginal.Fecha11).ToString("#,##0.##");
                        obj.UImporteMes12 = (ContribucionMarginal.Fecha12).ToString("#,##0.##");

                        //>>>VENTAS
                        obj.UsVentasMes1 = ((ContribucionMarginal.Fecha1 / VentasNetas.Fecha1) * 100).ToString("#,##0.##");
                        obj.UsVentasMes2 = ((ContribucionMarginal.Fecha2 / VentasNetas.Fecha2) * 100).ToString("#,##0.##");
                        obj.UsVentasMes3 = ((ContribucionMarginal.Fecha3 / VentasNetas.Fecha3) * 100).ToString("#,##0.##");
                        obj.UsVentasMes4 = ((ContribucionMarginal.Fecha4 / VentasNetas.Fecha4) * 100).ToString("#,##0.##");
                        obj.UsVentasMes5 = ((ContribucionMarginal.Fecha5 / VentasNetas.Fecha5) * 100).ToString("#,##0.##");
                        obj.UsVentasMes6 = ((ContribucionMarginal.Fecha6 / VentasNetas.Fecha6) * 100).ToString("#,##0.##");
                        obj.UsVentasMes7 = ((ContribucionMarginal.Fecha7 / VentasNetas.Fecha7) * 100).ToString("#,##0.##");
                        obj.UsVentasMes8 = ((ContribucionMarginal.Fecha8 / VentasNetas.Fecha8) * 100).ToString("#,##0.##");
                        obj.UsVentasMes9 = ((ContribucionMarginal.Fecha9 / VentasNetas.Fecha9) * 100).ToString("#,##0.##");
                        obj.UsVentasMes10 = ((ContribucionMarginal.Fecha10 / VentasNetas.Fecha10 * 100).ToString("#,##0.##"));
                        obj.UsVentasMes11 = ((ContribucionMarginal.Fecha11 / VentasNetas.Fecha11 * 100).ToString("#,##0.##"));
                        obj.UsVentasMes12 = (ContribucionMarginal.Fecha12 / VentasNetas.Fecha12 * 100).ToString("#,##0.##");


                        //Total Utilidad Bruta
                        var TotalUtilidadBruta = ContribucionMarginal.Fecha1 + ContribucionMarginal.Fecha2
                            + ContribucionMarginal.Fecha3
                            + ContribucionMarginal.Fecha4
                            + ContribucionMarginal.Fecha5
                            + ContribucionMarginal.Fecha6
                            + ContribucionMarginal.Fecha7
                            + ContribucionMarginal.Fecha8
                            + ContribucionMarginal.Fecha9
                            + ContribucionMarginal.Fecha10
                            + ContribucionMarginal.Fecha11
                            + ContribucionMarginal.Fecha12;
                        //UTILIDAD OPERACION
                        //>> IMPORTE
                        obj.UtilidadOperacionIMes1 = (UtilidadOperacion.Fecha1).ToString("#,##0.##");
                        obj.UtilidadOperacionIMes2 = (UtilidadOperacion.Fecha2).ToString("#,##0.##");
                        obj.UtilidadOperacionIMes3 = (UtilidadOperacion.Fecha3).ToString("#,##0.##");
                        obj.UtilidadOperacionIMes4 = (UtilidadOperacion.Fecha4).ToString("#,##0.##");
                        obj.UtilidadOperacionIMes5 = (UtilidadOperacion.Fecha5).ToString("#,##0.##");
                        obj.UtilidadOperacionIMes6 = (UtilidadOperacion.Fecha6).ToString("#,##0.##");
                        obj.UtilidadOperacionIMes7 = (UtilidadOperacion.Fecha7).ToString("#,##0.##");
                        obj.UtilidadOperacionIMes8 = (UtilidadOperacion.Fecha8).ToString("#,##0.##");
                        obj.UtilidadOperacionIMes9 = (UtilidadOperacion.Fecha9).ToString("#,##0.##");
                        obj.UtilidadOperacionIMes10 = (UtilidadOperacion.Fecha10).ToString("#,##0.##");
                        obj.UtilidadOperacionIMes11 = (UtilidadOperacion.Fecha11).ToString("#,##0.##");
                        obj.UtilidadOperacionIMes12 = (UtilidadOperacion.Fecha12).ToString("#,##0.##");

                        var TotalUtilidaOperacion = UtilidadOperacion.Fecha1 + UtilidadOperacion.Fecha2
                            + UtilidadOperacion.Fecha3
                            + UtilidadOperacion.Fecha4
                            + UtilidadOperacion.Fecha5
                            + UtilidadOperacion.Fecha6
                            + UtilidadOperacion.Fecha7
                            + UtilidadOperacion.Fecha8
                            + UtilidadOperacion.Fecha9
                            + UtilidadOperacion.Fecha10
                            + UtilidadOperacion.Fecha11
                            + UtilidadOperacion.Fecha12;
                        //>> VENTAS
                        obj.UtilidadOperacionVMes1 = ((UtilidadOperacion.Fecha1 / VentasNetas.Fecha1) * 100).ToString("#,##0.##");
                        obj.UtilidadOperacionVMes2 = ((UtilidadOperacion.Fecha2 / VentasNetas.Fecha2) * 100).ToString("#,##0.##");
                        obj.UtilidadOperacionVMes3 = ((UtilidadOperacion.Fecha3 / VentasNetas.Fecha3) * 100).ToString("#,##0.##");
                        obj.UtilidadOperacionVMes4 = ((UtilidadOperacion.Fecha4 / VentasNetas.Fecha4) * 100).ToString("#,##0.##");
                        obj.UtilidadOperacionVMes5 = ((UtilidadOperacion.Fecha5 / VentasNetas.Fecha5) * 100).ToString("#,##0.##");
                        obj.UtilidadOperacionVMes6 = ((UtilidadOperacion.Fecha6 / VentasNetas.Fecha6) * 100).ToString("#,##0.##");
                        obj.UtilidadOperacionVMes7 = ((UtilidadOperacion.Fecha7 / VentasNetas.Fecha7) * 100).ToString("#,##0.##");
                        obj.UtilidadOperacionVMes8 = ((UtilidadOperacion.Fecha8 / VentasNetas.Fecha8) * 100).ToString("#,##0.##");
                        obj.UtilidadOperacionVMes9 = ((UtilidadOperacion.Fecha9 / VentasNetas.Fecha9) * 100).ToString("#,##0.##");
                        obj.UtilidadOperacionVMes10 = ((UtilidadOperacion.Fecha10 / VentasNetas.Fecha10) * 100).ToString("#,##0.##");
                        obj.UtilidadOperacionVMes11 = ((UtilidadOperacion.Fecha11 / VentasNetas.Fecha11) * 100).ToString("#,##0.##");
                        obj.UtilidadOperacionVMes12 = ((UtilidadOperacion.Fecha12 / VentasNetas.Fecha12) * 100).ToString("#,##0.##");

                        ///UTILIDAD NETA
                        ///>>>Acumulada
                        ///qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww

                        obj.UMensualMes1 = (UtilidadOperacion.Fecha1).ToString("#,##0.##");
                        obj.UMensualMes2 = (UtilidadOperacion.Fecha2).ToString("#,##0.##");
                        obj.UMensualMes3 = (UtilidadOperacion.Fecha3).ToString("#,##0.##");
                        obj.UMensualMes4 = (UtilidadOperacion.Fecha4).ToString("#,##0.##");
                        obj.UMensualMes5 = (UtilidadOperacion.Fecha5).ToString("#,##0.##");
                        obj.UMensualMes6 = (UtilidadOperacion.Fecha6).ToString("#,##0.##");
                        obj.UMensualMes7 = (UtilidadOperacion.Fecha7).ToString("#,##0.##");
                        obj.UMensualMes8 = (UtilidadOperacion.Fecha8).ToString("#,##0.##");
                        obj.UMensualMes9 = (UtilidadOperacion.Fecha9).ToString("#,##0.##");
                        obj.UMensualMes10 = (UtilidadOperacion.Fecha10).ToString("#,##0.##");
                        obj.UMensualMes11 = (UtilidadOperacion.Fecha11).ToString("#,##0.##");
                        obj.UMensualMes12 = (UtilidadOperacion.Fecha12).ToString("#,##0.##");

                        List<string> AcumuladoUtilidaNeta = getAcumulado(pMes, UtilidadNeta);
                        obj.UAcumuladaMes1 = AcumuladoUtilidaNeta[0]; //(UtilidadOperacion.Fecha1).ToString("#,##0.##");
                        obj.UAcumuladaMes2 = AcumuladoUtilidaNeta[1];//(Convert.ToDecimal(obj.UMensualMes2) + Convert.ToDecimal(obj.UAcumuladaMes1)).ToString("#,##0.##");
                        obj.UAcumuladaMes3 = AcumuladoUtilidaNeta[2];//(Convert.ToDecimal(obj.UMensualMes3) + Convert.ToDecimal(obj.UAcumuladaMes2)).ToString("#,##0.##");
                        obj.UAcumuladaMes4 = AcumuladoUtilidaNeta[3];//(Convert.ToDecimal(obj.UMensualMes4) + Convert.ToDecimal(obj.UAcumuladaMes3)).ToString("#,##0.##");
                        obj.UAcumuladaMes5 = AcumuladoUtilidaNeta[4];//(Convert.ToDecimal(obj.UMensualMes5) + Convert.ToDecimal(obj.UAcumuladaMes4)).ToString("#,##0.##");
                        obj.UAcumuladaMes6 = AcumuladoUtilidaNeta[5];///(Convert.ToDecimal(obj.UMensualMes6) + Convert.ToDecimal(obj.UAcumuladaMes5)).ToString("#,##0.##");
                        obj.UAcumuladaMes7 = AcumuladoUtilidaNeta[6];// (Convert.ToDecimal(obj.UMensualMes7) + Convert.ToDecimal(obj.UAcumuladaMes6)).ToString("#,##0.##");
                        obj.UAcumuladaMes8 = AcumuladoUtilidaNeta[7];//(Convert.ToDecimal(obj.UMensualMes8) + Convert.ToDecimal(obj.UAcumuladaMes7)).ToString("#,##0.##");
                        obj.UAcumuladaMes9 = AcumuladoUtilidaNeta[8];///(Convert.ToDecimal(obj.UMensualMes9) + Convert.ToDecimal(obj.UAcumuladaMes8)).ToString("#,##0.##");

                        obj.UAcumuladaMes10 = AcumuladoUtilidaNeta[9];// (Convert.ToDecimal(obj.UMensualMes10) + Convert.ToDecimal(obj.UAcumuladaMes9)).ToString("#,##0.##");
                        obj.UAcumuladaMes11 = AcumuladoUtilidaNeta[10];//(Convert.ToDecimal(obj.UMensualMes11) + Convert.ToDecimal(obj.UAcumuladaMes10)).ToString("#,##0.##");

                        obj.UAcumuladaMes12 = AcumuladoUtilidaNeta[11];// (Convert.ToDecimal(obj.UMensualMes12) + Convert.ToDecimal(obj.UAcumuladaMes11)).ToString("#,##0.##");

                        ///>>>Mensual
                        //>>Margen vs Ventas 
                        obj.UMargeVentas1 = ((UtilidadOperacion.Fecha1 / VentasNetas.Fecha1) * 100).ToString("#,##0.##");
                        obj.UMargeVentas2 = ((UtilidadOperacion.Fecha2 / VentasNetas.Fecha2) * 100).ToString("#,##0.##");
                        obj.UMargeVentas3 = ((UtilidadOperacion.Fecha3 / VentasNetas.Fecha3) * 100).ToString("#,##0.##");
                        obj.UMargeVentas4 = ((UtilidadOperacion.Fecha4 / VentasNetas.Fecha4) * 100).ToString("#,##0.##");
                        obj.UMargeVentas5 = ((UtilidadOperacion.Fecha5 / VentasNetas.Fecha5) * 100).ToString("#,##0.##");
                        obj.UMargeVentas6 = ((UtilidadOperacion.Fecha6 / VentasNetas.Fecha6) * 100).ToString("#,##0.##");
                        obj.UMargeVentas7 = ((UtilidadOperacion.Fecha7 / VentasNetas.Fecha7) * 100).ToString("#,##0.##");
                        obj.UMargeVentas8 = ((UtilidadOperacion.Fecha8 / VentasNetas.Fecha8) * 100).ToString("#,##0.##");
                        obj.UMargeVentas9 = ((UtilidadOperacion.Fecha9 / VentasNetas.Fecha9) * 100).ToString("#,##0.##");
                        obj.UMargeVentas10 = ((UtilidadOperacion.Fecha10 / VentasNetas.Fecha10) * 100).ToString("#,##0.##");
                        obj.UMargeVentas11 = ((UtilidadOperacion.Fecha11 / VentasNetas.Fecha11) * 100).ToString("#,##0.##");
                        obj.UMargeVentas12 = ((UtilidadOperacion.Fecha12 / VentasNetas.Fecha12) * 100).ToString("#,##0.##");

                        //VENTAS
                        //>>Mensual.
                        obj.VMensualMes1 = (VentasNetas.Fecha1).ToString("#,##0.##");
                        obj.VMensualMes2 = (VentasNetas.Fecha2).ToString("#,##0.##");
                        obj.VMensualMes3 = (VentasNetas.Fecha3).ToString("#,##0.##");
                        obj.VMensualMes4 = (VentasNetas.Fecha4).ToString("#,##0.##");
                        obj.VMensualMes5 = (VentasNetas.Fecha5).ToString("#,##0.##");
                        obj.VMensualMes6 = (VentasNetas.Fecha6).ToString("#,##0.##");
                        obj.VMensualMes7 = (VentasNetas.Fecha7).ToString("#,##0.##");
                        obj.VMensualMes8 = (VentasNetas.Fecha8).ToString("#,##0.##");
                        obj.VMensualMes9 = (VentasNetas.Fecha9).ToString("#,##0.##");
                        obj.VMensualMes10 = (VentasNetas.Fecha10).ToString("#,##0.##");
                        obj.VMensualMes11 = (VentasNetas.Fecha11).ToString("#,##0.##");
                        obj.VMensualMes12 = (VentasNetas.Fecha12).ToString("#,##0.##");

                        var TotalVentasMensual = VentasNetas.Fecha1 + VentasNetas.Fecha2
                        + VentasNetas.Fecha3
                        + VentasNetas.Fecha4
                        + VentasNetas.Fecha5
                        + VentasNetas.Fecha6
                        + VentasNetas.Fecha7
                        + VentasNetas.Fecha8
                        + VentasNetas.Fecha9
                        + VentasNetas.Fecha10
                        + VentasNetas.Fecha11
                        + VentasNetas.Fecha12;

                        //>>Acumulado.

                        obj.VAcumuladaMes1 = (obj.VMensualMes1);
                        obj.VAcumuladaMes2 = (Convert.ToDecimal(obj.VAcumuladaMes1) + Convert.ToDecimal(obj.VMensualMes2)).ToString("#,##0.##");
                        obj.VAcumuladaMes3 = (Convert.ToDecimal(obj.VAcumuladaMes2) + Convert.ToDecimal(obj.VMensualMes3)).ToString("#,##0.##");
                        obj.VAcumuladaMes4 = (Convert.ToDecimal(obj.VAcumuladaMes3) + Convert.ToDecimal(obj.VMensualMes4)).ToString("#,##0.##");
                        obj.VAcumuladaMes5 = (Convert.ToDecimal(obj.VAcumuladaMes4) + Convert.ToDecimal(obj.VMensualMes5)).ToString("#,##0.##");
                        obj.VAcumuladaMes6 = (Convert.ToDecimal(obj.VAcumuladaMes5) + Convert.ToDecimal(obj.VMensualMes6)).ToString("#,##0.##");
                        obj.VAcumuladaMes7 = (Convert.ToDecimal(obj.VAcumuladaMes6) + Convert.ToDecimal(obj.VMensualMes7)).ToString("#,##0.##");
                        obj.VAcumuladaMes8 = (Convert.ToDecimal(obj.VAcumuladaMes7) + Convert.ToDecimal(obj.VMensualMes8)).ToString("#,##0.##");
                        obj.VAcumuladaMes9 = (Convert.ToDecimal(obj.VAcumuladaMes8) + Convert.ToDecimal(obj.VMensualMes9)).ToString("#,##0.##");
                        obj.VAcumuladaMes10 = (Convert.ToDecimal(obj.VAcumuladaMes9) + Convert.ToDecimal(obj.VMensualMes10)).ToString("#,##0.##");
                        obj.VAcumuladaMes11 = (Convert.ToDecimal(obj.VAcumuladaMes10) + Convert.ToDecimal(obj.VMensualMes11)).ToString("#,##0.##");
                        obj.VAcumuladaMes12 = (Convert.ToDecimal(obj.VAcumuladaMes11) + Convert.ToDecimal(obj.VMensualMes12)).ToString("#,##0.##");

                        //GTOS DE OPERACION
                        ///
                        ///   
                        /// 
                        obj.GOMensualMes1 = (TotalGtoOperacion.Fecha1).ToString("#,##0.##");
                        obj.GOMensualMes2 = (TotalGtoOperacion.Fecha2).ToString("#,##0.##");
                        obj.GOMensualMes3 = (TotalGtoOperacion.Fecha3).ToString("#,##0.##");
                        obj.GOMensualMes4 = (TotalGtoOperacion.Fecha4).ToString("#,##0.##");
                        obj.GOMensualMes5 = (TotalGtoOperacion.Fecha5).ToString("#,##0.##");
                        obj.GOMensualMes6 = (TotalGtoOperacion.Fecha6).ToString("#,##0.##");
                        obj.GOMensualMes7 = (TotalGtoOperacion.Fecha7).ToString("#,##0.##");
                        obj.GOMensualMes8 = (TotalGtoOperacion.Fecha8).ToString("#,##0.##");
                        obj.GOMensualMes9 = (TotalGtoOperacion.Fecha9).ToString("#,##0.##");
                        obj.GOMensualMes10 = (TotalGtoOperacion.Fecha10).ToString("#,##0.##");
                        obj.GOMensualMes11 = (TotalGtoOperacion.Fecha11).ToString("#,##0.##");
                        obj.GOMensualMes12 = (TotalGtoOperacion.Fecha12).ToString("#,##0.##");

                        var GastosOperacionTotal = TotalGtoOperacion.Fecha1 +
                            TotalGtoOperacion.Fecha2 +
                            TotalGtoOperacion.Fecha3 +
                            TotalGtoOperacion.Fecha4 +
                            TotalGtoOperacion.Fecha5 +
                            TotalGtoOperacion.Fecha6 +
                            TotalGtoOperacion.Fecha7 +
                            TotalGtoOperacion.Fecha8 +
                            TotalGtoOperacion.Fecha9 +
                            TotalGtoOperacion.Fecha10 +
TotalGtoOperacion.Fecha11 +
TotalGtoOperacion.Fecha12;
                        ///
                        obj.GOAcumuladaMes1 = (Convert.ToDecimal(obj.GOMensualMes1)).ToString("#,##0.##");

                        obj.GOAcumuladaMes2 = (Convert.ToDecimal(obj.GOAcumuladaMes1) + Convert.ToDecimal(obj.GOMensualMes2)).ToString("#,##0.##");
                        obj.GOAcumuladaMes3 = (Convert.ToDecimal(obj.GOAcumuladaMes2) + Convert.ToDecimal(obj.GOMensualMes3)).ToString("#,##0.##");
                        obj.GOAcumuladaMes4 = (Convert.ToDecimal(obj.GOAcumuladaMes3) + Convert.ToDecimal(obj.GOMensualMes4)).ToString("#,##0.##");
                        obj.GOAcumuladaMes5 = (Convert.ToDecimal(obj.GOAcumuladaMes4) + Convert.ToDecimal(obj.GOMensualMes5)).ToString("#,##0.##");
                        obj.GOAcumuladaMes6 = (Convert.ToDecimal(obj.GOAcumuladaMes5) + Convert.ToDecimal(obj.GOMensualMes6)).ToString("#,##0.##");
                        obj.GOAcumuladaMes7 = (Convert.ToDecimal(obj.GOAcumuladaMes6) + Convert.ToDecimal(obj.GOMensualMes7)).ToString("#,##0.##");
                        obj.GOAcumuladaMes8 = (Convert.ToDecimal(obj.GOAcumuladaMes7) + Convert.ToDecimal(obj.GOMensualMes8)).ToString("#,##0.##");
                        obj.GOAcumuladaMes9 = (Convert.ToDecimal(obj.GOAcumuladaMes8) + Convert.ToDecimal(obj.GOMensualMes9)).ToString("#,##0.##");
                        obj.GOAcumuladaMes10 = (Convert.ToDecimal(obj.GOAcumuladaMes9) + Convert.ToDecimal(obj.GOMensualMes10)).ToString("#,##0.##");
                        obj.GOAcumuladaMes11 = (Convert.ToDecimal(obj.GOAcumuladaMes10) + Convert.ToDecimal(obj.GOMensualMes11)).ToString("#,##0.##");
                        obj.GOAcumuladaMes12 = (Convert.ToDecimal(obj.GOAcumuladaMes11) + Convert.ToDecimal(obj.GOMensualMes12)).ToString("#,##0.##");

                        /////
                        obj.GOMargenVentasMes1 = (Convert.ToDecimal(obj.GOMensualMes1) / Convert.ToDecimal(obj.VMensualMes1) * 100).ToString("#,##0.##");


                        obj.GOMargenVentasMes2 = (Convert.ToDecimal(obj.GOMensualMes2) / Convert.ToDecimal(obj.VMensualMes2) * 100).ToString("#,##0.##");
                        obj.GOMargenVentasMes3 = (Convert.ToDecimal(obj.GOMensualMes3) / Convert.ToDecimal(obj.VMensualMes3) * 100).ToString("#,##0.##");
                        obj.GOMargenVentasMes4 = (Convert.ToDecimal(obj.GOMensualMes4) / Convert.ToDecimal(obj.VMensualMes4) * 100).ToString("#,##0.##");
                        obj.GOMargenVentasMes5 = (Convert.ToDecimal(obj.GOMensualMes5) / Convert.ToDecimal(obj.VMensualMes5) * 100).ToString("#,##0.##");
                        obj.GOMargenVentasMes6 = (Convert.ToDecimal(obj.GOMensualMes6) / Convert.ToDecimal(obj.VMensualMes6) * 100).ToString("#,##0.##");
                        obj.GOMargenVentasMes7 = (Convert.ToDecimal(obj.GOMensualMes7) / Convert.ToDecimal(obj.VMensualMes7) * 100).ToString("#,##0.##");
                        obj.GOMargenVentasMes8 = (Convert.ToDecimal(obj.GOMensualMes8) / Convert.ToDecimal(obj.VMensualMes8) * 100).ToString("#,##0.##");
                        obj.GOMargenVentasMes9 = (Convert.ToDecimal(obj.GOMensualMes9) / Convert.ToDecimal(obj.VMensualMes9) * 100).ToString("#,##0.##");
                        obj.GOMargenVentasMes10 = (Convert.ToDecimal(obj.GOMensualMes10) / Convert.ToDecimal(obj.VMensualMes10) * 100).ToString("#,##0.##");

                        obj.GOMargenVentasMes11 = (Convert.ToDecimal(obj.GOMensualMes11) / Convert.ToDecimal(obj.VMensualMes11) * 100).ToString("#,##0.##");
                        obj.GOMargenVentasMes12 = (Convert.ToDecimal(obj.GOMensualMes12) / Convert.ToDecimal(obj.VMensualMes12) * 100).ToString("#,##0.##");

                        var TotalGastosOperacionMensual = TotalGtoOperacion.Fecha1 + TotalGtoOperacion.Fecha2
                                                    + TotalGtoOperacion.Fecha3
                                                    + TotalGtoOperacion.Fecha4
                                                    + TotalGtoOperacion.Fecha5
                                                    + TotalGtoOperacion.Fecha6
                                                    + TotalGtoOperacion.Fecha7
                                                    + TotalGtoOperacion.Fecha8
                                                    + TotalGtoOperacion.Fecha9
                                                    + TotalGtoOperacion.Fecha10
                                                    + TotalGtoOperacion.Fecha11
                                                    + TotalGtoOperacion.Fecha12;



                        ////

                        obj.FMMes1 = (SaldoFinalFlujoEfectivo.Fecha1).ToString("#,##0.##");
                        obj.FMMes2 = (SaldoFinalFlujoEfectivo.Fecha2).ToString("#,##0.##");
                        obj.FMMes3 = (SaldoFinalFlujoEfectivo.Fecha3).ToString("#,##0.##");
                        obj.FMMes4 = (SaldoFinalFlujoEfectivo.Fecha4).ToString("#,##0.##");
                        obj.FMMes5 = (SaldoFinalFlujoEfectivo.Fecha5).ToString("#,##0.##");
                        obj.FMMes6 = (SaldoFinalFlujoEfectivo.Fecha6).ToString("#,##0.##");
                        obj.FMMes7 = (SaldoFinalFlujoEfectivo.Fecha7).ToString("#,##0.##");
                        obj.FMMes8 = (SaldoFinalFlujoEfectivo.Fecha8).ToString("#,##0.##");
                        obj.FMMes9 = (SaldoFinalFlujoEfectivo.Fecha9).ToString("#,##0.##");
                        obj.FMMes10 = (SaldoFinalFlujoEfectivo.Fecha10).ToString("#,##0.##");
                        obj.FMMes11 = (SaldoFinalFlujoEfectivo.Fecha11).ToString("#,##0.##");
                        obj.FMMes12 = (SaldoFinalFlujoEfectivo.Fecha12).ToString("#,##0.##");

                        //obj.FMMes1 = (74071).ToString("#,##0.##");
                        //obj.FMMes2 = (176346).ToString("#,##0.##");
                        //obj.FMMes3 = (223683).ToString("#,##0.##");
                        //obj.FMMes4 = (235985).ToString("#,##0.##");
                        //obj.FMMes5 = (239544).ToString("#,##0.##");
                        //obj.FMMes6 = (242993).ToString("#,##0.##");
                        //obj.FMMes7 = (245479).ToString("#,##0.##");
                        //obj.FMMes8 = (239714).ToString("#,##0.##");
                        //obj.FMMes9 = (243693).ToString("#,##0.##");
                        //obj.FMMes10 = (249036).ToString("#,##0.##");
                        //obj.FMMes11 = (253019).ToString("#,##0.##");
                        //obj.FMMes12 = (256853).ToString("#,##0.##");

                        List<string> MesesSet = metodo(pMes, pAnio);
                        MesesDTO ParmMeses = new MesesDTO();
                        ParmMeses.MES1 = MesesSet[0];
                        ParmMeses.MES2 = MesesSet[1];
                        ParmMeses.MES3 = MesesSet[2];
                        ParmMeses.MES4 = MesesSet[3];
                        ParmMeses.MES5 = MesesSet[4];
                        ParmMeses.MES6 = MesesSet[5];
                        ParmMeses.MES7 = MesesSet[6];
                        ParmMeses.MES8 = MesesSet[7];
                        ParmMeses.MES9 = MesesSet[8];
                        ParmMeses.MES10 = MesesSet[9];
                        ParmMeses.MES11 = MesesSet[10];
                        ParmMeses.MES12 = MesesSet[11];




                        List<MesesDTO> listMesesPtm = new List<MesesDTO>();
                        listMesesPtm.Add(ParmMeses);
                        dataSend.Add(obj);
                        //var listaEnviarDivisiones = listaDivisiones.Select(x=>new {x.Lugar,x.Obra, Venta = x.Venta.ToString("0.##"), Procentaje = (x.Procentaje*100)}).Take(3);
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("CIFRAS PRINCIPALES DE PROYECCION " + pAnio.ToString() + " - " + (pAnio + 1).ToString() + "", ""));
                        rd.Database.Tables[2].SetDataSource(listaDivisiones);
                        rd.Database.Tables[1].SetDataSource(ToDataTable(dataSend));
                        rd.Database.Tables[3].SetDataSource(ToDataTable(listMesesPtm));

                        rd.SetParameterValue("UtilidadBrutaTotal", TotalUtilidadBruta);
                        rd.SetParameterValue("UtilidadBrutaPorcentaje", (TotalUtilidadBruta / VentasNetas.Total) * 100);
                        rd.SetParameterValue("UtilidadOperacionTotal", TotalUtilidaOperacion);
                        rd.SetParameterValue("UtilidadOperacionPorcentaje", (TotalUtilidaOperacion / VentasNetas.Total) * 100);
                        rd.SetParameterValue("UtilidadNetaTotal", UtilidadNeta.Total);
                        rd.SetParameterValue("UtilidadNetaPorcentaje", (UtilidadNeta.Total / VentasNetas.Total) * 100);
                        rd.SetParameterValue("VentaTotal", TotalVentasMensual);
                        rd.SetParameterValue("GastosOperacionTotal", GastosOperacionTotal);
                        rd.SetParameterValue("MargenVsVentas", (GastosOperacionTotal / TotalVentasMensual) * 100);

                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.FICHATECNICA:
                    {
                        setMedidasReporte("HC");
                        rd = new rtpFichaTecnicaMaquinariayEquipo();
                        List<FichaTecnicaAltaDTO> datos = new List<FichaTecnicaAltaDTO>();


                        datos = (List<FichaTecnicaAltaDTO>)Session["RFichaTecnica"];

                        var enviar = datos.Select(x => new
                        {
                            horometro = x.horometro,
                            añoEquipo = x.añoEquipo,
                            Proveedor = x.Proveedor,
                            EntregaSitio = x.EntregaSitio,
                            LugarEntrega = x.LugarEntrega,
                            OrdenCompra = x.OrdenCompra,
                            CostoEquipo = x.CostoEquipo,
                            Descripcion = x.Descripcion,
                            Marca = x.Marca,
                            Modelo = x.Modelo,
                            NoSerie = x.NoSerie,
                            Arreglo = x.Arreglo,
                            MarcaMotor = x.MarcaMotor,
                            ModeloMotor = x.ModeloMotor,
                            SerieMotor = x.SerieMotor,
                            ArregloMotor = x.ArregloMotor,
                            CodicionesUso = x.CodicionesUso,
                            AdquisicionEquipo1 = x.Adquisicion == "1" ? "1" : "",
                            AdquisicionEquipo2 = x.Adquisicion == "0" ? "1" : "",
                            EquipoMayor = x.TipoEquipo == "1" ? "1" : "",
                            EquipoMenor = x.TipoEquipo == "2" ? "1" : "",
                            EquipoTransporte = x.TipoEquipo == "3" ? "1" : "",
                            Fabricacion1 = x.LugarFabricacion == "1" ? "1" : "",
                            Fabricacion2 = x.LugarFabricacion == "0" ? "1" : "",
                            Pedimento = x.Pedimento,
                            Economico = x.Economico,
                            LibreAbordo = x.LibreAbordo,
                            Garantia = x.Garantia,
                            Comentario = x.Comentario,
                            tieneSeguroSi = x.tieneSeguro ? "1" : "",
                            tieneSeguroNo = !x.tieneSeguro ? "1" : "",
                        }).ToList();

                        rd.Database.Tables[1].SetDataSource(ToDataTable(enviar));
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("FICHA TÉCNICA DE MAQUINARIA Y EQUIPO", "Gerencia de Adquisición y Renta de Maquinaria"));
                        rd.SetParameterValue("hEco", setTitleEco());
                        rd.SetParameterValue("FechaElaboracion", datos.First().fechaAdquisicion);


                        rd.SetParameterValue("Version", "Ver. 1, 01-08-2018");
                        rd.SetParameterValue("utilizacionBase", Session["RFichaTecnicaUtilizacionHoras"].ToString());

                        Session.Add("reporte", rd);

                        break;
                    }
                case ReportesEnum.CadenaProductiva:
                    {
                        setMedidasReporte("HO");
                        rd = new rptCadenaPro();
                        //  var datos = (DataTable)Session["dtReporteComparativaTipos"];

                        var array = (List<VencimientoDTO>)Session["ListaVencimiento"];

                        string firma = (string)Session["firma"];
                        string firmaVoboprm = (string)Session["firmaVobo"];
                        string firmaValidaprm = (string)Session["firmaValida"];

                        EstadoAutorizacionCadenaEnum estadoAutorizacion = (EstadoAutorizacionCadenaEnum)Session["estadoAutorizacion"];

                        var proveedor = array.Select(x => x.proveedor).Distinct().ToList();

                        rd.Database.Tables[0].SetDataSource(array.Select(x => new { factura = x.factura.ToString(), concepto = x.proveedor, monto = changeFormat(x.saldoFactura), tipoCambio = x.tipoMoneda.ToString(), centro_costos = x.nombCC, CC = x.centro_costos, iva = changeFormat(x.saldoFactura) }));
                        rd.Database.Tables[1].SetDataSource(getInfoEnca("Reporte Cadena Produtiva", "Contabilidad"));

                        rd.SetParameterValue("proveedor", string.Join(", ", proveedor));
                        rd.SetParameterValue("totalDocumentos", array.Count());
                        List<decimal> montos = new List<decimal>();
                        array.ForEach(x => montos.Add(changeFormat(x.saldoFactura)));
                        rd.SetParameterValue("montoMinimo", montos.Min().ToString("C2"));
                        rd.SetParameterValue("montoMaximo", montos.Max().ToString("C2"));


                        rd.SetParameterValue("hCC", setTitleCC());
                        rd.SetParameterValue("fechaHora", DateTime.Now.Date);

                        string estadoAutorizacionTexto = "";
                        string firmaDirector = "";
                        string firmaVobo = "";
                        string firmaValida = firmaValidaprm ?? string.Empty;

                        int directorID = 1164; // Gerardo Reina
                        switch (estadoAutorizacion)
                        {
                            case EstadoAutorizacionCadenaEnum.PENDIENTE:
                                estadoAutorizacionTexto = "Pendiente";
                                break;
                            case EstadoAutorizacionCadenaEnum.VoBo:
                                estadoAutorizacionTexto = "Autorización en espera";
                                firmaVobo = firmaVoboprm ?? string.Empty;

                                break;
                            case EstadoAutorizacionCadenaEnum.AUTORIZADA:
                                estadoAutorizacionTexto = "Autorizada";
                                firmaVobo = firmaVoboprm ?? string.Empty;
                                firmaDirector = firma ?? string.Empty;
                                break;
                            case EstadoAutorizacionCadenaEnum.RECHAZADA:
                                estadoAutorizacionTexto = "Rechazada";
                                break;
                            case EstadoAutorizacionCadenaEnum.INDEFINIDO:
                                estadoAutorizacionTexto = "Indefinido";
                                break;
                        }

                        rd.SetParameterValue("estadoAutorizacion", String.Format("Estado de autorización: {0}", estadoAutorizacionTexto));
                        rd.SetParameterValue("firmaDirector", firmaDirector);
                        rd.SetParameterValue("firmaVobo", firmaVobo);
                        rd.SetParameterValue("firmaValida", firmaValida);
                        Session.Add("reporte", rd);
                    }
                    break;
                case ReportesEnum.Gastos_Maquinaria:
                    //var datos = repComparativaTiposFactoryServices.getComparativoTiposService().getDataPrueba().Take(10).ToList();
                    //dataT.Tables.Add(ToDataTable(datos));
                    //rd = new CrystalReport4();
                    //rd.SetDataSource(dataT);
                    break;
                case ReportesEnum.Comparativa_Tipos:
                    {
                        setMedidasReporte("HC");
                        string area = Request.QueryString["area"];
                        string fechaInicio = Request.QueryString["fechaInicio"];
                        string fechaFin = Request.QueryString["fechaFin"];
                        responseString = "area=" + area + "&" + "fechaInicio=" + fechaInicio + "&" + "fechaFin=" + fechaFin;
                        var dict = HttpUtility.ParseQueryString(responseString);
                        string json = JsonConvert.SerializeObject(dict.Cast<string>().ToDictionary(k => k, v => dict[v]));

                        // RepGastosFiltrosDTO obj = JsonConvert.DeserializeObject<RepGastosFiltrosDTO>(json);

                        //  lblTittle.Text = EnumExtensions.GetDescription((ReportesEnum)reporte);

                        rd = new rptComparativaTipos();
                        var datos = (DataTable)Session["dtReporteComparativaTipos"];
                        rd.Database.Tables[0].SetDataSource(datos);
                        rd.Database.Tables[1].SetDataSource(getInfoEnca("Reporte Comparativa de Tipos", "Dirección de Maquinaria y Equipo"));
                        Session.Add("reporte", rd);

                        break;
                    }
                case ReportesEnum.captura_diaria:
                    {
                        setMedidasReporte("VC");
                        pCC = Request.QueryString["CC"];
                        pTurno = Convert.ToInt32(Request.QueryString["pTurno"]);
                        pFechaInicio = Convert.ToDateTime(Request.QueryString["pFecha"].ToString());

                        responseString = "CC=" + pCC + "&" + "turno=" + pTurno + "&" + "Fecha=" + pFechaInicio;

                        tblM_CapHorometro objHorometro = new tblM_CapHorometro
                        {
                            CC = pCC,
                            turno = pTurno,
                            Fecha = pFechaInicio
                        };


                        rd = new rptCapturaDiaria();
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Reporte de Captura diaria", "Dirección de Maquinaria y Equipo"));

                        List<CapHorometroDTO> data = (List<CapHorometroDTO>)Session["ReporteHorometro"];
                        /* List<CapHorometroDTO> data = capturaHorometroFactoryServices
                                                     .getCapturaHorometroServices()
                                                     .getReporteDiario(objHorometro);*/

                        rd.Database.Tables[1].SetDataSource(ToDataTable(data));
                        rd.SetParameterValue("hCC", setTitleCCCorto());
                        Session.Add("reporte", rd);

                        break;
                    }
                //raguilar reporte resguardo 11/04/18 
                case ReportesEnum.ReporteGralResguardo:
                    {
                        setMedidasReporte("VC");
                        string CC = Request.QueryString["CC"];
                        int tipoResguardo = Convert.ToInt32(Request.QueryString["tipoResguardo"]);
                        var listAutorizaciones = resguardoEquipoFactoryServices.getResguardoEquipoFactoryServices().GetListaAutorizacionesPendientes(CC, tipoResguardo);
                        int idUsuario = vSesiones.sesionUsuarioDTO.id;
                        var ListaCCUsuarios = usuarioFactoryServices.getUsuarioService().getCCsUsuario(idUsuario).Select(x => x.cc).ToList();
                        var resFinal = listAutorizaciones.Where(x => ListaCCUsuarios.Contains(x.Obra)).Select(x => new
                        {
                            //id = x.id,
                            NoEconomico = maquinaFactoryServices.getMaquinaServices().GetMaquinaByID(x.MaquinariaID).FirstOrDefault().noEconomico,
                            Obra = x.Obra.ToString() + "-" + centroCostosFactoryServices.getCentroCostosService().getNombreCCFix(x.Obra),
                            fechaCaptura = x.Fecha.ToShortDateString(),
                            UsuarioResguardo = x.nombEmpleado,
                            DescripcionEquipo = maquinaFactoryServices.getMaquinaServices().GetMaquinaByID(x.MaquinariaID).FirstOrDefault().grupoMaquinaria.descripcion,
                            DiasLicencia = Convert.ToString(x.fechaVencimiento.Subtract(DateTime.Today).Days),

                        });
                        rd = new rptResguardoGral();
                        rd.Database.Tables[0].SetDataSource(resFinal.ToList());
                        rd.Database.Tables[1].SetDataSource(getInfoEnca("Resguardo De Unidades", ""));//cabecera
                        string CCTxt = Request.QueryString["CCTxt"];
                        string tipoResguardoTxt = Request.QueryString["tipoResguardoTxt"];
                        if (CCTxt == "--Seleccione--")
                            CCTxt = "Todos los " + setTitleCC();
                        rd.SetParameterValue("CentroCostoText", CCTxt);
                        rd.SetParameterValue("tipoResguardoText", tipoResguardoTxt);
                        rd.SetParameterValue("hCC", setTitleCC());
                        rd.SetParameterValue("hEco", setTitleEco());
                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.minuta_reunion:
                    {
                        setMedidasReporte("HO");
                        rd = new rptMinutaReunion();
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Minuta de reunión", "Sistema de Gestión de Calidad"));

                        int minuta = int.Parse(Request.QueryString["minuta"]);
                        var empresaID = vSesiones.sesionEmpresaActual;
                        string empresaStr = Request.QueryString["empresa"];
                        if (empresaStr != null) { empresaID = int.Parse(empresaStr); }
                        var objMinuta = seguimientoAcuerdosFactoryServices.getSeguimientoAcuerdosService().getMinuta(minuta, empresaID);
                        var objMinutaPrint = seguimientoAcuerdosFactoryServices.getSeguimientoAcuerdosService().getMinutaPrint(minuta, empresaID);

                        rd.Database.Tables[1].SetDataSource(ToDataTable(objMinutaPrint));

                        rd.SetParameterValue("Fecha", Convert.ToDateTime(objMinuta.fecha).ToString("dd/MM/yyyy"));
                        rd.SetParameterValue("Lugar", objMinuta.lugar);
                        rd.SetParameterValue("Evento", objMinuta.titulo);
                        rd.SetParameterValue("Inicio", objMinuta.horaInicio);
                        rd.SetParameterValue("Termino", objMinuta.horaFin);
                        rd.SetParameterValue("Asuntos", objMinuta.descripcion ?? "");


                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.lista_asistencia:
                    {
                        setMedidasReporte("HO");
                        rd = new rptMinutaListaAsistencia();
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Lista de asistencia", "Sistema de Gestión de Calidad"));

                        int minuta = int.Parse(Request.QueryString["minuta"]);
                        var empresaID = vSesiones.sesionEmpresaActual;
                        string empresaStr = Request.QueryString["empresa"];
                        if (empresaStr != null) { empresaID = int.Parse(empresaStr); }
                        var objMinuta = seguimientoAcuerdosFactoryServices.getSeguimientoAcuerdosService().getMinuta(minuta, empresaID);
                        var objListaAsistencia = seguimientoAcuerdosFactoryServices.getSeguimientoAcuerdosService().getListaAsistenciaMinutaPrint(minuta, empresaID);

                        rd.Database.Tables[1].SetDataSource(ToDataTable(objListaAsistencia));
                        rd.SetParameterValue("Fecha", Convert.ToDateTime(objMinuta.fecha).ToString("dd/MM/yyyy"));
                        rd.SetParameterValue("Evento", objMinuta.titulo);
                        rd.SetParameterValue("Inicio", objMinuta.horaInicio);
                        rd.SetParameterValue("Termino", objMinuta.horaFin);

                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.Carga_Combustible:
                    {
                        rd = new rptCargaMensualCombustible();
                        rd.Database.Tables[1].SetDataSource(getInfoEnca("DIRECCION DE MAQUINARIA Y EQUIPO", "REPORTE DE CARGA DE COMBUSTIBLE MENSUAL"));
                        setMedidasReporte("HO");
                        string centro_costosValue = Request.QueryString["cc"];
                        pFechaInicio = Convert.ToDateTime(Request.QueryString["pFechaInicio"]);

                        var dataCommbustible = capturaCombustibleFactoryServices.getCapturaCombustiblesServices().getDataReporteCombustibleMensual(centro_costosValue, pFechaInicio);
                        var dts = (DataTable)Session["reporteCombustiblesMensual"];//getInfoRep(dataCommbustible, pFechaInicio);

                        string centro_costos = centroCostosFactoryServices.getCentroCostosService().getNombreCCFix(centro_costosValue);
                        rd.Database.Tables[0].SetDataSource(dts);

                        rd.SetParameterValue("hCC", setTitleEco());
                        rd.SetParameterValue("OBRA", centro_costos);
                        rd.SetParameterValue("MES", pFechaInicio.ToString("MMMM", CultureInfo.CreateSpecificCulture("es")).ToUpper());
                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.redimiento_combustible:
                    {
                        setMedidasReporte("HO");
                        rd = new rptRendimientroCombustible();
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("REPORTE DE RENDIMIENTO DE COMBUSTIBLE", "GERENCIA DE MAQUINARIA Y EQUIPO"));
                        string cc = Request.QueryString["cc"];
                        pFechaInicio = Convert.ToDateTime(Request.QueryString["pFechaInicio"]);
                        pFechaFin = Convert.ToDateTime(Request.QueryString["pFechaFin"]);
                        var rendimiento = capturaCombustibleFactoryServices.getCapturaCombustiblesServices().getReporteRendimientoComb(cc, pFechaInicio, pFechaFin);
                        string CCName = centroCostosFactoryServices.getCentroCostosService().getNombreCCFix(cc);
                        rd.Database.Tables[1].SetDataSource(ToDataTable(rendimiento));

                        rd.SetParameterValue("CentroCostos", CCName);
                        rd.SetParameterValue("hCC", setTitleCC() + ":");
                        rd.SetParameterValue("hEco", setTitleEco() + ":");
                        string RangoFechas = "";
                        var Mes = pFechaInicio.ToString("MMMM", CultureInfo.CreateSpecificCulture("es"));



                        RangoFechas = "Relación de combustible del día" + pFechaInicio.Day + " al " + pFechaFin.Day + " del mes " + Mes + " de " + pFechaFin.Year;
                        rd.SetParameterValue("RangoFechas", RangoFechas);
                        Session.Add("reporte", rd);

                        break;
                    }
                case ReportesEnum.captura_horometros:
                    {
                        setMedidasReporte("VC");
                        rd = new rptCapturaHorometro();
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("REPORTE CAPTURA DE HOROMETROS", "GERENCIA DE MAQUINARIA Y EQUIPO"));

                        var cc = string.IsNullOrEmpty(Request.QueryString["pCC"].ToString()) ? "0" : Request.QueryString["pCC"].ToString();
                        pCC = cc;
                        string CentroCostosNombre = "";
                        if (pCC != "0")
                        {
                            CentroCostosNombre = centroCostosFactoryServices.getCentroCostosService().getNombreAreaCuent(pCC);
                        }

                        pTurno = int.Parse(Request.QueryString["pTurno"]);
                        pFechaInicio = Convert.ToDateTime(Request.QueryString["pFechaInicio"]);
                        pFechaFin = Convert.ToDateTime(Request.QueryString["pFechaFin"]);
                        pEconomico = Request.QueryString["pEconomico"].ToString();
                        List<CapHorometroDTO> horometros = new List<CapHorometroDTO>();
                        horometros = (List<CapHorometroDTO>)Session["ReporteHorometro"];
                        //  DataTable c = ToDataTable(horometros);
                        rd.Database.Tables[1].SetDataSource(horometros.OrderBy(x => x.Fecha).ThenBy(x => x.Horometro).ThenBy(x => x.turno));

                        rd.SetParameterValue("nomCC", CentroCostosNombre);
                        rd.SetParameterValue("hCC", setTitleCC() + ":");
                        rd.SetParameterValue("hEco", setTitleEco() + ":");
                        Session.Add("reporte", rd);

                        break;
                    }
                case ReportesEnum.rptEconomicosSinHorometros:
                    {
                        setMedidasReporte("VC");
                        rd = new rptEconomicosSinHorometros();

                        var listaEconomicos = (List<EconomicosSinHorometrosDTO>)Session["ReporteEconomicosSinHorometros"];
                        var data = listaEconomicos.Select(x => new
                        {
                            CC = x.ccDesc,
                            Economico = x.economico,
                            HorometroAcumulado = x.horometroAcumulado,
                            HorometroAcumuladoDesc = x.horometroAcumuladoDesc,
                            Fecha = x.fechaString,
                            Desfase = x.diasTranscurridos, //Se utiliza la propiedad "Desfase" para los días transcurridos para aprovechar el dataset que ya tiene el reporte.
                        }).ToList();

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("REPORTE ECONÓMICOS SIN HORÓMETROS", ""));
                        rd.Database.Tables[1].SetDataSource(data);

                        rd.SetParameterValue("HorasTrabajo", data.Sum(x => x.HorometroAcumulado).ToString("N"));

                        Session.Add("reporte", rd);

                        break;
                    }
                case ReportesEnum.captura_combustibles:
                    {
                        setMedidasReporte("VC");
                        rd = new rptCapturaCombustibles();
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("REPORTE CAPTURA DE COMBUSTIBLES", "GERENCIA DE MAQUINARIA Y EQUIPO"));
                        var cc = string.IsNullOrEmpty(Request.QueryString["pCC"].ToString()) ? "0" : Request.QueryString["pCC"].ToString();
                        pCC = cc;
                        pTurno = int.Parse(Request.QueryString["pTurno"]);
                        pFechaInicio = Convert.ToDateTime(Request.QueryString["pFechaInicio"]);
                        pFechaFin = Convert.ToDateTime(Request.QueryString["pFechaFin"]);
                        pEconomico = Request.QueryString["pEconomico"].ToString();
                        string CentroCostosNombre = "";
                        if (pCC != "0")
                        {
                            CentroCostosNombre = centroCostosFactoryServices.getCentroCostosService().getNombreCCFix(pCC);
                        }

                        List<capCombusitbleDTO> combustibles = capturaCombustibleFactoryServices.getCapturaCombustiblesServices().getTableInfoCombustibles(pCC, pTurno, pFechaInicio, pFechaFin, pEconomico).Select(c => new capCombusitbleDTO
                        {

                            formatFecha = c.fecha.ToString("dd/MM/yyyy"),
                            Economico = c.Economico,
                            volumen_carga = c.volumne_carga,
                            turno = c.turno,
                            id = c.id,
                            Carga1 = c.Carga1
                        }).ToList();
                        string Litros = combustibles.Sum(x => x.volumen_carga).ToString("0,0.0", CultureInfo.InvariantCulture);


                        rd.Database.Tables[1].SetDataSource(ToDataTable(combustibles));
                        rd.SetParameterValue("nomCC", CentroCostosNombre);
                        rd.SetParameterValue("TotalLitros", Litros);
                        rd.SetParameterValue("hCC", setTitleCC().ToUpper() + ":");
                        rd.SetParameterValue("hEco", setTitleEco());
                        Session.Add("reporte", rd);

                        break;
                    }
                case ReportesEnum.Solicitud_Equipo:
                    {
                        //setMedidasReporte("HorizontalCarta_NoModal");
                        setMedidasReporte("HO");
                        rd = new rptElaboracionSolicitudEquipo();
                        List<SolicitudEquipoDTO> rptData = (List<SolicitudEquipoDTO>)Session["rptSolicitudEquipo"];

                        var autorizadores = (AutorizadoresIDDTO)Session["rptAutorizadores"];
                        var FolioSolicitud = "";

                        if (rptData != null)
                        {
                            FolioSolicitud = rptData.FirstOrDefault().Folio;
                        }
                        var AutorizadorElabora = usuarioFactoryServices.getUsuarioService().ListUsersById(autorizadores.usuarioElaboro)
                            .Select(x => new { nombre = (x.nombre + " " + x.apellidoPaterno + " " + x.apellidoMaterno) }).FirstOrDefault();

                        var AutorizadorGerente = usuarioFactoryServices.getUsuarioService()
                            .ListUsersById(autorizadores.gerenteObra)
                            .Select(x => new { nombre = (x.nombre + " " + x.apellidoPaterno + " " + x.apellidoMaterno) }).FirstOrDefault();


                        var AutorizadorGerenteDirector = usuarioFactoryServices.getUsuarioService()
                          .ListUsersById(autorizadores.GerenteDirector)
                          .Select(x => new { nombre = (x.nombre + " " + x.apellidoPaterno + " " + x.apellidoMaterno) }).FirstOrDefault();

                        var AutorizadorDirector = usuarioFactoryServices.getUsuarioService()
                            .ListUsersById(autorizadores.directorDivision)
                            .Select(x => new { nombre = (x.nombre + " " + x.apellidoPaterno + " " + x.apellidoMaterno) }).FirstOrDefault();

                        var AutorizadorServicios = usuarioFactoryServices.getUsuarioService()
                            .ListUsersById(autorizadores.directorServicios)
                            .Select(x => new { nombre = (x.nombre + " " + x.apellidoPaterno + " " + x.apellidoMaterno) }).FirstOrDefault();

                        var AutorizadorDireccion = usuarioFactoryServices.getUsuarioService()
                            .ListUsersById(autorizadores.altaDireccion)
                            .Select(x => new { nombre = (x.nombre + " " + x.apellidoPaterno + " " + x.apellidoMaterno) }).FirstOrDefault();


                        string CadenaDireccion = "";
                        string CadenaDirector = "";
                        string CadenaGerente = "";
                        string CadenaElabora = "";
                        string CadenaGerenteDirector = "";
                        string CadenaServicios = "";

                        if (Session["rptCadenaAutorizacion"] != null)
                        {
                            var cadena = (CadenaAutorizacionDTO)Session["rptCadenaAutorizacion"];

                            CadenaDireccion = cadena.CadenaDireccion == null ? "" : cadena.CadenaDireccion;
                            CadenaDirector = cadena.CadenaDirector == null ? "" : cadena.CadenaDirector;
                            CadenaGerente = cadena.CadenaGerente == null ? "" : cadena.CadenaGerente;
                            CadenaElabora = cadena.CadenaElabora == null ? "" : cadena.CadenaElabora;
                            CadenaGerenteDirector = cadena.CadenaGerenteDirector == null ? "" : cadena.CadenaGerenteDirector;
                            CadenaServicios = cadena.CadenaServicios == null ? "" : cadena.CadenaServicios;

                        }
                        var CC = Request.QueryString["pCC"];

                        pCC = Request.QueryString["pCC"];

                        pNombreCC = centroCostosFactoryServices.getCentroCostosService().getNombreCCFix(pCC);

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("SOLICITUD DE EQUIPO", "GERENCIA DE MAQUINARIA Y EQUIPO"));
                        rd.Database.Tables[1].SetDataSource(ToDataTable(rptData));
                        rd.SetParameterValue("hCC", setTitleCC().ToUpper() + ":");
                        rd.SetParameterValue("CentroCostos", pNombreCC);
                        rd.SetParameterValue("VersionDocumento", "Ver. 1, 01-08-2018");

                        rd.SetParameterValue("Elaboro", AutorizadorElabora.nombre);
                        rd.SetParameterValue("Solicito", AutorizadorGerente.nombre);
                        rd.SetParameterValue("valido", AutorizadorDirector.nombre);
                        rd.SetParameterValue("autorizo", AutorizadorDireccion.nombre);
                        rd.SetParameterValue("Valido2", AutorizadorGerenteDirector.nombre);
                        rd.SetParameterValue("Valido3", AutorizadorServicios.nombre);

                        rd.SetParameterValue("CadenaDireccion", CadenaGerenteDirector);
                        rd.SetParameterValue("CadenaDirector", CadenaDirector);
                        rd.SetParameterValue("CadenaGerente", CadenaGerente);
                        rd.SetParameterValue("CadenaElabora", CadenaElabora);
                        rd.SetParameterValue("CadenaGerenteDirector", CadenaGerenteDirector);
                        rd.SetParameterValue("CadenaServicios", CadenaServicios);

                        rd.SetParameterValue("FolioDocumento", FolioSolicitud);


                        Session.Add("reporte", rd);
                    }
                    break;
                case ReportesEnum.rh_bono_plantilla_cc:
                    {
                        setMedidasReporte("NOMODAL");
                        rd = new rptPlantillaCcBono();
                        var id = Request.QueryString["fId"].ParseInt();
                        var plan = bonofs.getBonoService().getPlantilla(id);
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("", ""));
                        rd.Database.Tables[1].SetDataSource(plan.listAutorizadores.Select(a => new
                        {
                            aprobadorNombre = string.Format("{0} {1} {2}", a.aprobador.nombre, a.aprobador.apellidoPaterno, a.aprobador.apellidoMaterno),
                            aprobadorPuesto = a.aprobadorPuesto,
                            tipo = a.tipo,
                            fecha = a.fecha,
                            firma = a.firma ?? "S/F",
                            comentario = a.comentario ?? string.Empty,
                            estatus = EnumExtensions.GetDescription((authEstadoEnum)a.estatus)
                        }).ToList());
                        rd.Database.Tables[2].SetDataSource(plan.listDetalle.Select(d => new
                        {
                            puestoID = d.puesto,
                            puesto = d.puestoNombre,
                            monto = d.monto.ToString("C", CultureInfo.CreateSpecificCulture("es-MX")),
                            periodicidad = EnumExtensions.GetDescription((Tipo_Nomina2Enum)d.periodicidad),
                            tipoNomina = d.tipoNominaCve == 1 ? "SEMANAL" : d.tipoNominaCve == 4 ? "QUINCENAL" : "MENSUAL"
                        }).ToList());
                        rd.Database.Tables[3].SetDataSource(new List<object>() { new  { 
                            cc = plan.ccNombre.Trim(),
                            fechaInicio = plan.fechaInicio.ToShortDateString(),
                            fechaFin = plan.fechaFin.ToShortDateString(),
                            fechaCaptura = plan.fechaCaptura.ToShortDateString(),
                            estatus = EnumExtensions.GetDescription((authEstadoEnum)plan.estatus),
                            usuarioCapturo = string.Format("{0} {1} {2}", plan.usuarioCapturo.nombre, plan.usuarioCapturo.apellidoPaterno, plan.usuarioCapturo.apellidoMaterno)
                        }});
                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.rptBN_Evaluacion:
                    {
                        setMedidasReporte("NOMODAL");
                        rd = new rptBN_Evaluacion();
                        var id = Request.QueryString["fId"].ParseInt();
                        var plan = bonofs.getBonoService().getEvaluacionByID(id);
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("", ""));
                        rd.Database.Tables[1].SetDataSource(plan.listAutorizadores.Select(a => new
                        {
                            aprobadorNombre = string.Format("{0} {1} {2}", a.aprobador.nombre, a.aprobador.apellidoPaterno, a.aprobador.apellidoMaterno),
                            aprobadorPuesto = a.aprobadorPuesto,
                            tipo = a.tipo,
                            fecha = a.fecha,
                            firma = a.firma ?? "S/F",
                            comentario = a.comentario ?? string.Empty,
                            estatus = EnumExtensions.GetDescription((authEstadoEnum)a.estatus)
                        }).ToList());
                        rd.Database.Tables[2].SetDataSource(plan.listDetalle.Select(d => new
                        {
                            puestoID = 0,
                            puesto = "",
                            monto = 0,
                            periodicidad = "",
                            tipoNomina = ""
                        }).ToList());
                        rd.Database.Tables[3].SetDataSource(new List<object>() { new  { 
                            cc = plan.plantilla.ccNombre.Trim(),
                            fechaInicio = plan.fechaInicio.ToShortDateString(),
                            fechaFin = plan.fechaFin.ToShortDateString(),
                            fechaCaptura = plan.fecha.ToShortDateString(),
                            estatus = plan.periodo,
                            usuarioCapturo = string.Format("{0} {1} {2}", plan.usuarioEvaluo.nombre, plan.usuarioEvaluo.apellidoPaterno, plan.usuarioEvaluo.apellidoMaterno)
                        }});
                        rd.Database.Tables[4].SetDataSource(plan.listDetalle.Where(x => x.porcentaje_Asig != 0).Select(d => new
                        {
                            cve = d.cve_Emp,
                            nombre = d.nombre_Emp,
                            puesto = d.puesto_Emp,
                            tNom = d.tipo_Nom,
                            sbase = d.base_Emp.ToString("C2"),
                            comp = d.complemento_Emp.ToString("C2"),
                            totalNom = d.total_Nom.ToString("C2"),
                            totalMensual = d.total_Mensual.ToString("C2"),
                            bonoFC = d.bono_FC.ToString("C2"),
                            bonoAdmin = d.bono_Emp.ToString("C2"),
                            porcentaje = d.porcentaje_Asig,
                            montoAsignado = d.monto_Asig.ToString("C2"),
                            conBono = d.con_Bono.ToString("C2"),
                            periodicidad = d.periodicidad

                        }).ToList());
                        rd.SetParameterValue("nomina", plan.tipoNomina == 1 ? "Semanal" : "Quincenal");
                        Session.Add("reporte", rd);
                        Session["downloadPDF"] = null;
                        break;
                    }

                case ReportesEnum.Formato_Cambio:
                    {
                        setMedidasReporte("HO");
                        rd = new rptFormatoCambio();
                        var dto = new List<tblRH_AutorizacionFormatoCambio>();
                        var objEmploados = capturaFormatoCambioFactoryServices.getFormatoCambioService().getListFormatosCambioPendientes(int.Parse(Request.QueryString["fId"]), "", 0, 1, "", 0);
                        var objEmploadosEnkontrol = new tblRH_FormatoCambio()
                        {
                            Ape_Materno = objEmploados.FirstOrDefault().Ape_Materno,
                            Ape_Paterno = objEmploados.FirstOrDefault().Ape_Paterno,
                            Aprobado = objEmploados.FirstOrDefault().Aprobado,
                            Bono = objEmploados.FirstOrDefault().Bono,
                            BonoAnt = objEmploados.FirstOrDefault().BonoAnt,
                            CCAnt = objEmploados.FirstOrDefault().CCAnt,
                            CCAntID = objEmploados.FirstOrDefault().CCAntID,
                            ComplementoAnt = objEmploados.FirstOrDefault().ComplementoAnt,
                            Fecha_Alta = objEmploados.FirstOrDefault().Fecha_Alta,
                            PuestoAnt = objEmploados.FirstOrDefault().PuestoAnt,
                            SalarioAnt = objEmploados.FirstOrDefault().SalarioAnt,
                            CamposCambiados = objEmploados.FirstOrDefault().CamposCambiados,
                            CcID = objEmploados.FirstOrDefault().CcID,
                            Clave_Empleado = objEmploados.FirstOrDefault().Clave_Empleado,
                            Clave_Jefe_Inmediato = objEmploados.FirstOrDefault().Clave_Jefe_Inmediato,
                            Complemento = objEmploados.FirstOrDefault().Complemento,
                            editable = objEmploados.FirstOrDefault().editable,
                            fechaCaptura = objEmploados.FirstOrDefault().fechaCaptura,
                            FechaInicioCambio = objEmploados.FirstOrDefault().FechaInicioCambio,
                            folio = objEmploados.FirstOrDefault().folio,
                            id = objEmploados.FirstOrDefault().id,
                            InicioNomina = objEmploados.FirstOrDefault().InicioNomina,
                            Justificacion = objEmploados.FirstOrDefault().Justificacion,
                            Nombre = objEmploados.FirstOrDefault().Nombre,
                            Nombre_Jefe_Inmediato = objEmploados.FirstOrDefault().Nombre_Jefe_InmediatoAnt,
                            nomUsuarioCap = objEmploados.FirstOrDefault().nomUsuarioCap,
                            PuestoID = objEmploados.FirstOrDefault().PuestoID,
                            Rechazado = objEmploados.FirstOrDefault().Rechazado,
                            RegistroPatronal = objEmploados.FirstOrDefault().RegistroPatronalAnt,
                            RegistroPatronalID = objEmploados.FirstOrDefault().RegistroPatronalID,
                            Salario_Base = objEmploados.FirstOrDefault().Salario_Base,
                            TipoNomina = objEmploados.FirstOrDefault().TipoNominaAnt,
                            TipoNominaID = objEmploados.FirstOrDefault().TipoNominaID,
                            usuarioCap = objEmploados.FirstOrDefault().usuarioCap,
                            Puesto = objEmploados.FirstOrDefault().PuestoAnt,
                            CC = objEmploados.FirstOrDefault().CCAntID + "-" + objEmploados.FirstOrDefault().CCAnt,
                            TipoNominaAnt = objEmploados.FirstOrDefault().TipoNominaAnt,
                            Departamento = objEmploados.FirstOrDefault().Departamento,
                            DepartamentoAnterior = objEmploados.FirstOrDefault().DepartamentoAnterior,
                            descCategoria = objEmploados.FirstOrDefault().descCategoria,
                            descLineaNegocios = objEmploados.FirstOrDefault().descLineaNegocios,
                            descCategoriaAnterior = objEmploados.FirstOrDefault().descCategoriaAnterior,
                            descLineaNegociosAnterior = objEmploados.FirstOrDefault().descLineaNegociosAnterior,
                        };
                        string TipoNomina = "";
                        string SalarioMesEmpleadoCambio = "";
                        string ComplementoMesEmpleadoCambio = "";
                        string BonoMesEmpleadoCambio = "";

                        foreach (var objEmp in objEmploados)
                        {
                            objEmp.CC = objEmp.CcID + " - " + objEmp.CC;
                            if (objEmp.TipoNominaID == (int)Tipo_NominaEnum.SEMANAL)
                            {
                                TipoNomina = "Semana";

                                SalarioMesEmpleadoCambio = Math.Round(((Convert.ToDouble(objEmp.Salario_Base) / 7) * 30.4), 2).ToString();
                                ComplementoMesEmpleadoCambio = Math.Round(((Convert.ToDouble(objEmp.Complemento) / 7) * 30.4), 2).ToString();
                                BonoMesEmpleadoCambio = Math.Round(((Convert.ToDouble(objEmp.Bono) / 7) * 30.4), 2).ToString();
                            }
                            else
                            {
                                TipoNomina = "Quincena";

                                SalarioMesEmpleadoCambio = Math.Round((Convert.ToDouble(objEmp.Salario_Base) * 2), 2).ToString();
                                ComplementoMesEmpleadoCambio = Math.Round((Convert.ToDouble(objEmp.Complemento) * 2), 2).ToString();
                                BonoMesEmpleadoCambio = Math.Round((Convert.ToDouble(objEmp.Bono) * 2), 2).ToString();
                            }
                            var objAutorizacion = capturaAutorizacionFormatoCambioService.getAutorizacionFormatoCambioService().getAutorizacion(objEmp.id);
                            int formatoCambio = 0;
                            if (objAutorizacion.Count > 0)
                                formatoCambio = objAutorizacion.FirstOrDefault().Id_FormatoCambio;
                            var dto2 = new List<tblRH_AutorizacionFormatoCambio>();
                            for (int i = 1; i <= 10; i++)
                            {
                                var d = new tblRH_AutorizacionFormatoCambio();
                                d.Orden = i;
                                switch (i)
                                {
                                    case 1:
                                        d.Responsable = "Gerente Actual";
                                        d.PuestoAprobador = "Responsable del Centro de Costos Actual";
                                        d.Orden = 1;
                                        d.Nombre_Aprobador = "";
                                        d.Firma = "SF";
                                        d.Id_FormatoCambio = formatoCambio;

                                        break;
                                    case 2:
                                        d.Responsable = "Gerente Recibe";
                                        d.PuestoAprobador = "Responsable del Centro de Costos Recibe";
                                        d.Orden = 2;
                                        d.Nombre_Aprobador = "";
                                        d.Firma = "SF";
                                        d.Id_FormatoCambio = formatoCambio;

                                        break;
                                    case 3:
                                        d.Responsable = "VoBo";
                                        d.PuestoAprobador = "Capital Humano 1";
                                        d.Orden = 3;
                                        d.Nombre_Aprobador = "";
                                        d.Firma = "SF";
                                        d.Id_FormatoCambio = formatoCambio;
                                        break;
                                    case 4:
                                        d.Responsable = "VoBo";
                                        d.PuestoAprobador = "Capital Humano 2";
                                        d.Orden = 4;
                                        d.Nombre_Aprobador = "";
                                        d.Firma = "SF";
                                        d.Id_FormatoCambio = formatoCambio;
                                        break;
                                    case 5:
                                        d.Responsable = "Autorización 1";
                                        d.PuestoAprobador = "Gerente/SubDirector/Director de Área 1";
                                        d.Orden = 5;
                                        d.Nombre_Aprobador = "";
                                        d.Firma = "SF";
                                        d.Id_FormatoCambio = formatoCambio;
                                        break;
                                    case 6:
                                        d.Responsable = "Autorización 1";
                                        d.PuestoAprobador = "Gerente/SubDirector/Director de Área 2";
                                        d.Orden = 6;
                                        d.Nombre_Aprobador = "";
                                        d.Firma = "SF";
                                        d.Id_FormatoCambio = formatoCambio;
                                        break;
                                    case 7:
                                        d.Responsable = "Autorización 2";
                                        d.PuestoAprobador = "Director de Línea de Negocios 1";
                                        d.Orden = 7;
                                        d.Nombre_Aprobador = "";
                                        d.Firma = "SF";
                                        d.Id_FormatoCambio = formatoCambio;
                                        break;
                                    case 8:
                                        d.Responsable = "Autorización 2";
                                        d.PuestoAprobador = "Director de Línea de Negocios 2";
                                        d.Orden = 8;
                                        d.Nombre_Aprobador = "";
                                        d.Firma = "SF";
                                        d.Id_FormatoCambio = formatoCambio;
                                        break;
                                    case 9:
                                        d.Responsable = "Autorización 3";
                                        d.PuestoAprobador = "Alta Dirección 1";
                                        d.Orden = 9;
                                        d.Nombre_Aprobador = "";
                                        d.Firma = "SF";
                                        d.Id_FormatoCambio = formatoCambio;
                                        break;
                                    case 10:
                                        d.Responsable = "Autorización 3";
                                        d.PuestoAprobador = "Alta Dirección 2";
                                        d.Orden = 10;
                                        d.Nombre_Aprobador = "";
                                        d.Firma = "SF";
                                        d.Id_FormatoCambio = formatoCambio;
                                        break;
                                    default:
                                        break;
                                }
                                dto2.Add(d);
                            }
                            bool bandera = false;

                            for (int i = 0; i < dto2.ToArray().Length; i++)
                            {
                                bandera = false;
                                foreach (var item in objAutorizacion)
                                {
                                    if (dto2[i].Responsable == item.Responsable && dto2[i].PuestoAprobador == item.PuestoAprobador)
                                    {
                                        item.PuestoAprobador = item.PuestoAprobador.TrimEnd('1');
                                        item.PuestoAprobador = item.PuestoAprobador.TrimEnd('2');

                                        dto2[i] = item;
                                        dto.Add(dto2[i]);

                                        bandera = true;
                                    }
                                }

                                if (!bandera)
                                {
                                    dto2[i].PuestoAprobador = dto2[i].PuestoAprobador.TrimEnd('1');
                                    dto2[i].PuestoAprobador = dto2[i].PuestoAprobador.TrimEnd('2');
                                    dto.Add(dto2[i]);
                                }

                            }

                        }
                        string SalarioMesEmpleadoOriginal = "";
                        string ComplementoMesEmpleadoOriginal = "";
                        string BonoMesEmpleadoOriginal = "";
                        if ((objEmploadosEnkontrol.TipoNominaAnt == "QUINCENAL" ? 4 : 1) == (int)Tipo_NominaEnum.SEMANAL)
                        {

                            SalarioMesEmpleadoOriginal = Math.Round(((Convert.ToDouble(objEmploadosEnkontrol.SalarioAnt) / 7) * 30.4), 2).ToString();
                            ComplementoMesEmpleadoOriginal = Math.Round(((Convert.ToDouble(objEmploadosEnkontrol.ComplementoAnt) / 7) * 30.4), 2).ToString();
                            BonoMesEmpleadoOriginal = Math.Round(((Convert.ToDouble(objEmploadosEnkontrol.BonoAnt) / 7) * 30.4), 2).ToString();

                        }
                        else
                        {
                            BonoMesEmpleadoOriginal = Math.Round((Convert.ToDouble(objEmploadosEnkontrol.BonoAnt) * 2), 2).ToString();
                            SalarioMesEmpleadoOriginal = Math.Round((Convert.ToDouble(objEmploadosEnkontrol.SalarioAnt) * 2), 2).ToString();
                            ComplementoMesEmpleadoOriginal = Math.Round((Convert.ToDouble(objEmploadosEnkontrol.ComplementoAnt) * 2), 2).ToString();

                            // setParametro("SalarioMesEmpleadoOriginal", );
                            // setParametro("ComplementoMesEmpleadoOriginal", Math.Round((Convert.ToDouble(objEmploadosEnkontrol.ComplementoAnt) * 2), 2));
                        }

                        int empresaActual = vSesiones.sesionEmpresaActual;

                        var lstEnkontrol = new List<tblRH_FormatoCambio>() { objEmploadosEnkontrol };
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("FORMATO DE CAMBIO", "CAPITAL HUMANO"));
                        rd.Database.Tables[1].SetDataSource(dto.ToList());
                        rd.Database.Tables[2].SetDataSource(ToDataTable(objEmploados));
                        rd.Database.Tables[3].SetDataSource(ToDataTable(lstEnkontrol));

                        rd.SetParameterValue("TipoNomina", TipoNomina);
                        rd.SetParameterValue("SalarioMesEmpleadoCambio", (SalarioMesEmpleadoCambio));
                        rd.SetParameterValue("ComplementoMesEmpleadoCambio", (ComplementoMesEmpleadoCambio));
                        rd.SetParameterValue("BonoMesEmpleadoCambio", (BonoMesEmpleadoCambio));
                        rd.SetParameterValue("SalarioMesEmpleadoOriginal", (SalarioMesEmpleadoOriginal));
                        rd.SetParameterValue("ComplementoMesEmpleadoOriginal", (ComplementoMesEmpleadoOriginal));
                        rd.SetParameterValue("BonoMesEmpleadoOriginal", (BonoMesEmpleadoOriginal));
                        rd.SetParameterValue("NombreCompleto", objEmploadosEnkontrol.Nombre + " " + objEmploadosEnkontrol.Ape_Paterno + " " + objEmploadosEnkontrol.Ape_Materno);
                        rd.SetParameterValue("hCC", setTitleCC() + ":");
                        rd.SetParameterValue("DepartamentoAnterior", objEmploadosEnkontrol.DepartamentoAnterior ?? " ");
                        rd.SetParameterValue("Departamento", objEmploadosEnkontrol.Departamento ?? " ");
                        rd.SetParameterValue("descCategoria", objEmploadosEnkontrol.descCategoria ?? " ");
                        rd.SetParameterValue("descLineaNegocio", objEmploadosEnkontrol.descLineaNegocios ?? " ");
                        rd.SetParameterValue("descCategoriaAnterior", objEmploadosEnkontrol.descCategoriaAnterior ?? " ");
                        rd.SetParameterValue("descLineaNegocioAnterior", objEmploadosEnkontrol.descLineaNegociosAnterior ?? " ");
                        rd.SetParameterValue("empresaActual", empresaActual);

                        Session.Add("reporte", rd);
                    }
                    break;
                case ReportesEnum.Solicitud_Equipo_Asignado:
                    {
                        setMedidasReporte("HorizontalCarta_NoModal");
                        rd = new rptElaboracionSolicitudEquipoAsignado();
                        var autorizadoresA = (AutorizadoresIDDTO)Session["rptAutorizadores"];
                        List<SolicitudEquipoDTO> rptData1 = (List<SolicitudEquipoDTO>)Session["rptSolicitudEquipo"];
                        var FolioSolicitud = "";

                        if (rptData1 != null)
                        {
                            FolioSolicitud = rptData1.FirstOrDefault().Folio;
                        }

                        //falta nueva autorizacion....
                        var Asigna = Session["rptAsigna"] != null ? Session["rptAsigna"].ToString() : "";
                        string nombre = "";
                        if (Asigna != null)
                        {
                            nombre = Asigna;
                        }


                        var AutorizadorElaboraA = usuarioFactoryServices.getUsuarioService().ListUsersById(autorizadoresA.usuarioElaboro)
                               .Select(x => new { nombre = (x.nombre + " " + x.apellidoPaterno + " " + x.apellidoMaterno) }).FirstOrDefault();

                        var AutorizadorGerenteA = usuarioFactoryServices.getUsuarioService()
                            .ListUsersById(autorizadoresA.gerenteObra)
                            .Select(x => new { nombre = (x.nombre + " " + x.apellidoPaterno + " " + x.apellidoMaterno) }).FirstOrDefault();

                        var AutorizadorDirectorA = usuarioFactoryServices.getUsuarioService()
                            .ListUsersById(autorizadoresA.directorDivision)
                            .Select(x => new { nombre = (x.nombre + " " + x.apellidoPaterno + " " + x.apellidoMaterno) }).FirstOrDefault();

                        var AutorizadorGerenteDirector = usuarioFactoryServices.getUsuarioService()
                          .ListUsersById(autorizadoresA.GerenteDirector)
                          .Select(x => new { nombre = (x.nombre + " " + x.apellidoPaterno + " " + x.apellidoMaterno) }).FirstOrDefault();

                        var AutorizadorServicios = usuarioFactoryServices.getUsuarioService()
                          .ListUsersById(autorizadoresA.directorServicios)
                          .Select(x => new { nombre = (x.nombre + " " + x.apellidoPaterno + " " + x.apellidoMaterno) }).FirstOrDefault();

                        var AutorizadorDireccionA = usuarioFactoryServices.getUsuarioService()
                            .ListUsersById(autorizadoresA.altaDireccion)
                            .Select(x => new { nombre = (x.nombre + " " + x.apellidoPaterno + " " + x.apellidoMaterno) }).FirstOrDefault();
                        pCC = Request.QueryString["pCC"];

                        pNombreCC = centroCostosFactoryServices.getCentroCostosService().getNombreCCFix(pCC);

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("SOLICITUD DE EQUIPO", "DIRECCION DE MAQUINARIA Y EQUIPO"));
                        rd.Database.Tables[1].SetDataSource(ToDataTable(rptData1));


                        if (Session["rptCadenaAutorizacion"] != null)
                        {
                            var cadena = (CadenaAutorizacionDTO)Session["rptCadenaAutorizacion"];

                            rd.SetParameterValue("CadenaDireccion", cadena.CadenaDireccion == null ? "" : cadena.CadenaDireccion);
                            rd.SetParameterValue("CadenaDirector", cadena.CadenaDirector == null ? "" : cadena.CadenaDirector);
                            rd.SetParameterValue("CadenaGerente", cadena.CadenaGerente == null ? "" : cadena.CadenaGerente);
                            rd.SetParameterValue("CadenaElabora", cadena.CadenaElabora == null ? "" : cadena.CadenaElabora);
                            rd.SetParameterValue("CadenaGerenteDirector", cadena.CadenaGerenteDirector == null ? "" : cadena.CadenaGerenteDirector);
                            rd.SetParameterValue("CadenaServicios", cadena.CadenaServicios == null ? "" : cadena.CadenaServicios);
                        }
                        else
                        {
                            rd.SetParameterValue("CadenaDireccion", "");
                            rd.SetParameterValue("CadenaDirector", "");
                            rd.SetParameterValue("CadenaGerente", "");
                            rd.SetParameterValue("CadenaElabora", "");
                            rd.SetParameterValue("CadenaGerenteDirector", "");
                            rd.SetParameterValue("CadenaServicios", "");
                        }

                        rd.SetParameterValue("CentroCostos", pNombreCC);
                        rd.SetParameterValue("hCC", setTitleCC().ToUpper() + ":");
                        rd.SetParameterValue("Elaboro", AutorizadorElaboraA.nombre);
                        rd.SetParameterValue("Solicito", AutorizadorGerenteA.nombre);
                        rd.SetParameterValue("valido", AutorizadorDirectorA.nombre);
                        rd.SetParameterValue("autorizo", AutorizadorDireccionA.nombre);
                        rd.SetParameterValue("Asigno", nombre);
                        rd.SetParameterValue("Valido2", AutorizadorGerenteDirector.nombre);
                        rd.SetParameterValue("Valido3", AutorizadorServicios.nombre);
                        rd.SetParameterValue("FolioDocumento", FolioSolicitud);

                        rd.SetParameterValue("VersionDocumento", "Ver. 1, 01-08-2018");


                        Session.Add("reporte", rd);
                        break;
                    }

                case ReportesEnum.CONTROLDEEQUIPOS:
                    {
                        Session["PDFControles"] = null;

                        var pidControl = int.Parse(Request.QueryString["pidRegistro"]);
                        var tipoControl = int.Parse(Request.QueryString["ptipoControl"]);
                        var idAsignacion = Int32.Parse(Request.QueryString["idAsignacion"]);

                        setMedidasReporte("VC");
                        setControlEnvio(pidControl, tipoControl);

                        Stream stream = rd.ExportToStream(ExportFormatType.PortableDocFormat);
                        stream.Seek(0, SeekOrigin.Begin);

                        byte[] downloadPDF = null;
                        using (var streamReader = new MemoryStream())
                        {
                            stream.CopyTo(streamReader);
                            downloadPDF = streamReader.ToArray();

                        }
                        if (Session["PDFControles"] != null)
                        {
                            List<byte[]> files = (List<byte[]>)Session["PDFControles"];
                            files.Add(downloadPDF);
                            Session["PDFControles"] = files;
                        }
                        else
                        {
                            List<byte[]> files = new List<byte[]>();
                            files.Add(downloadPDF);
                            Session["PDFControles"] = files;
                        }
                        setMcontrolCalidad(idAsignacion, tipoControl);
                        stream = rd.ExportToStream(ExportFormatType.PortableDocFormat);
                        stream.Seek(0, SeekOrigin.Begin);
                        downloadPDF = null;
                        using (var streamReader = new MemoryStream())
                        {
                            stream.CopyTo(streamReader);
                            downloadPDF = streamReader.ToArray();

                        }
                        if (Session["PDFControles"] != null)
                        {
                            List<byte[]> files = (List<byte[]>)Session["PDFControles"];
                            files.Add(downloadPDF);
                            Session["PDFControles"] = files;
                        }
                        else
                        {
                            List<byte[]> files = new List<byte[]>();
                            files.Add(downloadPDF);
                            Session["PDFControles"] = files;
                        }

                        break;
                    }
                case ReportesEnum.CONTROLENVIORECEPCION:
                    {
                        var pidControl = int.Parse(Request.QueryString["pidRegistro"]);
                        var tipoControl = int.Parse(Request.QueryString["ptipoControl"]);
                        setMedidasReporte("VC");
                        setControlEnvio(pidControl, tipoControl);

                        break;
                    }
                case ReportesEnum.RHREPALTAS:
                    {
                        setMedidasReporte("VC");
                        rd = new rptAltas();
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Altas de empleado por " + setTitleCC() + " del:", "Recursos Humanos"));
                        var oReportData = JsonConvert.DeserializeObject<List<RepAltasDTO>>(Session["cr" + ReportesEnum.RHREPALTAS].ToString());
                        string fechaInicio = Request.QueryString["fechaInicio"];
                        string fechaFin = Request.QueryString["fechaFin"];

                        List<string> ccs = oReportData.Select(c => c.cC).Distinct().ToList();


                        rd.Database.Tables[1].SetDataSource(ToDataTable(oReportData));

                        rd.SetParameterValue("hCC", setTitleCC() + ":");
                        rd.SetParameterValue("hCCCorto", setTitleCCCorto());
                        rd.SetParameterValue("CCs", string.Join(",", ccs));
                        rd.SetParameterValue("Inicio", fechaInicio);
                        rd.SetParameterValue("Termino", fechaFin);

                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.RHREPBAJAS:
                    {
                        setMedidasReporte("HC");
                        rd = new rptBajas();
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Baja de empleado por " + setTitleCC() + " del:", "Recursos Humanos"));
                        var oReportData = JsonConvert.DeserializeObject<List<RepBajasDTO>>(Session["cr" + ReportesEnum.RHREPBAJAS].ToString());
                        string fechaInicio = Request.QueryString["fechaInicio"];
                        string fechaFin = Request.QueryString["fechaFin"];

                        List<string> ccs = oReportData.Select(c => c.cC).Distinct().ToList();
                        rd.Database.Tables[1].SetDataSource(ToDataTable(oReportData));

                        rd.SetParameterValue("hCC", setTitleCC() + ":");
                        rd.SetParameterValue("hCCCorto", setTitleCCCorto());
                        rd.SetParameterValue("CCs", string.Join(",", ccs));
                        rd.SetParameterValue("Inicio", fechaInicio);
                        rd.SetParameterValue("Termino", fechaFin);


                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.RHREPCAMBIOS:
                    {
                        setMedidasReporte("HC");
                        rd = new rptCambios();
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Cambios realizador por " + setTitleCC() + " del:", "Recursos Humanos"));
                        var oReportData = JsonConvert.DeserializeObject<List<RepCambiosDTO>>(Session["cr" + ReportesEnum.RHREPCAMBIOS].ToString());
                        string fechaInicio = Request.QueryString["fechaInicio"];
                        string fechaFin = Request.QueryString["fechaFin"];

                        List<string> ccs = oReportData.Select(c => c.cC).Distinct().ToList();


                        rd.Database.Tables[1].SetDataSource(ToDataTable(oReportData));
                        rd.SetParameterValue("hCC", setTitleCC());
                        rd.SetParameterValue("hCCCorto", setTitleCCCorto());
                        rd.SetParameterValue("CCs", string.Join(",", ccs));
                        rd.SetParameterValue("Inicio", fechaInicio);
                        rd.SetParameterValue("Termino", fechaFin);

                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.RHREPMODIFICACIONES:
                    {
                        setMedidasReporte("HC");
                        rd = new rptModificaciones();
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Modificaciones a plantilla por " + setTitleCC() + " del:", "Recursos Humanos"));
                        var oReportData = JsonConvert.DeserializeObject<List<RepModificacionesDTO>>(Session["cr" + ReportesEnum.RHREPMODIFICACIONES].ToString());
                        string fechaInicio = Request.QueryString["fechaInicio"];
                        string fechaFin = Request.QueryString["fechaFin"];

                        List<string> ccs = oReportData.Select(c => c.cC).Distinct().ToList();

                        rd.Database.Tables[1].SetDataSource(ToDataTable(oReportData));
                        rd.SetParameterValue("hCC", setTitleCC());
                        rd.SetParameterValue("hCCCorto", setTitleCCCorto());
                        rd.SetParameterValue("CCs", string.Join(",", ccs));
                        rd.SetParameterValue("Inicio", fechaInicio);
                        rd.SetParameterValue("Termino", fechaFin);


                        Session.Add("reporte", rd);
                        break;
                    }

                case ReportesEnum.RHREPINCIDENCIAS:
                    {
                        setMedidasReporte("VC");
                        rd = new rptIncidencias();

                        var oReportData = JsonConvert.DeserializeObject<List<CatCantIncidencias>>(Session["cr" + ReportesEnum.RHREPINCIDENCIAS].ToString());
                        rd.Database.Tables[0].SetDataSource(ToDataTable(oReportData));

                        rd.Database.Tables[1].SetDataSource(getInfoEnca("Incidencias cometidas por " + setTitleCC(), "Recursos Humanos"));

                        List<string> ccs = oReportData.Select(c => c.CC).Distinct().ToList();

                        rd.SetParameterValue("hCC", setTitleCC());
                        rd.SetParameterValue("hCCCorto", setTitleCCCorto());
                        rd.SetParameterValue("CCs", string.Join(",", ccs));

                        Session.Add("reporte", rd);
                        break;
                    }

                case ReportesEnum.RHREPDETINCIDENCIAS:
                    {
                        setMedidasReporte("VC");
                        rd = new rptDetalleIncidencias();

                        var oReportData = JsonConvert.DeserializeObject<List<catDetalleIncidencias>>(Session["cr" + ReportesEnum.RHREPDETINCIDENCIAS].ToString());
                        rd.Database.Tables[0].SetDataSource(ToDataTable(oReportData));

                        rd.Database.Tables[1].SetDataSource(getInfoEnca("Incidencias por fecha cometidas por empleados", "Recursos Humanos"));

                        List<string> ccs = oReportData.Select(c => c.cc).Distinct().ToList();
                        rd.SetParameterValue("hCC", setTitleCC());
                        rd.SetParameterValue("hCCCorto", setTitleCCCorto());
                        rd.SetParameterValue("CCs", string.Join(",", ccs));

                        Session.Add("reporte", rd);
                        break;
                    }

                case ReportesEnum.RHREPACTIVOS:
                    {
                        setMedidasReporte("HC");
                        rd = new rptActivos();

                        var oReportData = JsonConvert.DeserializeObject<List<RepActivosDTO>>(Session["cr" + ReportesEnum.RHREPACTIVOS].ToString());

                        List<string> ccs = oReportData.Select(c => c.cC).Distinct().ToList();

                        rd.Database.Tables[0].SetDataSource(ToDataTable(oReportData));

                        rd.Database.Tables[1].SetDataSource(getInfoEnca("Reporte Activos", "Recursos Humanos"));
                        rd.SetParameterValue("hCC", setTitleCC());
                        rd.SetParameterValue("hCCCorto", setTitleCCCorto());
                        rd.SetParameterValue("CCs", string.Join(",", ccs));


                        Session.Add("reporte", rd);
                        break;
                    }

                case ReportesEnum.MRepFichaTecnica:
                    {
                        setMedidasReporte("VC");
                        rd = new rptFichaTecnica();

                        var oReportData = JsonConvert.DeserializeObject<List<FichaTecnicaDTO>>(Session["cr" + ReportesEnum.MRepFichaTecnica].ToString());
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Ficha Tecnica", "Maquinaria"));

                        rd.Database.Tables[1].SetDataSource(oReportData);
                        Session.Add("reporte", rd);
                        break;
                    }

                case ReportesEnum.MConsumoDiesel:
                    {
                        setMedidasReporte("HC");
                        rd = new rptConsumoDiesel();

                        var oReportData = JsonConvert.DeserializeObject<List<ConsumoDieselDTO>>(Session["cr" + ReportesEnum.MConsumoDiesel].ToString());
                        rd.Database.Tables[0].SetDataSource(oReportData);
                        rd.Database.Tables[1].SetDataSource(getInfoEnca("Consumo de Diesel", "Maquinaria"));

                        rd.SetParameterValue("total1", Session["crTotalConsumo"]);
                        rd.SetParameterValue("total2", Session["crtotalEnKontrol"]);
                        rd.SetParameterValue("total3", Session["crtotalContratistas"]);
                        rd.SetParameterValue("total4", Session["crtotalProvisionar"]);
                        rd.SetParameterValue("CCs", Session["crtotalCCs"]);
                        rd.SetParameterValue("hCC", setTitleCC());
                        rd.SetParameterValue("hEco", setTitleEco());
                        Session.Add("reporte", rd);
                        break;
                    }

                case ReportesEnum.MControlCalidad:
                    {

                        var idAsignacion = Int32.Parse(Request.QueryString["idAsignacion"]);
                        var TipoControl = Int32.Parse(Request.QueryString["TipoControl"]);
                        setMedidasReporte("VC");
                        setMcontrolCalidad(idAsignacion, TipoControl);


                        break;
                    }
                case ReportesEnum.ReporteProvicional:
                    {
                        setMedidasReporte("HO");
                        rd = new rptProvision();

                        var vCC = Convert.ToInt32(Request.QueryString["CC"]);
                        var vFechaCorte = Convert.ToDateTime(Request.QueryString["fechaCorte"]);
                        var vTC = Convert.ToDecimal(Request.QueryString["TC"]);
                        var vTodoReporte = Convert.ToBoolean(Request.QueryString["todoReporte"]);

                        var centroCosto = centroCostosFactoryServices.getCentroCostosService().getNombreCC(vCC);
                        var data = maquinariaRentadaFactoryServices.getMaquinariaRentadaServices().getRptProvisionalInfo(vCC, vFechaCorte, vTC, vTodoReporte);

                        var Equipos = (List<RepProvisionDTO>)data["lstEquipos"];
                        var TotalDefault = new totalProvisionDTO()
                        {
                            strTC = "$0.00",
                            strTotalDlls = "$0.00",
                            strTotalMN = "$0.00",
                            strTotalPesos = "$0.00"
                        };
                        var Total = TotalDefault;
                        var TotalExtra = TotalDefault;
                        var Resumen = TotalDefault;
                        if (Equipos.Count == 0)
                        {
                            Equipos.Add(new RepProvisionDTO()
                            {
                                Equipo = string.Empty,
                                NoEconomico = string.Empty,
                                Moneda = string.Empty,
                                Inicio = string.Empty,
                                Termino = string.Empty,
                                strCostoRenta = "$0.00",
                                strPU = "$0.00",
                                strImporteConsumido = "$0.00",
                                strImporteTotal = "$0.00",
                                FacturaExtra = string.Empty,
                                strPUHrsExtra = "$0.00",
                                strImporteConsumidoExtra = "$0.00",
                                strImporteTotalExtra = "$0.00",
                                strAnotacion = string.Empty
                            }

                            );
                        }
                        else
                        {
                            Total = (totalProvisionDTO)data["lstTotal"];
                            TotalExtra = (totalProvisionDTO)data["lstTotalExtra"];
                            Resumen = (totalProvisionDTO)data["lstResumen"];
                        }

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("EQUIPO DE RENTA " + centroCosto, vFechaCorte.ToShortDateString()));
                        rd.Database.Tables[1].SetDataSource(Equipos);
                        rd.SetParameterValue("TotalDlls", Total.strTotalDlls);
                        rd.SetParameterValue("TotalTC", Total.strTC);
                        rd.SetParameterValue("TotalPesos", Total.strTotalPesos);
                        rd.SetParameterValue("TotalMN", Total.strTotalMN);
                        rd.SetParameterValue("ExtralDlls", TotalExtra.strTotalDlls);
                        rd.SetParameterValue("ExtralTC", TotalExtra.strTC);
                        rd.SetParameterValue("ExtralPesos", TotalExtra.strTotalPesos);
                        rd.SetParameterValue("ExtralMN", TotalExtra.strTotalMN);
                        rd.SetParameterValue("ResumenDlls", Resumen.strTotalDlls);
                        rd.SetParameterValue("ResumenTC", Resumen.strTC);
                        rd.SetParameterValue("ResumenPesos", Resumen.strTotalPesos);
                        rd.SetParameterValue("ResumenMN", Resumen.strTotalMN);

                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.MovimientoAbierto:
                    {
                        setMedidasReporte("HO");
                        rd = new MovimientoAlmacen();

                        var vCC = Request.QueryString["CC"];
                        var vFolio = Request.QueryString["folio"];
                        var vAlmacen = Request.QueryString["almacen"];
                        var vfechaIni = Convert.ToDateTime(Request.QueryString["fechaIni"]);
                        var vvFechaFin = Convert.ToDateTime(Request.QueryString["fechaFin"]);
                        string strCC, strFolio, strAlmacen;

                        if (vCC != null) { strCC = vCC; } else { strCC = ""; }
                        if (vFolio != null) { strFolio = vFolio; } else { strFolio = ""; }
                        if (vAlmacen != null) { strAlmacen = vAlmacen; } else { strAlmacen = ""; }

                        var abierto = RepTraspasoFactoryService.getRepTraspasoServices().getLstMovAbiertos(strCC, strFolio, strAlmacen, vfechaIni, vvFechaFin);

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("TRASPASOS ABIERTOS DE ALMACEN", DateTime.Today.ToShortDateString()));
                        rd.Database.Tables[1].SetDataSource(abierto);
                        rd.SetParameterValue("hCC", setTitleCC().ToUpper());
                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.MovimientoCerado:
                    {
                        setMedidasReporte("HO");
                        rd = new MovimientoCerrado();

                        var vCC = Request.QueryString["CC"];
                        var vFolio = Request.QueryString["folio"];
                        var vAlmacen = Request.QueryString["almacen"];
                        var vfechaIni = Convert.ToDateTime(Request.QueryString["fechaIni"]);
                        var vvFechaFin = Convert.ToDateTime(Request.QueryString["fechaFin"]);
                        string strCC, strFolio, strAlmacen;

                        if (vCC != null) { strCC = vCC; } else { strCC = ""; }
                        if (vFolio != null) { strFolio = vFolio; } else { strFolio = ""; }
                        if (vAlmacen != null) { strAlmacen = vAlmacen; } else { strAlmacen = ""; }

                        var cerrado = RepTraspasoFactoryService.getRepTraspasoServices().getLstMovCerrados(strCC, strFolio, strAlmacen, vfechaIni, vvFechaFin);

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("TRASPASOS CERRADOS DE ALMACEN", DateTime.Today.ToShortDateString()));
                        rd.Database.Tables[1].SetDataSource(cerrado);
                        rd.SetParameterValue("hCC", setTitleCC().ToUpper());
                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.EficienciaObra:
                    {
                        setMedidasReporte("HO");
                        rd = new rptEficienciaObra();

                        var vCC = Request.QueryString["CC"];
                        var vFechaInicio = Convert.ToDateTime(Request.QueryString["FechaInicio"]);
                        var vFechaFin = Convert.ToDateTime(Request.QueryString["FechaFin"]);

                        var eficiencia = EficienciaFactoryService.getEficienciaService().getEficienciaObraInfo(vFechaInicio, vFechaFin, vCC);

                        rd.Database.Tables[0].SetDataSource(getInfoEnca(" \r\n ANALISIS SEMANAL DETALLADO DE EFICIENCIA DE MAQUINARIA", eficiencia[0].Semana + "\r\n" + DateTime.Today.ToShortDateString()));
                        rd.Database.Tables[1].SetDataSource(eficiencia);

                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.EficienciaGeneral:
                    {
                        setMedidasReporte("HO");
                        rd = new rptEficienciaGeneral();

                        var vCC = Request.QueryString["CC"];
                        var vFechaInicio = Convert.ToDateTime(Request.QueryString["FechaInicio"]);
                        var vFechaFin = Convert.ToDateTime(Request.QueryString["FechaFin"]);

                        var eficiencia = EficienciaFactoryService.getEficienciaService().getEficienciaGeneralInfo(vFechaInicio, vFechaFin);

                        RepEficienciaGeneralDTO TotalPromedio = new RepEficienciaGeneralDTO();
                        TotalPromedio.Frente = "EFICIENCIA PROMEDIO";
                        var cuenta1 = eficiencia.Where(x => x.Prom1 > 0);
                        var cuenta2 = eficiencia.Where(x => x.Prom2 > 0);
                        var cuenta3 = eficiencia.Where(x => x.Prom3 > 0);
                        var cuenta4 = eficiencia.Where(x => x.Prom4 > 0);
                        var cuenta5 = eficiencia.Where(x => x.Prom5 > 0);
                        var cuenta6 = eficiencia.Where(x => x.Prom6 > 0);
                        var cuenta7 = eficiencia.Where(x => x.Prom7 > 0);
                        var cuenta8 = eficiencia.Where(x => x.Prom8 > 0);
                        var cuenta9 = eficiencia.Where(x => x.Prom9 > 0);
                        var cuenta10 = eficiencia.Where(x => x.Prom10 > 0);
                        var cuenta11 = eficiencia.Where(x => x.Prom11 > 0);
                        var cuenta12 = eficiencia.Where(x => x.Prom12 > 0);
                        var cuenta13 = eficiencia.Where(x => x.Prom13 > 0);
                        var cuenta14 = eficiencia.Where(x => x.Prom14 > 0);
                        var cuenta15 = eficiencia.Where(x => x.Prom15 > 0);
                        var cuentaE = eficiencia.Where(x => x.Eficiencia > 0);

                        TotalPromedio.Prom1 = cuenta1.Count() == 0 ? 0 : eficiencia.Sum(x => x.Prom1) / cuenta1.Count();
                        TotalPromedio.Prom2 = cuenta2.Count() == 0 ? 0 : eficiencia.Sum(x => x.Prom2) / cuenta2.Count();
                        TotalPromedio.Prom3 = cuenta3.Count() == 0 ? 0 : eficiencia.Sum(x => x.Prom3) / cuenta3.Count();
                        TotalPromedio.Prom4 = cuenta4.Count() == 0 ? 0 : eficiencia.Sum(x => x.Prom4) / cuenta4.Count();
                        TotalPromedio.Prom5 = cuenta5.Count() == 0 ? 0 : eficiencia.Sum(x => x.Prom5) / cuenta5.Count();
                        TotalPromedio.Prom6 = cuenta6.Count() == 0 ? 0 : eficiencia.Sum(x => x.Prom6) / cuenta6.Count();
                        TotalPromedio.Prom7 = cuenta7.Count() == 0 ? 0 : eficiencia.Sum(x => x.Prom7) / cuenta7.Count();
                        TotalPromedio.Prom8 = cuenta8.Count() == 0 ? 0 : eficiencia.Sum(x => x.Prom8) / cuenta8.Count();
                        TotalPromedio.Prom9 = cuenta9.Count() == 0 ? 0 : eficiencia.Sum(x => x.Prom9) / cuenta9.Count();
                        TotalPromedio.Prom10 = cuenta10.Count() == 0 ? 0 : eficiencia.Sum(x => x.Prom10) / cuenta10.Count();
                        TotalPromedio.Prom11 = cuenta11.Count() == 0 ? 0 : eficiencia.Sum(x => x.Prom11) / cuenta11.Count();
                        TotalPromedio.Prom12 = cuenta12.Count() == 0 ? 0 : eficiencia.Sum(x => x.Prom12) / cuenta12.Count();
                        TotalPromedio.Prom13 = cuenta13.Count() == 0 ? 0 : eficiencia.Sum(x => x.Prom13) / cuenta13.Count();
                        TotalPromedio.Prom14 = cuenta14.Count() == 0 ? 0 : eficiencia.Sum(x => x.Prom14) / cuenta14.Count();
                        TotalPromedio.Prom15 = cuenta15.Count() == 0 ? 0 : eficiencia.Sum(x => x.Prom15) / cuenta15.Count();
                        TotalPromedio.Eficiencia = cuentaE.Count() == 0 ? 0 : eficiencia.Sum(x => x.Eficiencia) / cuentaE.Count();
                        var lstTotalProemdio = new List<RepEficienciaGeneralDTO>();
                        lstTotalProemdio.Add(TotalPromedio);
                        List<string> lstGrupo = new List<string>();
                        for (int i = 0; i < 15; i++)
                        {
                            try
                            {
                                var grupo = GrupoMaquinariaFactoryServices.getGrupoMaquinariaService().getDataGrupo(eficiencia.ToArray()[i].IdGrupo).prefijo;
                                lstGrupo.Add(grupo.Equals("") ? "-" : grupo.Trim());
                            }
                            catch (Exception)
                            {
                                lstGrupo.Add("-");
                            }
                        }

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("ANÁLISIS SEMANAL DE EFICIENCIA DE MAQUINARIA POR OBRA Y GRUPO DE EQUIPO", "\r\n" + DateTime.Today.ToShortDateString()));
                        rd.Database.Tables[1].SetDataSource(eficiencia);
                        rd.Database.Tables[2].SetDataSource(lstTotalProemdio);
                        rd.SetParameterValue("Grupo1", lstGrupo[0]);
                        rd.SetParameterValue("Grupo2", lstGrupo[1]);
                        rd.SetParameterValue("Grupo3", lstGrupo[2]);
                        rd.SetParameterValue("Grupo4", lstGrupo[3]);
                        rd.SetParameterValue("Grupo5", lstGrupo[4]);
                        rd.SetParameterValue("Grupo6", lstGrupo[5]);
                        rd.SetParameterValue("Grupo7", lstGrupo[6]);
                        rd.SetParameterValue("Grupo8", lstGrupo[7]);
                        rd.SetParameterValue("Grupo9", lstGrupo[8]);
                        rd.SetParameterValue("Grupo10", lstGrupo[9]);
                        rd.SetParameterValue("Grupo11", lstGrupo[10]);
                        rd.SetParameterValue("Grupo12", lstGrupo[11]);
                        rd.SetParameterValue("Grupo13", lstGrupo[12]);
                        rd.SetParameterValue("Grupo14", lstGrupo[13]);
                        rd.SetParameterValue("Grupo15", lstGrupo[14]);

                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.IndicadorContrarecibo:
                    {
                        setMedidasReporte("HO");
                        rd = new rptIndicadorContrarecibo();

                        var vCC = Request.QueryString["CC"];
                        var lstCC = new List<string>();
                        lstCC.Add("");
                        var vFechaDel = Convert.ToDateTime(Request.QueryString["fechaDel"]);
                        var vfechaAl = Convert.ToDateTime(Request.QueryString["fechaAl"]);
                        var vConclusion = Request.QueryString["CRConclucion"];
                        var lst = new List<tblM_MaquinariaRentada>();

                        var objReporte = RptIndicadorFactoryServices.getRptIndicadorService().getReporte((int)ReportesEnum.IndicadorContrarecibo, vFechaDel, vfechaAl, vCC);
                        if (objReporte.id > 0)
                        {
                            var lstConsulta = JsonConvert.DeserializeObject<List<RepTblIndicadorContrarecibo>>(objReporte.datosJson);
                            foreach (var item in lstConsulta)
                            {
                                if (item.ContraRecibo.Equals(string.Empty) || item.ContraRecibo.ToUpper().Equals("N/A"))
                                {

                                }
                                else
                                {
                                    var obj = new tblM_MaquinariaRentada();
                                    obj.Folio = item.Obra;
                                    obj.RecepcionFactura = item.FechaRecepFact;
                                    obj.NoFactura = item.NoFactura;
                                    obj.ContraRecibo = item.ContraRecibo;
                                    obj.FechaContraRecibo = item.FechaCR;
                                    lst.Add(obj);

                                }
                            }
                        }
                        else
                        {
                            if (lstCC[0].Equals("148") || lstCC[0].Equals("114"))
                            {
                                lstCC[0] = "148";
                                var data148 = maquinariaRentadaFactoryServices.getMaquinariaRentadaServices().getMaquinariaRentada(lstCC, string.Empty, vFechaDel, vfechaAl).ToList();
                                lstCC[0] = "114";
                                var data114 = maquinariaRentadaFactoryServices.getMaquinariaRentadaServices().getMaquinariaRentada(lstCC, string.Empty, vFechaDel, vfechaAl).ToList();
                                lst.AddRange(data114);
                                lst.AddRange(data148);
                            }
                            else
                            {
                                lst = maquinariaRentadaFactoryServices.getMaquinariaRentadaServices().getMaquinariaRentada(lstCC, string.Empty, vFechaDel, vfechaAl).ToList();
                            }
                        }



                        var lstTabla = new List<RepTblIndicadorContrarecibo>();
                        foreach (var item in lst)
                        {
                            if (item.ContraRecibo.Equals(string.Empty) || item.ContraRecibo.ToUpper().Equals("N/A"))
                            {

                            }
                            else
                            {
                                var obj = new RepTblIndicadorContrarecibo();
                                obj.Obra = item.Folio;
                                obj.FechaRecepFact = item.RecepcionFactura;
                                obj.NoFactura = item.NoFactura;
                                obj.ContraRecibo = item.ContraRecibo;
                                obj.FechaCR = item.FechaContraRecibo;
                                obj.Desface = CalcularDiasDeDiferencia(item.FechaContraRecibo, item.RecepcionFactura);
                                if (obj.Desface < 100 && obj.Desface > -1)
                                {
                                    lstTabla.Add(obj);
                                }
                            }
                        }

                        var save = new tblM_RptIndicador();
                        var jsonSerialiser = new JavaScriptSerializer();
                        save.id = objReporte.id;
                        save.Tipo = (int)ReportesEnum.IndicadorContrarecibo;
                        save.FechaInicio = vFechaDel;
                        save.FechaFin = vfechaAl;
                        save.datosJson = jsonSerialiser.Serialize(lstTabla);
                        save.Conclusion = vConclusion;
                        save.CC = vCC;

                        RptIndicadorFactoryServices.getRptIndicadorService().SaveReporte(save);
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("", vFechaDel.ToShortDateString() + "-" + vfechaAl.ToShortDateString()));
                        rd.Database.Tables[1].SetDataSource(lstTabla);
                        rd.SetParameterValue("Conclucion", vConclusion);
                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.IndicadorProceso:
                    {
                        setMedidasReporte("HO");
                        rd = new rptIndicadorProceso();

                        var vCC = Request.QueryString["CC"];
                        var lstCC = new List<string>();
                        lstCC.Add(vCC);
                        var vFechaDel = Convert.ToDateTime(Request.QueryString["fechaDel"]);
                        var vfechaAl = Convert.ToDateTime(Request.QueryString["fechaAl"]);
                        var vConclusion = Request.QueryString["ProcespConclucion"];
                        var vTc = Convert.ToDouble(Request.QueryString["TC"]);

                        var lst = new List<tblM_MaquinariaRentada>();
                        var objReporte = RptIndicadorFactoryServices.getRptIndicadorService().getReporte((int)ReportesEnum.IndicadorProceso, vFechaDel, vfechaAl, vCC);
                        if (objReporte.id > 0)
                        {
                            var lstConsulta = JsonConvert.DeserializeObject<List<RepTblIndicadorContrarecibo>>(objReporte.datosJson);
                            foreach (var item in lstConsulta)
                            {
                                var obj = new tblM_MaquinariaRentada();
                                obj.NoEconomico = item.NoEconomico;
                                obj.PrecioMes = item.PrecioMes;
                                obj.Moneda = item.Moneda;
                                lst.Add(obj);
                            }
                        }
                        else
                        {
                            if (lstCC[0].Equals("148") || lstCC[0].Equals("114"))
                            {
                                lstCC[0] = "148";
                                var data148 = maquinariaRentadaFactoryServices.getMaquinariaRentadaServices().getMaquinariaRentadaPorFacturacion(lstCC, vFechaDel, vfechaAl).ToList();
                                lstCC[0] = "114";
                                var data114 = maquinariaRentadaFactoryServices.getMaquinariaRentadaServices().getMaquinariaRentadaPorFacturacion(lstCC, vFechaDel, vfechaAl).ToList();
                                lst.AddRange(data114);
                                lst.AddRange(data148);
                            }
                            else
                            {
                                lst = maquinariaRentadaFactoryServices.getMaquinariaRentadaServices().getMaquinariaRentadaPorFacturacion(lstCC, vFechaDel, vfechaAl).ToList();
                            }
                        }



                        int i = 0;
                        var lstPesos = lst
                            .Where(dinero => dinero.Moneda == true)
                            .GroupBy(maquina => maquina.NoEconomico)
                            .Select(grafica => new RepTblIndicadorContrarecibo
                            {
                                Obra = grafica.FirstOrDefault().NoEconomico,
                                Desface = (double)grafica.FirstOrDefault().PrecioMes / 6
                                //Desface = i++
                            })
                            .ToList();
                        i = 0;
                        var lstDlls = lst
                            .Where(dinero => dinero.Moneda == false)
                            .GroupBy(maquina => maquina.NoEconomico)
                            .Select(grafica => new RepTblIndicadorContrarecibo
                            {
                                Obra = grafica.FirstOrDefault().NoEconomico,
                                Desface = (double)grafica.FirstOrDefault().PrecioMes / 24
                                //Desface = i++
                            })
                            .ToList();
                        var CentroCosto = lstCC[0].Equals(string.Empty) ? "" : centroCostosFactoryServices.getCentroCostosService().getNombreCcFromSIGOPLAN(vCC);

                        var totalPesos2 = lst.Where(x => x.Moneda == true).Sum(x => x.PrecioMes);
                        var totalDlls2 = lst.Where(x => x.Moneda == false).Sum(x => x.PrecioMes);
                        var totalDllsPesos = totalDlls2 * (decimal)vTc;
                        var totalTotal2 = totalPesos2 + totalDllsPesos;

                        var save = new tblM_RptIndicador();
                        var jsonSerialiser = new JavaScriptSerializer();
                        save.id = objReporte.id;
                        save.Tipo = (int)ReportesEnum.IndicadorProceso;
                        save.FechaInicio = vFechaDel;
                        save.FechaFin = vfechaAl;
                        save.datosJson = jsonSerialiser.Serialize(lst);
                        save.Conclusion = vConclusion;
                        save.Tc = (decimal)vTc;
                        save.CC = vCC;

                        RptIndicadorFactoryServices.getRptIndicadorService().SaveReporte(save);

                        rd.Database.Tables[0].SetDataSource(getInfoEnca(CentroCosto, vFechaDel.ToShortDateString() + "-" + vfechaAl.ToShortDateString()));
                        rd.Database.Tables[1].SetDataSource(lstPesos);
                        rd.Database.Tables[2].SetDataSource(lstDlls);
                        rd.SetParameterValue("totalPesos", totalPesos2);
                        rd.SetParameterValue("totalDlls", totalDlls2);
                        rd.SetParameterValue("totalTotal", totalTotal2);
                        rd.SetParameterValue("tc", vTc);
                        rd.SetParameterValue("conclusion", vConclusion);
                        rd.SetParameterValue("totalDllsPesos", totalDllsPesos);
                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.Prefactura:
                    {
                        setMedidasReporte("HO");
                        rd = new rptPrefactura();


                        int id = Convert.ToInt32(Request.QueryString["idPrefactura"]);

                        var obj = RepPrefacturacionFactoryService.getRepPrefacturacionService().getPrefactura(id).FirstOrDefault();

                        var restabla = PrefacturacionFactoryServices.getPrefacturacionServices().getPrefactura(id)
                            .Select(x => new
                            {
                                Unidad = HttpUtility.HtmlDecode(x.Unidad),
                                Cantidad = x.Cantidad,
                                Precio = x.Precio,
                                Importe = x.Importe
                            });
                        ;
                        var centroCosto = centroCostosFactoryServices.getCentroCostosService().getNombreCCFix(obj.CC);


                        decimal subtotal = restabla.Sum(x => x.Importe);
                        decimal iva = subtotal * .16M;
                        decimal importeTotal = subtotal + iva;

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("", ""));
                        rd.Database.Tables[1].SetDataSource(restabla);
                        rd.SetParameterValue("folio", obj.Folio);
                        rd.SetParameterValue("nombre", obj.Nombre);
                        rd.SetParameterValue("direccion", obj.Direccion);
                        rd.SetParameterValue("cp", obj.CP);
                        rd.SetParameterValue("ciudad", obj.Ciudad);
                        rd.SetParameterValue("rfc", obj.RFC);
                        rd.SetParameterValue("fecha", obj.Fecha.ToShortDateString());
                        rd.SetParameterValue("metodoPago", obj.MetodoPago);
                        rd.SetParameterValue("tipoMoneda", obj.TipoMoneda);
                        rd.SetParameterValue("centroCosto", centroCosto);
                        rd.SetParameterValue("subtotal", subtotal);
                        rd.SetParameterValue("iva", iva);
                        rd.SetParameterValue("importeTotal", importeTotal);
                        rd.SetParameterValue("hCC", setTitleCC());

                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.RESUMENSEMANAL:
                    {

                        var lstResultado = (List<VencimientoDTO>)Session["lstResultado"];
                        rd = new rptResumenSemanal();
                        var divisa = lstResultado.FirstOrDefault().tipoMoneda == 1 ? "MX" : "DLLS";
                        var lstImprimir = lstResultado
                            .Select(x => new
                            {
                                proveedor = x.proveedor,
                                factura = x.factura.ToString(),
                                nombCC = x.nombCC,
                                saldoFactura = changeFormat(x.saldoFactura),
                                fecha = x.fecha,
                                fechaVencimiento = x.fechaVencimiento,
                                suma = lstResultado.Where(y => y.fechaVencimiento == x.fechaVencimiento && y.proveedor.Equals(x.proveedor)).Sum(s => changeFormat(s.saldoFactura))
                            }).ToList();

                        setMedidasReporte("HO");
                        rd.Database.Tables[0].SetDataSource(getInfoEnca(lstResultado.FirstOrDefault().banco.ToUpper() + " " + divisa, lstResultado.FirstOrDefault().factoraje));
                        rd.Database.Tables[1].SetDataSource(lstImprimir);
                        rd.SetParameterValue("hCC", setTitleCC());
                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.BajaMaquinaria:
                    {
                        setMedidasReporte("HO");
                        rd = new rptBajaEquipo();

                        var lstBajaMaquina = (List<BajaMaquinaDTO>)Session["lstBajaMaquina"];

                        rd.Database.Tables[1].SetDataSource(lstBajaMaquina);
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Dirección de Maquinaria y Equipo", "Inventario General de Bajas de Maquinaria y Equipo"));
                        rd.SetParameterValue("hEco", setTitleEco());
                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.BajaActivosFijos:
                    {
                        setMedidasReporte("HO");
                        rd = new rptBajaActivoFijo();
                        var lstContador = new List<RepRelacionBajaDTO>();
                        var lstRelativo = new List<RepPorcentajeBaja>();
                        var lstBajaMaquina = (List<RepBajaMaquinaria>)Session["lstBajaMaquina"];
                        lstContador.Add((RepRelacionBajaDTO)Session["lstContador"]);
                        lstRelativo.Add((RepPorcentajeBaja)Session["lstRelativo"]);
                        var fecha = (string)Session["fecha"];
                        var lstReporte = lstBajaMaquina.Select(x => new
                        {
                            Economico = x.Economico,
                            GrupoID = x.GrupoID,
                            Descripcion = x.Descripcion,
                            Horometro = x.Horometro,
                            Promedio = x.Promedio,
                            NoAsignado = x.NoAsignado ? "✓" : string.Empty,
                            VentaInterna = x.VentaInterna ? "✓ " : string.Empty,
                            VentaExterna = x.VentaExterna ? "✓ " : string.Empty,
                            TerminoVida = x.TerminoVida ? "✓ " : string.Empty,
                            Siniestro = x.Siniestro ? "✓ " : string.Empty,
                            Robo = x.Robo ? "✓ " : string.Empty
                        }).OrderBy(x => x.GrupoID).ThenBy(x => x.Economico);
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Dirección de Maquinaria y Equipo", "Relación de bajas del módulo de activo fijo"));
                        rd.Database.Tables[1].SetDataSource(lstReporte);
                        rd.Database.Tables[2].SetDataSource(lstRelativo);
                        rd.Database.Tables[3].SetDataSource(lstContador);
                        rd.SetParameterValue(0, fecha);
                        rd.SetParameterValue("hEco", setTitleEco());
                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.ConsumoAceitesLubricantes:
                    {
                        setMedidasReporte("HO");
                        rd = new rptRepCapturaLubricanes();

                        var lstLubricante = (List<tblM_MaquinariaAceitesLubricantes>)Session["lstMaq"];
                        var cc = (string)Session["cc"];
                        var fecha = (DateTime)Session["fecha"];
                        var turno = (string)Session["turno"];
                        var consumo = (string)Session["consumo"];
                        var lstAceites = AceitesFactory.getAceitesLubricantesFactoryService().GetAllAceitesLubricantes(0, "");

                        var lstReporte = lstLubricante.Select(x => new
                        {
                            Economico = x.Economico,
                            Horometro = x.Horometro,
                            Fecha = x.Fecha.ToShortDateString(),
                            Turno = x.Turno == 1 ? "1RA" : x.Turno == 2 ? "2DA" : "3RA",
                            CC = string.Format("{0} - {1}", x.CC, centroCostosFactoryServices.getCentroCostosService().getNombreCCFix(x.CC.Replace(" ", string.Empty))),
                            Rotacion = x.Rotacion == true ? "SI" : "NO",
                            Sopleteo = x.Sopleteo == true ? "SI" : "NO",
                            AK = x.AK == true ? "SI" : "NO",
                            Lubricacion = x.Lubricacion == true ? "SI" : "NO",
                            Antifreeze = x.Antifreeze,
                            MotorId = lstAceites.Where(z => z.id == x.MotorId).FirstOrDefault().Descripcion,
                            MotorVal = x.MotorVal,
                            TransmisionID = lstAceites.Where(z => z.id == x.TransmisionID).FirstOrDefault().Descripcion,
                            TransmisionVal = x.TransmisionVal,
                            HidraulicoID = lstAceites.Where(z => z.id == x.HidraulicoID).FirstOrDefault().Descripcion,
                            HidraulicoVal = x.HidraulicoVal,
                            DiferencialId = lstAceites.Where(z => z.id == x.DiferencialId).FirstOrDefault().Descripcion,
                            DiferencialVal = x.DiferencialVal,
                            MFTIzqId = lstAceites.Where(z => z.id == x.MFTIzqId).FirstOrDefault().Descripcion,
                            MFTDerId = lstAceites.Where(z => z.id == x.MFTDerId).FirstOrDefault().Descripcion,
                            MFTIzqVal = x.MFTIzqVal,
                            MFTDerVal = x.MFTDerVal,
                            MDIzqID = lstAceites.Where(z => z.id == x.MDIzqID).FirstOrDefault().Descripcion,
                            MDDerID = lstAceites.Where(z => z.id == x.MDDerID).FirstOrDefault().Descripcion,
                            MDIzqVal = x.MDIzqVal,
                            MDDerVal = x.MDDerVal,
                            DirId = lstAceites.Where(z => z.id == x.DirId).FirstOrDefault().Descripcion,
                            DirVal = x.DirVal,
                            Grasa = x.Grasa,
                            Firma = string.IsNullOrEmpty(x.Firma) ? "TALLER" : x.Firma
                        })
                        .ToList();

                        rd.Database.Tables[1].SetDataSource(getInfoEnca(cc, fecha.ToShortDateString()));
                        rd.Database.Tables[0].SetDataSource(lstReporte);
                        rd.SetParameterValue("turno", turno);
                        rd.SetParameterValue("hEcho", setTitleEco());
                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.ConsumoAceitesLubricantesDetalle:
                    {
                        setMedidasReporte("HO");
                        rd = new rptRepCapturaLubricanesDetalle();

                        var lstLubricante = (List<rptAceitesLubricantesDTO>)Session["rptdetallelubicantesDTO"];
                        var cc = (string)Session["cc"];
                        var fecha = (string)Session["fecha"];
                        var turno = (string)Session["turno"];
                        var consumo = (string)Session["consumo"];
                        var noEconomico = (string)Session["noEconomicoRepLubricantesDetalle"];
                        //var lstAceites = AceitesFactory.getAceitesLubricantesFactoryService().GetAllAceitesLubricantes(0, "");

                        rd.Database.Tables[0].SetDataSource(getInfoEnca(cc, fecha));
                        rd.Database.Tables[1].SetDataSource(lstLubricante);
                        rd.SetParameterValue("turno", turno);
                        rd.SetParameterValue("hEco", setTitleEco());
                        rd.SetParameterValue("noEconomico", noEconomico);
                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.RepConsumoLubricente:
                    {
                        setMedidasReporte("HO");
                        rd = new rptRepCapturaLubricanes();

                        var lstLubricante = (List<RptAceitesLubricantes>)Session["lstMaq"];
                        var cc = (string)Session["cc"];
                        var fecha = (string)Session["fecha"];
                        var turno = (string)Session["turno"];
                        var economico = (string)Session["economico"];
                        var lstAceites = AceitesFactory.getAceitesLubricantesFactoryService().GetAllAceitesLubricantes(0, "");


                        var lstReporte = lstLubricante.Select(x => new
                        {
                            noEconomico = x.noEconomico,
                            horasTrabajadas = x.horasTrabajadas,
                            motor = x.motor,
                            motor2 = x.motor2,
                            trans = x.trans,
                            hidraulico = x.hidraulico,
                            diferenciales = x.diferenciales,
                            mandoFinal = x.mandoFinal,
                            direccion = x.direccion,
                            grasa = x.grasa,
                            Antifreeze = x.Antifreeze,
                            otros1 = x.otros1,
                            otros2 = x.otros2,
                            otros3 = x.otros3,
                            otros4 = x.otros4,
                            motorDes = lstAceites.Where(z => z.id == x.motorDes).FirstOrDefault() != null ? lstAceites.Where(z => z.id == x.motorDes).FirstOrDefault().Descripcion : "N/A",
                            motor2Des = lstAceites.Where(z => z.id == x.motor2Des).FirstOrDefault() != null ? lstAceites.Where(z => z.id == x.motor2Des).FirstOrDefault().Descripcion : "N/A",
                            transDescr = lstAceites.Where(z => z.id == x.transDescr).FirstOrDefault() != null ? lstAceites.Where(z => z.id == x.transDescr).FirstOrDefault().Descripcion : "N/A",
                            hidraulicoDesc = lstAceites.Where(z => z.id == x.hidraulicoDesc).FirstOrDefault() != null ? lstAceites.Where(z => z.id == x.hidraulicoDesc).FirstOrDefault().Descripcion : "N/A",
                            difDesc = lstAceites.Where(z => z.id == x.difDesc).FirstOrDefault() != null ? lstAceites.Where(z => z.id == x.difDesc).FirstOrDefault().Descripcion : "N/A",
                            mandoFinalDesc = lstAceites.Where(z => z.id == x.mandoFinalDesc).FirstOrDefault() != null ? lstAceites.Where(z => z.id == x.mandoFinalDesc).FirstOrDefault().Descripcion : "N/A",
                            direccionDesc = lstAceites.Where(z => z.id == x.direccionDesc).FirstOrDefault() != null ? lstAceites.Where(z => z.id == x.direccionDesc).FirstOrDefault().Descripcion : "N/A",
                            grasaDesc = lstAceites.Where(z => z.id == x.grasaDesc).FirstOrDefault() != null ? lstAceites.Where(z => z.id == x.grasaDesc).FirstOrDefault().Descripcion : "N/A",
                            otro1Desc = lstAceites.Where(z => z.id == x.otro1Desc).FirstOrDefault() != null ? lstAceites.Where(z => z.id == x.otro1Desc).FirstOrDefault().Descripcion : "N/A",
                            otro2Desc = lstAceites.Where(z => z.id == x.otro2Desc).FirstOrDefault() != null ? lstAceites.Where(z => z.id == x.otro2Desc).FirstOrDefault().Descripcion : "N/A",
                            otro3Desc = lstAceites.Where(z => z.id == x.otro3Desc).FirstOrDefault() != null ? lstAceites.Where(z => z.id == x.otro3Desc).FirstOrDefault().Descripcion : "N/A",
                            otro4Desc = lstAceites.Where(z => z.id == x.otro4Desc).FirstOrDefault() != null ? lstAceites.Where(z => z.id == x.otro4Desc).FirstOrDefault().Descripcion : "N/A"

                        }).ToList();

                        rd.Database.Tables[0].SetDataSource(getInfoEnca(cc, fecha));
                        rd.Database.Tables[1].SetDataSource(lstReporte);
                        rd.SetParameterValue("turno", turno);
                        rd.SetParameterValue("hEco", setTitleEco());
                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.COTIZACIONCAPTURA:
                    {
                        setMedidasReporte("HO");
                        rd = new rptCotizacion();
                        var lista = vSesiones.ReporteCotizacionDTO;


                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Cotizaciones", "Tracking a cotizaciones"));
                        rd.Database.Tables[1].SetDataSource(lista);
                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.KPIEQUIPO:
                    {
                        setMedidasReporte("HO");
                        rd = new rptKPIGeneral();
                        var id = int.Parse(Request.QueryString["id"]);

                        string strCC = Request.QueryString["cc"];
                        List<string> cc = strCC.Split(',').ToList();
                        var anio = Convert.ToDateTime(Request.QueryString["anio"].ToString());
                        var mes = Convert.ToDateTime(Request.QueryString["mes"]);

                        var mesPalabra = Request.QueryString["mesPalabra"];
                        var ccNombre = Request.QueryString["ccNombre"];
                        var data = kpiFactoryServices.getKPIFactoryService().getKPIReporteEquipo(id, cc, anio, mes);

                        var kpiInfoGeneral = new List<kpiInfoGeneralDTO>();
                        var kpiTipoMantenimiento = new List<kpiTipoMantenimientoDTO>();
                        var kpiMotivosParo = new List<kpiMotivosParoDTO>();
                        var kpiFrecuenciaParos = new List<kpiFrecuenciaParosDTO>();
                        var kpiMTTOyParo = new List<kpiMTTOyParoDTO>();


                        kpiInfoGeneral.Add(data.kpiInfoGeneral);
                        kpiTipoMantenimiento.Add(data.kpiTipoMantenimiento);
                        kpiMotivosParo.AddRange(data.kpiMotivosParo);
                        kpiFrecuenciaParos.Add(data.kpiFrecuenciaParos);

                        foreach (var item in data.kpiMTTOyParo)
                        {
                            if (item.MTBS == 0)
                            {
                                item.MTTR = 0;
                            }
                        }
                        kpiMTTOyParo.AddRange(data.kpiMTTOyParo);
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Dirección de Maquinaria y Equipo", "Indicador Mensual de Disponibilidad, Tipos y Frecuencia de Paros."));//bien
                        rd.Database.Tables[1].SetDataSource(kpiInfoGeneral);//bien
                        rd.Database.Tables[2].SetDataSource(kpiTipoMantenimiento);
                        rd.Database.Tables[3].SetDataSource(kpiFrecuenciaParos);//bien
                        rd.Database.Tables[4].SetDataSource(kpiMotivosParo);
                        rd.Database.Tables[5].SetDataSource(kpiMTTOyParo);

                        rd.SetParameterValue("CentroCostos", ccNombre);
                        rd.SetParameterValue("RangoFechas", mesPalabra);

                        //rd.SetParameterValue("VersionDocumento", "Ver. 1, 01-08-2018");
                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.KPIMENSUAL:
                    {
                        setMedidasReporte("HO");

                        var datosReporte = new Dictionary<string, object>();

                        rd = new rptKPIMensual();
                        var tipo = int.Parse(Request.QueryString["tipo"]);
                        var modelo = int.Parse(Request.QueryString["modelo"]);
                        string strCC = Request.QueryString["cc"];
                        List<string> cc = strCC.Split(',').ToList();
                        var anio = Convert.ToDateTime(Request.QueryString["anio"]);
                        var mes = Convert.ToDateTime(Request.QueryString["mes"]);
                        var mesPalabra = Request.QueryString["mesPalabra"];
                        var ccNombre = Request.QueryString["ccNombre"];

                        IList<KPIDTO> data;
                        var dataGrafica = new kpiRepGraficas();

                        if (Session["datosReporte"] != null)
                        {
                            datosReporte = Session["datosReporte"] as Dictionary<string, object>;
                            data = datosReporte["data"] as List<KPIDTO>;
                            dataGrafica = datosReporte["dataGrafica"] as kpiRepGraficas;
                        }
                        else
                        {
                            data = kpiFactoryServices.getKPIFactoryService().getKPIGeneral(cc, tipo, modelo, anio, mes);
                            dataGrafica = kpiFactoryServices.getKPIFactoryService().getKPIRepGraficas(cc, tipo, modelo, anio, mes, data.ToList());

                            datosReporte.Add("data", data);
                            datosReporte.Add("dataGrafica", dataGrafica);
                        }



                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Dirección de Maquinaria y Equipo", "Indicadores Claves de Desempeño"));//bien

                        var TotalTrabajadas = data.Sum(x => Convert.ToDecimal(x.horasTrabajado));
                        var totalHorasHombre = data.Sum(x => Convert.ToDecimal(x.horasHombre));
                        var promedioTotal = data.Select(x => x.pDisponibilidad).ToList();
                        decimal sum = 0;
                        int count = 0;
                        foreach (var item in promedioTotal)
                        {
                            count++;
                            var porcentaje = Convert.ToDecimal(item.TrimEnd('%'));

                            sum += porcentaje;

                        }

                        var totalPorcentaje = (sum / count);

                        rd.Database.Tables[1].SetDataSource(data);//bien
                        rd.Database.Tables[2].SetDataSource(dataGrafica.GraficaFamiliasDTO);//bien
                        rd.Database.Tables[3].SetDataSource(dataGrafica.MotivosParoDTO);//bien
                        rd.SetParameterValue("CentroCostos", ccNombre);

                        string fullMonthName = mes.ToString("MMMM", CultureInfo.CreateSpecificCulture("es"));
                        rd.SetParameterValue("RangoFechas", fullMonthName);

                        rd.SetParameterValue("TotalHT", TotalTrabajadas);
                        rd.SetParameterValue("TotalHP", totalHorasHombre);
                        rd.SetParameterValue("ProDisponibilidad", totalPorcentaje);

                        Session.Add("reporte", rd);
                        Session.Add("datosReporte", datosReporte);

                        break;
                    }
                case ReportesEnum.KPIMETRICAS:
                    {
                        setMedidasReporte("HO");

                        var datosReporte = new Dictionary<string, object>();

                        rd = new rptKPIMetricasRendimiento();
                        var tipo = int.Parse(Request.QueryString["tipo"]);
                        var modelo = int.Parse(Request.QueryString["modelo"]);
                        string strCC = Request.QueryString["cc"];
                        List<string> cc = strCC.Split(',').ToList();
                        var anio = Convert.ToDateTime(Request.QueryString["anio"]);
                        var mes = Convert.ToDateTime(Request.QueryString["mes"]);
                        var mesPalabra = Request.QueryString["mesPalabra"];
                        var ccNombre = Request.QueryString["ccNombre"];

                        kpiRepMetricasDTO data;
                        if (Session["datosReporte"] != null)
                        {
                            datosReporte = Session["datosReporte"] as Dictionary<string, object>;
                            data = datosReporte["data"] as kpiRepMetricasDTO;
                        }
                        else
                        {
                            data = kpiFactoryServices.getKPIFactoryService().getKPIRepMetricasDTO(cc, tipo, modelo, anio, mes);

                            datosReporte.Add("data", data);
                        }

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Dirección de Maquinaria y Equipo", "METRICAS DE RENDIMIENTO Y TIPO DE MANTENIMIENTO"));//bien

                        rd.Database.Tables[1].SetDataSource(data.AnualDTO.ToList());//bien
                        rd.Database.Tables[2].SetDataSource(data.kpiMTGraficaTiemposParo.ToList());//bien
                        rd.Database.Tables[3].SetDataSource(data.kpiMTGraficaDisponibilidad.ToList());//bien
                        rd.Database.Tables[4].SetDataSource(data.kpiMTGraficaTendenciaMTTO.ToList());//bien
                        rd.Database.Tables[5].SetDataSource(data.kpiMTGraficaTiposMTTO.ToList());//bien

                        rd.SetParameterValue("CentroCostos", ccNombre);
                        rd.SetParameterValue("RangoFechas", "REPORTE DEL AÑO " + anio.Year);
                        Session.Add("reporte", rd);
                        Session.Add("datosReporte", datosReporte);
                        break;
                    }
                case ReportesEnum.KPIGRAFICAS:
                    {
                        setMedidasReporte("HO");
                        rd = new rptKPIMensual();
                        var tipo = int.Parse(Request.QueryString["tipo"]);
                        var modelo = int.Parse(Request.QueryString["modelo"]);
                        string strCC = Request.QueryString["cc"];
                        List<string> cc = strCC.Split(',').ToList();
                        var anio = Convert.ToDateTime(Request.QueryString["anio"]);
                        var mes = Convert.ToDateTime(Request.QueryString["mes"]);
                        var mesPalabra = Request.QueryString["mesPalabra"];
                        var ccNombre = Request.QueryString["ccNombre"];
                        var data = kpiFactoryServices.getKPIFactoryService().getKPIRepGraficas(cc, tipo, modelo, anio, mes);

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Dirección de Maquinaria y Equipo", "Indicadores Claves de Desempeño"));//bien

                        rd.Database.Tables[1].SetDataSource(data.GraficaFamiliasDTO);//bien
                        rd.Database.Tables[2].SetDataSource(data.MotivosParoDTO);//bien

                        rd.SetParameterValue("CentroCostos", ccNombre);
                        string fullMonthName = mes.ToString("MMMM", CultureInfo.CreateSpecificCulture("es"));
                        rd.SetParameterValue("RangoFechas", fullMonthName);
                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.FormatoAditivaDeductiva://raguilar
                    {
                        setMedidasReporte("HC");
                        rd = new rptFormatoAditivaDeductiva();
                        int fId = int.Parse(Request.QueryString["fId"]);
                        List<tblRH_AditivaDeductiva> lstobjAditivaDeduc = new List<tblRH_AditivaDeductiva>();
                        tblRH_AditivaDeductiva objAditivaDeductiva = new tblRH_AditivaDeductiva();
                        List<tblRH_AditivaDeductivaDet> lstobjAditivaDeducDet = new List<tblRH_AditivaDeductivaDet>();
                        List<tblRH_AditivaDeductivaDet> lstobjAditivaDeducDet2 = new List<tblRH_AditivaDeductivaDet>();
                        List<tblRH_AutorizacionAditivaDeductiva> lstobjAutAditivaDeducDet = new List<tblRH_AutorizacionAditivaDeductiva>();

                        lstobjAditivaDeduc.Add(objAditivaDeductivaFactoryServices.getAditivaDeductivaService().getFormatoAditivaDeductivaByID(fId));

                        lstobjAutAditivaDeducDet = objAutadivaDeductivaFactoryService.getAutAditivaDeductivaService().getAutorizacion(fId);
                        lstobjAditivaDeducDet = objAditivaDeductivaDetFactoryService.getAditivaDeductivaDetService().getAditivaDeductivaDet(fId).OrderBy(x => x.id).ToList();
                        string puestoCat = "";
                        int idpuestoCat = 0;
                        List<rptAditivaDeductivaDTO> lstobjrptAditivaDeductivaDTO = new List<rptAditivaDeductivaDTO>();
                        lstobjAditivaDeducDet2 = lstobjAditivaDeducDet.ToList();
                        lstobjAditivaDeducDet2 = lstobjAditivaDeducDet2.GroupBy(g => new { g.puesto }, (k, g) => new tblRH_AditivaDeductivaDet()
                        {
                            aditiva = g.FirstOrDefault().aditiva,
                            deductiva = g.FirstOrDefault().deductiva,
                            puesto = k.puesto ?? "",
                            justificacion = g.FirstOrDefault().justificacion ?? "",
                            numPersTotal = g.FirstOrDefault().numPersTotal,
                            lugaresPlantilla = g.FirstOrDefault().lugaresPlantilla,
                            personalFaltante = g.FirstOrDefault().personalFaltante,
                            personalExistente = g.FirstOrDefault().personalExistente,
                            personalNecesario = g.FirstOrDefault().personalNecesario,
                            categoria = g.FirstOrDefault().categoria ?? "",
                            id = g.FirstOrDefault().id,
                            id_AditivaDeductiva = g.FirstOrDefault().id_AditivaDeductiva
                        }).ToList();
                        List<personalDTO> lstpersonal = new List<personalDTO>();//incluye existente necesario faltante
                        foreach (var item in lstobjAditivaDeducDet2)
                        {
                            idpuestoCat = item.id;
                            puestoCat = item.puesto;
                            rptAditivaDeductivaDTO objrptAditivaDeductivaDTO = new rptAditivaDeductivaDTO();
                            objrptAditivaDeductivaDTO.id = item.id;
                            objrptAditivaDeductivaDTO.puesto = item.puesto ?? "";
                            objrptAditivaDeductivaDTO.personalFaltante = item.personalFaltante;
                            objrptAditivaDeductivaDTO.lugaresPlantilla = item.lugaresPlantilla;
                            objrptAditivaDeductivaDTO.numPersTotal = item.numPersTotal;
                            objrptAditivaDeductivaDTO.aditiva = item.aditiva;
                            objrptAditivaDeductivaDTO.deductiva = item.deductiva;
                            objrptAditivaDeductivaDTO.justificacion = item.justificacion ?? "";
                            var grupos = lstobjAditivaDeducDet.Select(n => n).Where(n => n.puesto == item.puesto).ToList();

                            foreach (var objResults in grupos)
                            {
                                personalDTO objpersonal = new personalDTO();
                                objpersonal.id = idpuestoCat;
                                objpersonal.personalFaltante = objResults.personalFaltante;
                                objpersonal.personalNecesario = objResults.personalNecesario;
                                objpersonal.personalExistente = objResults.personalExistente;
                                objpersonal.categoria = objResults.categoria ?? "";
                                lstpersonal.Add(objpersonal);
                            }
                            lstobjrptAditivaDeductivaDTO.Add(objrptAditivaDeductivaDTO);
                        }
                        lstobjrptAditivaDeductivaDTO.Sort((p, q) => string.Compare(p.puesto, q.puesto));
                        rd.Database.Tables[0].SetDataSource(lstobjrptAditivaDeductivaDTO.ToList());//rptaditivadeductiva
                        rd.Database.Tables[1].SetDataSource(getInfoEnca("FORMATO ADITIVA-DEDUCTIVA PERSONAL", "RECURSOS HUMANOS"));//cabecera
                        rd.Database.Tables[2].SetDataSource(lstobjAditivaDeduc.ToList());//existente
                        rd.Database.Tables[3].SetDataSource(lstobjAutAditivaDeducDet.ToList());//autorizaciones
                        rd.Database.Tables[4].SetDataSource(lstpersonal.ToList());//categor
                        //parametros
                        rd.SetParameterValue("fechaAlta", lstobjAditivaDeduc.First().fecha_Alta.ToShortDateString());
                        rd.SetParameterValue("fechaCaptura", lstobjAditivaDeduc.First().fechaCaptura.ToShortDateString());
                        rd.SetParameterValue("hCC", lstobjAditivaDeduc.First().cC);
                        Session.Add("reporte", rd);
                        //var downloadPDF = (List<Byte[]>)Session["downloadPDF"];
                        break;
                    }

                case ReportesEnum.Facultamiento:
                    {
                        Session["downloadPDF"] = null;
                        var isCRModal = Convert.ToBoolean(Request.QueryString["isCRModal"]);
                        setMedidasReporte(isCRModal ? "HO" : "HorizontalCarta_NoModal");
                        var id = Request.QueryString["id"].ParseInt();
                        var empresaID = vSesiones.sesionEmpresaActual;
                        string empresaStr = Request.QueryString["empresa"];
                        if (empresaStr != null) { empresaID = int.Parse(empresaStr); }
                        var obj = facultamientofs.getFacutamientoService().getCuadro(id, empresaID);
                        var cc = obj.cc;
                        var isAdmin = vSesiones.sesionEmpresaActual.Equals((int)EmpresaEnum.Arrendadora) || cc.ParseInt(101) < 100;
                        if (isAdmin)
                            rd = new rptFacultamientoAdmin();
                        else
                            rd = new rptFacultamiento();

                        var lst = new List<tblFa_CatFacultamiento>();
                        obj.cc = string.Format("CC {0} - {1}", obj.cc, facultamientofs.getFacutamientoService().getNombreCC(obj.cc));
                        lst.Add(obj);
                        var lstAutorizacion = new List<tblFa_CatAutorizacion>();
                        var lstMonto = facultamientofs.getFacutamientoService().getMonto(obj.id, cc, empresaID).OrderBy(o => o.min).ToList();
                        var lstPuesto = facultamientofs.getFacutamientoService().GetLstPuesto(obj.id, empresaID);
                        lstMonto
                            .Where(w => vSesiones.sesionEmpresaActual.Equals((int)EmpresaEnum.Arrendadora) ? w.idTabla.Equals((int)TipoTablaEnum.Administrativo) : true)
                            .ToList().ForEach(e =>
                        {
                            lstAutorizacion.AddRange(facultamientofs.getFacutamientoService().getAutorizacion(e.id, e.renglon, empresaID));
                        });
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("", ""));
                        rd.Database.Tables[1].SetDataSource(lst.Select(x => new
                        {
                            cc = x.cc,
                            fecha = x.fecha,
                            obra = isAdmin ? string.Empty : (x.obra ?? string.Empty)
                        }));
                        Session["lstAutorizacion"] = lstAutorizacion;
                        if (isAdmin)
                        {
                            var dsMonto = new Dictionary<int, string>();
                            lstAutorizacion.Where(w => !string.IsNullOrEmpty(w.nombre)).GroupBy(g => g.renglon).ToList().ForEach(r =>
                            {
                                var vistoBueno = string.Empty;
                                var vistoBueno2 = string.Empty;
                                var autoriza = string.Empty;
                                r.ToList().ForEach(a =>
                                {
                                    if (a.idTipoAutorizacion == 2)
                                        if (vistoBueno.Length == 0)
                                            vistoBueno += a.nombre;
                                        else
                                            vistoBueno += (" / " + a.nombre);
                                });
                                if (vistoBueno.Length > 0)
                                {
                                    if (r.Any(w => w.idTipoAutorizacion.Equals(2)))
                                        vistoBueno += " ";
                                    if (r.Any(w => w.idTipoAutorizacion.Equals(3)))
                                        vistoBueno += " Y ";
                                }
                                r.ToList().ForEach(a =>
                                {
                                    if (a.idTipoAutorizacion == 3)
                                        if (vistoBueno2.Length == 0)
                                            vistoBueno2 += a.nombre;
                                        else
                                            vistoBueno2 += (" / " + a.nombre);
                                });
                                if (vistoBueno2.Length > 0 || vistoBueno.Length > 0)
                                    vistoBueno2 += r.Where(w => w.idTipoAutorizacion > 1).Count() > 1 ? " dan Vobo. " : " da Vobo. ";
                                r.ToList().ForEach(a =>
                                {
                                    if (a.idTipoAutorizacion == 1)
                                        if (autoriza.Length == 0)
                                            autoriza += a.nombre;
                                        else
                                            autoriza += (" / " + a.nombre);
                                });
                                if (autoriza.Length > 0)
                                    autoriza += r.Where(w => w.idTipoAutorizacion == 1).Count() > 1 ? " autorizan." : " autoriza.";
                                dsMonto.Add(r.FirstOrDefault().renglon, (vistoBueno + vistoBueno2 + autoriza).ToUpper());
                            });
                            rd.Database.Tables[2].SetDataSource(lstAutorizacion.Where(w => !string.IsNullOrEmpty(w.descPuesto)).GroupBy(g => g.nombre)
                            .Select(x => new
                            {
                                empleado = (EnumHelper.GetDescription((TituloEnum)x.FirstOrDefault().idTitulo)) + " " + x.FirstOrDefault().nombre,
                                puesto = x.FirstOrDefault().descPuesto
                            }));
                            rd.Database.Tables[3].SetDataSource(lstMonto.Where(w => w.idTabla == (int)TipoTablaEnum.Administrativo)
                            .Select(x => new
                            {
                                monto = x.max == 0 ? string.Format("Del {0:C2} en adelante", x.min) : string.Format("Del {0:C2} al {1:C2}", x.min, x.max),
                                refacciones = dsMonto[x.renglon]
                            }));
                        }
                        else
                        {
                            var lstRefac = new List<tblFa_CatAutorizacion>();
                            var lstMaterial = new List<tblFa_CatAutorizacion>();
                            lstMonto.Where(w => w.idTabla == (int)TipoTablaEnum.Refacciones).ToList().ForEach(m =>
                                        {
                                            lstRefac.AddRange(lstAutorizacion.Where(a => a.idMonto == m.id));
                                        });
                            lstMonto.Where(w => w.idTabla == (int)TipoTablaEnum.Materiales).ToList().ForEach(m =>
                            {
                                lstMaterial.AddRange(lstAutorizacion.Where(a => a.idMonto == m.id));
                            });
                            var dsRefac = new Dictionary<int, string>();
                            var dsMaterial = new Dictionary<int, string>();
                            var dsMatMonto = lstMonto.Where(w => w.idTabla == (int)TipoTablaEnum.Materiales).ToList();
                            var dsRefacMonto = lstMonto.Where(w => w.idTabla == (int)TipoTablaEnum.Refacciones).ToList();
                            lstMonto.Where(w => w.idTabla == (int)TipoTablaEnum.Refacciones).ToList().ForEach(m =>
                            {
                                lstRefac.AddRange(lstAutorizacion.Where(a => a.idMonto == m.id));
                            });
                            lstMonto.Where(w => w.idTabla == (int)TipoTablaEnum.Materiales).ToList().ForEach(m =>
                            {
                                lstMaterial.AddRange(lstAutorizacion.Where(a => a.idMonto == m.id));
                            });
                            lstMonto.GroupBy(g => g.idTabla).ToList().ForEach(m =>
                            {
                                lstAutorizacion
                                    .Where(w => m.ToList()
                                        .Exists(e => e.id == w.idMonto && !string.IsNullOrEmpty(w.nombre)))
                                    .GroupBy(g => g.renglon)
                                    .ToList().ForEach(r =>
                                {
                                    var vistoBueno = string.Empty;
                                    var vistoBueno2 = string.Empty;
                                    var autoriza = string.Empty;
                                    r.ToList().ForEach(a =>
                                    {
                                        if (a.idTipoAutorizacion == 2)
                                            if (vistoBueno.Length == 0)
                                                vistoBueno += a.nombre;
                                            else
                                                vistoBueno += (" / " + a.nombre);
                                    });
                                    if (vistoBueno.Length > 0)
                                    {
                                        if (r.Any(w => w.idTipoAutorizacion.Equals(2)))
                                            vistoBueno += " ";
                                        if (r.Any(w => w.idTipoAutorizacion.Equals(3)))
                                            vistoBueno += " Y ";
                                    }
                                    r.ToList().ForEach(a =>
                                    {
                                        if (a.idTipoAutorizacion == 3)
                                            if (vistoBueno2.Length == 0)
                                                vistoBueno2 += a.nombre;
                                            else
                                                vistoBueno2 += (" / " + a.nombre);
                                    });
                                    if (vistoBueno.Length > 0 || vistoBueno2.Length > 0)
                                        vistoBueno2 += r.Where(w => w.idTipoAutorizacion > 1).Count() > 1 ? " dan Vobo. " : " da Vobo. ";
                                    r.ToList().ForEach(a =>
                                    {
                                        if (a.idTipoAutorizacion == 1)
                                            if (autoriza.Length == 0)
                                                autoriza += a.nombre;
                                            else
                                                autoriza += (" / " + a.nombre);
                                    });
                                    if (autoriza.Length > 0)
                                        autoriza += r.Where(w => w.idTipoAutorizacion == 1).Count() > 1 ? " autorizan." : " autoriza.";
                                    if (m.FirstOrDefault().idTabla == 1)
                                        dsRefac.Add(r.FirstOrDefault().renglon, (vistoBueno + vistoBueno2 + autoriza).ToUpper());
                                    else
                                        dsMaterial.Add(r.FirstOrDefault().renglon, (vistoBueno + vistoBueno2 + autoriza).ToUpper());
                                });
                            });
                            if (dsMaterial.Count == 0)
                            {
                                var i = 0;
                                dsMatMonto.ForEach(e =>
                                {
                                    dsMaterial.Add(++i, string.Empty);
                                });
                            }
                            rd.Database.Tables[2].SetDataSource(dsRefacMonto.Select(x => new
                            {
                                monto = x.max == 0 ? string.Format("Del {0:C2} en adelante", x.min) : string.Format("Del {0:C2} al {1:C2}", x.min, x.max),
                                refacciones = dsRefac[x.renglon]
                            }));

                            rd.Database.Tables[4].SetDataSource(dsMatMonto.Select(x => new
                            {
                                matMonto = x.max == 0 ? string.Format("Del {0:C2} en adelante", x.min) : string.Format("Del {0:C2} al {1:C2}", x.min, x.max),
                                materiales = ((dsMaterial.Where(y => y.Key == x.renglon).Count() > 0) ? dsMaterial[x.renglon] : string.Empty)
                            }));
                            rd.Database.Tables[3].SetDataSource(lstRefac.Where(w => !string.IsNullOrEmpty(w.descPuesto)).GroupBy(g => g.nombre)
                            .Select(x => new
                            {
                                empleado = (EnumHelper.GetDescription((TituloEnum)x.FirstOrDefault().idTitulo)) + " " + x.FirstOrDefault().nombre,
                                puesto = x.FirstOrDefault().descPuesto
                            }));
                            rd.Database.Tables[5].SetDataSource(lstMaterial.Where(w => !string.IsNullOrEmpty(w.descPuesto)).GroupBy(g => g.nombre)
                            .Select(x => new
                            {
                                matEmpleado = (EnumHelper.GetDescription((TituloEnum)x.FirstOrDefault().idTitulo)) + " " + x.FirstOrDefault().nombre,
                                matPuesto = x.FirstOrDefault().descPuesto
                            }));
                        }
                        rd.Database.Tables[isAdmin ? 4 : 6].SetDataSource(
                            lstPuesto
                            .Where(p => !string.IsNullOrEmpty(p.puesto))
                            .OrderBy(o => o.idTabla)
                            .ThenBy(o => o.orden)
                            .Select(p => new
                            {
                                orden = (EnumHelper.GetDescription((TipoAutorizacionEnum)p.orden)),
                                idTabla = (EnumHelper.GetDescription((TipoPuestoEnum)p.idTabla)),
                                puesto = p.puesto.ToUpper()
                            }));
                        Session.Add("reporte", rd);
                        break;
                    }

                case ReportesEnum.Poliza:
                    {
                        setMedidasReporte("HO");

                        var ppto = false;
                        var poliza = "";

                        bool isResumen = false;
                        bool isCC = false;
                        bool isPorHoja = false;
                        bool isFirma = false;
                        string Estatus = "";
                        string icc = "";
                        string fcc = "";
                        int iPol = 0;
                        int fPol = 0;
                        string iPer = "";
                        string fPer = "";
                        string iTp = "";
                        string fTp = "";
                        string firma1 = "";
                        string firma2 = "";

                        if (Request.QueryString["ppto"] != null)
                        {
                            ppto = Convert.ToBoolean(Request.QueryString["ppto"]);
                            poliza = Request.QueryString["poliza"];
                        }
                        else
                        {
                            isCC = Convert.ToBoolean(Request.QueryString["isCC"]);
                            isPorHoja = Convert.ToBoolean(Request.QueryString["isPorHoja"]);
                            isFirma = Convert.ToBoolean(Request.QueryString["isFirma"]);
                            Estatus = Request.QueryString["Estatus"];
                            icc = Request.QueryString["icc"];
                            fcc = Request.QueryString["fcc"];
                            iPol = Convert.ToInt32(Request.QueryString["iPol"]);
                            fPol = Convert.ToInt32(Request.QueryString["fPol"]);
                            iPer = Request.QueryString["iPer"];
                            fPer = Request.QueryString["fPer"];
                            iTp = Request.QueryString["iTp"];
                            fTp = Request.QueryString["fTp"];
                            firma1 = Request.QueryString["firma1"];
                            firma2 = Request.QueryString["firma2"];
                            ppto = Convert.ToBoolean(Request.QueryString["ppto"]);
                            poliza = Request.QueryString["poliza"];
                        }

                        isResumen = Convert.ToBoolean(Request.QueryString["isResumen"]);

                        var fechaPol = new DateTime();
                        if (!isCC)
                        {
                            icc = "001";
                            fcc = "C72";
                        }
                        if (isResumen)
                        {
                            rd = new rptPoliza();
                            var lstPol = new List<Core.DTO.Contabilidad.Poliza.RepPolizaDTO>();
                            if (!ppto)
                            {
                                lstPol = polizaFS.getPolizaService().getPolizaEk(Estatus, iPol, fPol, iPer, fPer, iTp, fTp);
                            }
                            else
                            {
                                var pol = poliza.Split('-');
                                lstPol = polizaFS.getPolizaService().getPolizaEk(Convert.ToInt32(pol[0]), Convert.ToInt32(pol[1]), Convert.ToInt32(pol[2]), pol[3]);
                            }
                            //rd.Database.Tables[0].SetDataSource(getInfoEnca(vSesiones.sesionUsuarioDTO.nombreUsuario, string.Empty));
                            rd.Database.Tables[0].SetDataSource(getInfoEnca(vSesiones.sesionEmpresaActualNombre, string.Empty));
                            rd.Database.Tables[1].SetDataSource(lstPol);

                            fechaPol = lstPol.First().fechapol;
                            lstPol = null;
                        }
                        else
                        {
                            IList<Core.DTO.Contabilidad.Poliza.RepMovPoliza2DTO> lstPol;

                            if (isPorHoja)
                            {
                                if (ppto)
                                {
                                    rd = new rptMovPolHoja();
                                    var pol = poliza.Split('-');
                                    lstPol = polizaFS.getPolizaService().getMovPolizaEk(Convert.ToInt32(pol[0]), Convert.ToInt32(pol[1]), Convert.ToInt32(pol[2]), pol[3]);
                                }
                                else
                                {
                                    if (isFirma)
                                    {
                                        rd = new rptMovPolFirma();
                                        lstPol = polizaFS.getPolizaService().getMovPolizaEk(Estatus, iPol, fPol, iPer, fPer, iTp, fTp, icc, fcc);
                                    }
                                    else
                                    {
                                        rd = new rptMovPolHoja();
                                        lstPol = polizaFS.getPolizaService().getMovPolizaEk(Estatus, iPol, fPol, iPer, fPer, iTp, fTp, icc, fcc);
                                    }
                                }
                            }
                            else
                            {
                                rd = new rptMovPoliza();
                                if (ppto)
                                {
                                    var pol = poliza.Split('-');
                                    lstPol = polizaFS.getPolizaService().getMovPolizaEk(Convert.ToInt32(pol[0]), Convert.ToInt32(pol[1]), Convert.ToInt32(pol[2]), pol[3]);
                                }
                                else
                                {
                                    lstPol = polizaFS.getPolizaService().getMovPolizaEk(Estatus, iPol, fPol, iPer, fPer, iTp, fTp, icc, fcc);
                                }
                            }
                            //rd.Database.Tables[0].SetDataSource(getInfoEnca(vSesiones.sesionUsuarioDTO.nombreUsuario, string.Empty));
                            rd.Database.Tables[0].SetDataSource(getInfoEnca(vSesiones.sesionEmpresaActualNombre, string.Empty));
                            rd.Database.Tables[1].SetDataSource(lstPol);

                            fechaPol = lstPol.First().fechapol;
                            lstPol = null;

                            if (isPorHoja && isFirma)
                            {
                                rd.SetParameterValue("Firma1", firma1, "rptSubMovPoliza");
                                rd.SetParameterValue("Firma2", firma2, "rptSubMovPoliza");
                            }
                            //rd.SetParameterValue("hCCCorto", setTitleCCCorto());
                            rd.SetParameterValue("hCCCorto", "CC");
                        }
                        //var strCC = "Del Centro de Costos : (" + icc + "): " + centroCostosFactoryServices.getCentroCostosService().getNombreCCFix(icc) + " AL: (" + fcc + "): " + centroCostosFactoryServices.getCentroCostosService().getNombreCCFix(fcc);
                        var strCC = "Del Centro de Costos : (" + icc + "): " + centroCostosFactoryServices.getCentroCostosService().getNombreCC(icc) + " AL: (" + fcc + "): " + centroCostosFactoryServices.getCentroCostosService().getNombreCC(fcc);
                        var strPer = "Periodo del " + iPer + " Al " + fPer;
                        rd.SetParameterValue("RangoCC", strCC);
                        rd.SetParameterValue("RangoPeriodo", strPer);
                        rd.SetParameterValue("FechaPol", fechaPol.ToShortDateString());
                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.PolizaPruebas:
                    {
                        setMedidasReporte("HO");
                        var isResumen = Convert.ToBoolean(Request.QueryString["isResumen"]);
                        var isCC = Convert.ToBoolean(Request.QueryString["isCC"]);
                        var isPorHoja = Convert.ToBoolean(Request.QueryString["isPorHoja"]);
                        var isFirma = Convert.ToBoolean(Request.QueryString["isFirma"]);
                        var Estatus = Request.QueryString["Estatus"];
                        var icc = Request.QueryString["icc"];
                        var fcc = Request.QueryString["fcc"];
                        var iPol = Convert.ToInt32(Request.QueryString["iPol"]);
                        var fPol = Convert.ToInt32(Request.QueryString["fPol"]);
                        var iPer = Request.QueryString["iPer"];
                        var fPer = Request.QueryString["fPer"];
                        var iTp = Request.QueryString["iTp"];
                        var fTp = Request.QueryString["fTp"];
                        var firma1 = Request.QueryString["firma1"];
                        var firma2 = Request.QueryString["firma2"];

                        var fechaPol = new DateTime();
                        if (!isCC)
                        {
                            icc = "001";
                            fcc = "C72";
                        }
                        if (isResumen)
                        {
                            rd = new rptPoliza();
                            var lstPol = polizaFS.getPolizaService().getPolizaEkPruebaArrendadora(Estatus, iPol, fPol, iPer, fPer, iTp, fTp);
                            //rd.Database.Tables[0].SetDataSource(getInfoEnca(vSesiones.sesionUsuarioDTO.nombreUsuario, string.Empty));
                            rd.Database.Tables[0].SetDataSource(getInfoEnca("CONSTRUPLAN, S.A. DE C.V.", string.Empty));
                            rd.Database.Tables[1].SetDataSource(lstPol);

                            fechaPol = lstPol.First().fechapol;
                            lstPol = null;
                        }
                        else
                        {
                            if (isPorHoja)
                            {
                                if (isFirma)
                                    rd = new rptMovPolFirma();
                                else
                                    rd = new rptMovPolHoja();
                            }
                            else
                                rd = new rptMovPoliza();
                            IList<Core.DTO.Contabilidad.Poliza.RepMovPoliza2DTO> lstPol = polizaFS.getPolizaService().getMovPolizaEkPruebaArrendadora(Estatus, iPol, fPol, iPer, fPer, iTp, fTp, icc, fcc);
                            //rd.Database.Tables[0].SetDataSource(getInfoEnca(vSesiones.sesionUsuarioDTO.nombreUsuario, string.Empty));
                            rd.Database.Tables[0].SetDataSource(getInfoEnca("CONSTRUPLAN, S.A. DE C.V.", string.Empty));
                            rd.Database.Tables[1].SetDataSource(lstPol);

                            fechaPol = lstPol.First().fechapol;
                            lstPol = null;

                            if (isPorHoja && isFirma)
                            {
                                rd.SetParameterValue("Firma1", firma1, "rptSubMovPoliza");
                                rd.SetParameterValue("Firma2", firma2, "rptSubMovPoliza");
                            }
                            //rd.SetParameterValue("hCCCorto", setTitleCCCorto());
                            rd.SetParameterValue("hCCCorto", "CC");
                        }
                        //var strCC = "Del Centro de Costos : (" + icc + "): " + centroCostosFactoryServices.getCentroCostosService().getNombreCCFix(icc) + " AL: (" + fcc + "): " + centroCostosFactoryServices.getCentroCostosService().getNombreCCFix(fcc);
                        var strCC = "Del Centro de Costos : (" + icc + "): " + centroCostosFactoryServices.getCentroCostosService().getNombreCC(icc) + " AL: (" + fcc + "): " + centroCostosFactoryServices.getCentroCostosService().getNombreCC(fcc);
                        var strPer = "Periodo del " + iPer + " Al " + fPer;
                        rd.SetParameterValue("RangoCC", strCC);
                        rd.SetParameterValue("RangoPeriodo", strPer);
                        rd.SetParameterValue("FechaPol", fechaPol.ToShortDateString());
                        Session.Add("reporte", rd);
                        break;
                    }

                case ReportesEnum.PolizasEmpresa:
                    {
                        setMedidasReporte("HO");
                        var empresa = (EmpresaEnum)Convert.ToInt32(Request.QueryString["empresa"]);
                        var isResumen = Convert.ToBoolean(Request.QueryString["isResumen"]);
                        var isCC = Convert.ToBoolean(Request.QueryString["isCC"]);
                        var isPorHoja = Convert.ToBoolean(Request.QueryString["isPorHoja"]);
                        var isFirma = Convert.ToBoolean(Request.QueryString["isFirma"]);
                        var icc = Request.QueryString["icc"];
                        var fcc = Request.QueryString["fcc"];
                        var iPol = Convert.ToInt32(Request.QueryString["iPol"]);
                        var fPol = Convert.ToInt32(Request.QueryString["fPol"]);
                        var iPer = Request.QueryString["iPer"];
                        var fPer = Request.QueryString["fPer"];
                        var iTp = Request.QueryString["iTp"];
                        var fTp = Request.QueryString["fTp"];
                        var firma1 = Request.QueryString["firma1"];
                        var firma2 = Request.QueryString["firma2"];

                        var fechaPol = new DateTime();
                        if (!isCC)
                        {
                            icc = "001";
                            fcc = "C72";
                        }
                        if (isResumen)
                        {
                            rd = new rptPoliza();
                            var lstPol = polizaFS.getPolizaService().getPolizaPorEmpresa(empresa, iPol, fPol, iPer, fPer, iTp, fTp);
                            //rd.Database.Tables[0].SetDataSource(getInfoEnca(vSesiones.sesionUsuarioDTO.nombreUsuario, string.Empty));
                            rd.Database.Tables[0].SetDataSource(getInfoEnca("CONSTRUPLAN, S.A. DE C.V.", string.Empty));
                            rd.Database.Tables[1].SetDataSource(lstPol);
                            if (vSesiones.sesionEmpresaActual == 6)
                            {
                                lstPol = null;
                            }
                            else
                            {
                                fechaPol = lstPol.First().fechapol;
                                lstPol = null;
                            }

                        }
                        else
                        {
                            if (isPorHoja)
                            {
                                if (isFirma)
                                    rd = new rptMovPolFirma();
                                else
                                    rd = new rptMovPolHoja();
                            }
                            else
                                rd = new rptMovPoliza();
                            IList<Core.DTO.Contabilidad.Poliza.RepMovPoliza2DTO> lstPol = polizaFS.getPolizaService().getMovPolizaPorEmpresa(empresa, iPol, fPol, iPer, fPer, iTp, fTp, icc, fcc);
                            //rd.Database.Tables[0].SetDataSource(getInfoEnca(vSesiones.sesionUsuarioDTO.nombreUsuario, string.Empty));
                            rd.Database.Tables[0].SetDataSource(getInfoEnca("CONSTRUPLAN, S.A. DE C.V.", string.Empty));
                            rd.Database.Tables[1].SetDataSource(lstPol);

                            if (vSesiones.sesionEmpresaActual == 6)
                            {
                                lstPol = null;
                            }
                            else
                            {
                                fechaPol = lstPol.First().fechapol;
                                lstPol = null;
                            }

                            if (isPorHoja && isFirma)
                            {
                                rd.SetParameterValue("Firma1", firma1, "rptSubMovPoliza");
                                rd.SetParameterValue("Firma2", firma2, "rptSubMovPoliza");
                            }
                            //rd.SetParameterValue("hCCCorto", setTitleCCCorto());
                            rd.SetParameterValue("hCCCorto", "CC");
                        }
                        //var strCC = "Del Centro de Costos : (" + icc + "): " + centroCostosFactoryServices.getCentroCostosService().getNombreCCFix(icc) + " AL: (" + fcc + "): " + centroCostosFactoryServices.getCentroCostosService().getNombreCCFix(fcc);
                        var strCC = "Del Centro de Costos : (" + icc + "): " + centroCostosFactoryServices.getCentroCostosService().getNombreCC(icc) + " AL: (" + fcc + "): " + centroCostosFactoryServices.getCentroCostosService().getNombreCC(fcc);
                        var strPer = "Periodo del " + iPer + " Al " + fPer;
                        rd.SetParameterValue("RangoCC", strCC);
                        rd.SetParameterValue("RangoPeriodo", strPer);
                        rd.SetParameterValue("FechaPol", fechaPol.ToShortDateString());
                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.ReporteFiniquitoRH:
                    {
                        setMedidasReporte("HO");
                        setMedidasReporte("HC");
                        rd = new rptFiniquito();

                        var finiquitoID = Int32.Parse(Request.QueryString["fId"]);
                        var finiquito = finiquitoFactoryServices.getFiniquitoService().GetDetalleFin(finiquitoID);
                        var conceptos = finiquitoFactoryServices.getFiniquitoService().getConceptos();
                        var conceptosPlus = conceptos.Where(x => x.operador == true).Select(y => y.id).ToList();
                        var conceptosMinus = conceptos.Where(x => x.operador == false).Select(y => y.id).ToList();

                        var RepFiniquitoTabla1DTO = finiquito.detalle.Where(x => x.conceptoID == 1 || x.conceptoID == 2).Select(y => new
                        {
                            concepto = y.conceptoNombre + " " + y.conceptoInfo,
                            info = "",
                            valor1 = y.operacion1,
                            valor2 = y.operacion2,
                            valor3 = y.operacion3,
                            valor4 = "$" + y.operacion4.ToString(),
                            valor5 = "$" + y.resultado.ToString()
                        }).ToList();

                        var RepFiniquitoTabla2DTO = finiquito.detalle.Where(x => x.conceptoID != 1 && x.conceptoID != 2).Select(y => new
                        {
                            concepto = (y.conceptoID == 9 && y.conceptoNombre.Contains("OTROS")) ? y.conceptoInfo : y.conceptoNombre + " " + y.conceptoInfo,
                            valor1 = "",
                            valor2 = (y.resultado.ToString() != "") ? y.conceptoDetalle + "     =" : y.conceptoDetalle,
                            valor3 = (conceptosPlus.Contains(y.conceptoID)) ? "$" + y.resultado.ToString() : "(-) $" + y.resultado.ToString()
                        }).ToList();

                        rd.Database.Tables[0].SetDataSource(RepFiniquitoTabla1DTO);
                        rd.Database.Tables[1].SetDataSource(RepFiniquitoTabla2DTO);
                        rd.Database.Tables[2].SetDataSource(getInfoEnca(string.Empty, string.Empty));
                        rd.SetParameterValue("fechaHoy", DateTime.Today.Date);
                        rd.SetParameterValue("ubicacion", "HERMOSILLO, SON");
                        rd.SetParameterValue("fechaIngreso", finiquito.fechaAlta.ToShortDateString());
                        rd.SetParameterValue("fechaEgreso", finiquito.fechaBaja.HasValue ? finiquito.fechaBaja.Value.ToShortDateString() : "");

                        double bonoMensual = 0;
                        double sueldoMensual = 0;
                        double complementoMensual = 0;
                        if (finiquito.tipoNominaID == 1)
                        {
                            bonoMensual = ((float)finiquito.bono / 7) * 30.4;
                            sueldoMensual = ((float)finiquito.salarioBase / 7) * 30.4;
                            complementoMensual = ((float)finiquito.complemento / 7) * 30.4;
                        }
                        else if (finiquito.tipoNominaID == 4)
                        {
                            bonoMensual = (float)finiquito.bono * 2;
                            sueldoMensual = (float)finiquito.salarioBase * 2;
                            complementoMensual = (float)finiquito.complemento * 2;
                        }
                        var sueldoFinal = sueldoMensual + complementoMensual + bonoMensual;
                        rd.SetParameterValue("sueldoMensual", sueldoFinal.ToString("0.00"));

                        rd.SetParameterValue("puesto", finiquito.puesto);
                        rd.SetParameterValue("area", finiquito.cc);

                        rd.SetParameterValue("total", finiquito.total);
                        rd.SetParameterValue("puesto2", finiquito.puesto);
                        rd.SetParameterValue("empleado", finiquito.nombre + " " + finiquito.ape_paterno + " " + finiquito.ape_materno);

                        var formuloEmpleado = finiquitoFactoryServices.getFiniquitoService().getUsuario(finiquito.formuloID);
                        rd.SetParameterValue("formuloEmpleado", finiquito.formuloNombre);
                        rd.SetParameterValue("formuloPuesto", formuloEmpleado.puesto.descripcion);

                        var voboEmpleado = finiquitoFactoryServices.getFiniquitoService().getUsuario(finiquito.voboID);
                        rd.SetParameterValue("voboEmpleado", finiquito.voboNombre != null ? finiquito.voboNombre : "");
                        rd.SetParameterValue("voboPuesto", voboEmpleado != null ? voboEmpleado.puesto.descripcion : "");

                        var autorizoEmpleado = finiquitoFactoryServices.getFiniquitoService().getUsuario(finiquito.autorizoID);
                        rd.SetParameterValue("autorizoEmpleado", finiquito.autorizoNombre != null ? finiquito.autorizoNombre : "");
                        rd.SetParameterValue("autorizoPuesto", autorizoEmpleado != null ? autorizoEmpleado.puesto.descripcion : "");

                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.ReporteCargoNominaCCArrendadora:
                    {
                        setMedidasReporte("HC");
                        rd = new rptCargoNominaCCArrendadora();
                        var periodoInicial = vSesiones.sesionPeriodoInicial;
                        var periodoFinal = vSesiones.sesionPeriodoFinal;
                        var nominaSemanal = vSesiones.sesionNominaSemanal;
                        var nominaSemanalDecimal = Convert.ToDecimal(nominaSemanal, CultureInfo.InvariantCulture);
                        var id = Int32.Parse(Request.QueryString["idNomina"]);
                        var arrProyectos = vSesiones.sesionArrProyectos;
                        var proyectosString = string.Empty;
                        proyectosString = arrProyectos.Count == 0 ? maquinaFactoryServices.getMaquinaServices().getNominaCCProyectos(id) : maquinaFactoryServices.getMaquinaServices().GetProyectosString(arrProyectos);
                        var data = maquinaFactoryServices.getMaquinaServices().GetEconomicos(arrProyectos, periodoInicial, periodoFinal);
                        if (!id.Equals(0))
                            data = maquinaFactoryServices.getMaquinaServices().getNominaCCDet(id.ParseInt()).Select(d => new RepCargoNominaCCArreDTO
                            {
                                cargoMaquina = d.cargoD,
                                descripcion = d.descripcion,
                                economicoID = d.idEconomico,
                                noEconomico = d.economico,
                                hhPeriodo = d.hh,
                                porcentajeCargo = d.cargoP,
                                cc = d.cc
                            }).ToList();
                        var sumaHHPeriodo = data.Select(x => x.hhPeriodo).Sum();

                        var ReporteCargoNominaCCTablaDTO = data.Select(y => new
                        {
                            economico = y.noEconomico,
                            descripcion = y.descripcion,
                            cc = y.cc,
                            hhPeriodo = y.hhPeriodo.ToString(),
                            porcentajeCargo = (sumaHHPeriodo != 0 ? (y.hhPeriodo / sumaHHPeriodo) * 100 : 0).ToString("0.00") + "%",
                            cargoMaquina = "$" + ((sumaHHPeriodo != 0 ? (y.hhPeriodo / sumaHHPeriodo) : 0) * nominaSemanalDecimal).ToString("#,##0.00")
                        }).ToList();

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Cargo de nómina por Centros de Costo.", string.Empty));
                        rd.Database.Tables[1].SetDataSource(ReporteCargoNominaCCTablaDTO);

                        rd.SetParameterValue("proyectos", proyectosString);
                        rd.SetParameterValue("periodoInicial", periodoInicial);
                        rd.SetParameterValue("periodoFinal", periodoFinal);
                        rd.SetParameterValue("nominaSemanal", ("$" + nominaSemanalDecimal.ToString("#,##0.00")));
                        rd.SetParameterValue("totalesHH", sumaHHPeriodo);

                        //Valor asignado de la nomina semanal en vez de la suma de todos los cargos individuales
                        rd.SetParameterValue("totalesCargo", ("$" + nominaSemanalDecimal.ToString("#,##0.00")));

                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.Mazda_PlanMaestro:
                    {
                        setMedidasReporte("HO");
                        rd = new rptPlanMaestro();

                        var lstMaestro = (List<Core.DTO.MAZDA.PlanMaestroDTO>)Session["lstMaestro"];

                        var lstMaestroMesesDesordenados = lstMaestro.Select(x => new Core.DTO.MAZDA.PlanMaestroDTO
                        {
                            id = x.id,
                            descripcion = x.descripcion,
                            periodo = x.periodo,
                            periodoDesc = x.periodoDesc,
                            areaID = x.areaID,
                            area = x.area,
                            cuadrillaID = x.cuadrillaID,
                            cuadrilla = x.cuadrilla,
                            mes1 = x.mes4,
                            mes2 = x.mes5,
                            mes3 = x.mes6,
                            mes4 = x.mes7,
                            mes5 = x.mes8,
                            mes6 = x.mes9,
                            mes7 = x.mes10,
                            mes8 = x.mes11,
                            mes9 = x.mes12,
                            mes10 = x.mes1,
                            mes11 = x.mes2,
                            mes12 = x.mes3
                        }).ToList();

                        var ahora = DateTime.Now;
                        List<string> MesesSet = metodo(3, ahora.Year);
                        var lstMes = new List<MesesDTO>() {
                            new MesesDTO(){
                                MES1 = MesesSet[0].Substring(0, 3),
                                MES2 = MesesSet[1].Substring(0, 3),
                                MES3 = MesesSet[2].Substring(0, 3),
                                MES4 = MesesSet[3].Substring(0, 3),
                                MES5 = MesesSet[4].Substring(0, 3),
                                MES6 = MesesSet[5].Substring(0, 3),
                                MES7 = MesesSet[6].Substring(0, 3),
                                MES8 = MesesSet[7].Substring(0, 3),
                                MES9 = MesesSet[8].Substring(0, 3),
                                MES10 = MesesSet[9].Substring(0, 3),
                                MES11 = MesesSet[10].Substring(0, 3),
                                MES12 = MesesSet[11].Substring(0, 3)
                            }
                        };
                        rd.Database.Tables[0].SetDataSource(getInfoEnca(string.Format("PLAN MAESTRO {0}", ahora.Year), string.Empty));
                        rd.Database.Tables[1].SetDataSource(lstMes);
                        rd.Database.Tables[2].SetDataSource(lstMaestroMesesDesordenados);
                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.Mazda_PlanMensual:
                    {
                        setMedidasReporte("HO");

                        rd = new rptPlanMensual();

                        var planMes = (PlanMesDTO)Session["planMes"];
                        var lstDias = (List<ComboDTO>)Session["lstDias"];
                        var year = (int)Session["year"];
                        var month = (int)Session["month"];
                        var mes = new DateTime(year, month, 1);

                        List<ReportePlanMensualDTO> list = new List<ReportePlanMensualDTO>();

                        //List<string> listDiasSemana = new List<string>();
                        //List<string> listDiasMes = new List<string>();

                        foreach (var pmDet in planMes.detalle)
                        {
                            var diasCheck = pmDet.dias;

                            list.Add(new ReportePlanMensualDTO
                            {
                                //equipoArea = pmDet.equipoAreaDesc,
                                dia1 = diasCheck.Contains(1) ? "🡺" : "",
                                dia2 = diasCheck.Contains(2) ? "🡺" : "",
                                dia3 = diasCheck.Contains(3) ? "🡺" : "",
                                dia4 = diasCheck.Contains(4) ? "🡺" : "",
                                dia5 = diasCheck.Contains(5) ? "🡺" : "",
                                dia6 = diasCheck.Contains(6) ? "🡺" : "",
                                dia7 = diasCheck.Contains(7) ? "🡺" : "",
                                dia8 = diasCheck.Contains(8) ? "🡺" : "",
                                dia9 = diasCheck.Contains(9) ? "🡺" : "",
                                dia10 = diasCheck.Contains(10) ? "🡺" : "",
                                dia11 = diasCheck.Contains(11) ? "🡺" : "",
                                dia12 = diasCheck.Contains(12) ? "🡺" : "",
                                dia13 = diasCheck.Contains(13) ? "🡺" : "",
                                dia14 = diasCheck.Contains(14) ? "🡺" : "",
                                dia15 = diasCheck.Contains(15) ? "🡺" : "",
                                dia16 = diasCheck.Contains(16) ? "🡺" : "",
                                dia17 = diasCheck.Contains(17) ? "🡺" : "",
                                dia18 = diasCheck.Contains(18) ? "🡺" : "",
                                dia19 = diasCheck.Contains(19) ? "🡺" : "",
                                dia20 = diasCheck.Contains(20) ? "🡺" : "",
                                dia21 = diasCheck.Contains(21) ? "🡺" : "",
                                dia22 = diasCheck.Contains(22) ? "🡺" : "",
                                dia23 = diasCheck.Contains(23) ? "🡺" : "",
                                dia24 = diasCheck.Contains(24) ? "🡺" : "",
                                dia25 = diasCheck.Contains(25) ? "🡺" : "",
                                dia26 = diasCheck.Contains(26) ? "🡺" : "",
                                dia27 = diasCheck.Contains(27) ? "🡺" : "",
                                dia28 = diasCheck.Contains(28) ? "🡺" : "",
                                dia29 = diasCheck.Contains(29) ? "🡺" : "",
                                dia30 = diasCheck.Contains(30) ? "🡺" : "",
                                dia31 = diasCheck.Contains(31) ? "🡺" : ""
                            });
                        }


                        rd.Database.Tables[0].SetDataSource(getInfoEnca(string.Format("PLAN MENSUAL {0} {1}", CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(month), year).ToUpper(), string.Empty));
                        rd.Database.Tables[1].SetDataSource(list);

                        var cuadrilla = Session["planMesCuadrilla"];
                        var periodo = Session["planMesPeriodo"];

                        rd.SetParameterValue("cuadrilla", cuadrilla);
                        rd.SetParameterValue("periodo", periodo);
                        rd.SetParameterValue("mes", CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(month).ToUpper());

                        for (var i = 0; i < 31; i++)
                        {
                            if (lstDias.Where(x => x.Value == (i + 1)).FirstOrDefault() != null)
                            {
                                //listDiasSemana.Add(lstDias.Where(x => x.Value == (i + 1)).FirstOrDefault().Text);
                                //listDiasMes.Add(lstDias.Where(x => x.Value == (i + 1)).FirstOrDefault().Value.ToString());

                                rd.SetParameterValue(("diaSem" + (i + 1)), lstDias.Where(x => x.Value == (i + 1)).FirstOrDefault().Text);
                                rd.SetParameterValue(("diaMes" + (i + 1)), lstDias.Where(x => x.Value == (i + 1)).FirstOrDefault().Value);
                            }
                            else
                            {
                                //listDiasSemana.Add("");
                                //listDiasMes.Add("");

                                rd.SetParameterValue(("diaSem" + (i + 1)), "");
                                rd.SetParameterValue(("diaMes" + (i + 1)), "");
                            }
                        }

                        Session.Add("reporte", rd);

                        break;
                    }
                case ReportesEnum.Mazda_RevisionAC:
                    {
                        setMedidasReporte("HC");
                        rd = new rptRevisionAC();

                        //var cuadrillaID = Int32.Parse(Request.QueryString["cuadrillaID"]);
                        var revisionID = Int32.Parse(Request.QueryString["revisionID"]);

                        var revision = MAZDAFactoryServices.getPlanActividadesService().getRevisionAC(revisionID);

                        var condensador = revision.detalle.Where(x => x.actividadID <= 12).Select(y => new
                        {
                            descripcion = y.actividad,
                            realizo = y.realizo == true ? "SÍ" : "NO",
                            observaciones = y.observaciones
                        }).ToList();

                        var evaporador = revision.detalle.Where(x => x.actividadID > 12).Select(y => new
                        {
                            descripcion = y.actividad,
                            realizo = y.realizo == true ? "SI" : "NO",
                            observaciones = y.observaciones
                        }).ToList();

                        var fecha = revision.fechaCaptura;
                        rd.Database.Tables[0].SetDataSource(getInfoEnca(string.Format("REVISIÓN AC {0} {1}", CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(fecha.Month), fecha.Year).ToUpper(), string.Empty));
                        rd.Database.Tables[1].SetDataSource(condensador);
                        rd.Database.Tables[2].SetDataSource(evaporador);

                        rd.SetParameterValue("equipo", revision.equipo);
                        rd.SetParameterValue("tonelaje", (float.Parse(revision.tonelaje) != 1 ? revision.tonelaje + " toneladas." : revision.tonelaje + " tonelada."));
                        rd.SetParameterValue("area", revision.area);
                        rd.SetParameterValue("periodo", revision.periodo);
                        rd.SetParameterValue("tecnico", revision.tecnico);
                        rd.SetParameterValue("ayudantes", revision.ayudantes);
                        rd.SetParameterValue("observaciones", revision.observaciones);

                        Session.Add("reporte", rd);

                        break;
                    }
                case ReportesEnum.Mazda_RevisionCua:
                    {
                        setMedidasReporte("HC");
                        rd = new rptRevisionCua();

                        var cuadrillaID = Int32.Parse(Request.QueryString["cuadrillaID"]);
                        var revisionID = Int32.Parse(Request.QueryString["revisionID"]);

                        List<int> arrCuadrillas = new List<int>();
                        arrCuadrillas.Add(cuadrillaID);

                        var revision = MAZDAFactoryServices.getPlanActividadesService().getRevisionCua(arrCuadrillas.FirstOrDefault(), revisionID);
                        var actividades = MAZDAFactoryServices.getPlanActividadesService().getActividades(0, 0, "", "");
                        var areas = MAZDAFactoryServices.getPlanActividadesService().getAreas(0, "");

                        var revisionDetalle = revision.detalle.Select(x => new
                        {
                            frecuencia = actividades.Where(y => y.id == x.actividadID).FirstOrDefault().periodoDesc,
                            area = areas.Where(y => y.id == actividades.Where(w => w.id == x.actividadID).FirstOrDefault().areaID).FirstOrDefault().descripcion,
                            actividades = x.actividad,
                            realizo = x.realizo == true ? "SI" : "NO",
                            estatus = x.estadoString
                        });

                        var fecha = revision.fechaCaptura;
                        rd.Database.Tables[0].SetDataSource(getInfoEnca(string.Format("REVISIÓN {0} {1} {2}", revision.cuadrilla.ToUpper(), CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(fecha.Month), fecha.Year).ToUpper(), string.Empty));
                        rd.Database.Tables[1].SetDataSource(revisionDetalle);

                        rd.SetParameterValue("mes", revision.mesDesc);
                        rd.SetParameterValue("tecnico", revision.tecnico);
                        rd.SetParameterValue("ayudantes", revision.ayudantes);
                        rd.SetParameterValue("observaciones", revision.observaciones);

                        Session.Add("reporte", rd);

                        break;
                    }
                case ReportesEnum.ControlObra_AvanceFisico:
                    {
                        //setMedidasReporte("HO");
                        //int proyectoAvanceID = Int32.Parse(Session["proyectoAvanceID"].ToString());
                        //var proyecto = (CapituloDTO)Session["proyectoAvance"];

                        //var detalle = controlObraFactoryService.getControlObraService().getAvanceFisico(proyectoAvanceID);

                        //rd = new rptAvanceFisico();
                        //rd.Database.Tables[1].SetDataSource(getInfoEnca("Avance Físico de Volúmenes para Presupuesto Detallado", string.Empty));
                        //rd.Database.Tables[0].SetDataSource(detalle.Values.ToList()[1]);

                        //rd.SetParameterValue("proyecto", proyecto.proyecto);

                        //Session.Add("reporte", rd);


                        break;
                    }
                case ReportesEnum.RepAnalisisUtilizacion:
                    {
                        setMedidasReporte("HC");
                        rd = new rptAnalisisUtilizacion();
                        var sGrupo = Request.QueryString["grupo"].Split(',').ToList().Where(x => !string.IsNullOrEmpty(x)).ToList();
                        var sModelo = Request.QueryString["modelo"].Split(',').Where(x => !string.IsNullOrEmpty(x)).ToList();
                        var sEquipos = Request.QueryString["noEco"].Split(',').Where(x => !string.IsNullOrEmpty(x)).ToList();
                        var busq = new BusqAnalisiDTO()
                        {
                            cc = int.Parse(Request.QueryString["cc"]),
                            fin = DateTime.Parse(Request.QueryString["fin"]),
                            grupo = sGrupo.Select(Int32.Parse).ToList(),
                            modelo = sModelo.Select(Int32.Parse).ToList(),
                            noEco = sEquipos

                        };
                        var lstAnalisis = RepAnalisiUsos.getUsoService().getRepAnalisisUtilizacion(busq);
                        var cc = centroCostosFactoryServices.getCentroCostosService().getEntityCCConstruplan(busq.cc);
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Dirección de Maquinaria y Equipo", "Análisis de utilización de equipo"));
                        rd.Database.Tables[1].SetDataSource(lstAnalisis);
                        rd.SetParameterValue("obra", cc.descripcion);
                        rd.SetParameterValue("periodo", busq.fin);
                        rd.SetParameterValue("totalProgramado", lstAnalisis.Sum(s => s.requerido));
                        rd.SetParameterValue("totalAdicional", lstAnalisis.Sum(s => s.adicional));
                        rd.SetParameterValue("totalExistente", lstAnalisis.Sum(s => s.existente));
                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.RepDiarioMAZDA:
                    {
                        setMedidasReporte("HO");
                        rd = new rptDiarioMAZDA();

                        var fecha = Request.QueryString["fecha"];

                        var equipos = MAZDAFactoryServices.getPlanActividadesService().getEquipos("", "", 0);

                        var reporteDiario = MAZDAFactoryServices.getPlanActividadesService().getReporteDiario(fecha);

                        var reporteDiarioTabla = reporteDiario.Select(x => new
                        {
                            cuadrilla = !string.IsNullOrEmpty(x.cuadrilla) ? x.cuadrilla : " ",
                            actividad = !string.IsNullOrEmpty(x.actividad) ? x.actividad : " ",
                            equipo = x.equiposID != null ? string.Join(", ", equipos.Where(y => x.equiposID.Contains(y.id)).Select(z => z.descripcion).ToArray()) : " ",
                            ultMant = !string.IsNullOrEmpty(x.ultMantenimiento) ? x.ultMantenimiento : " ",
                            sigMant = !string.IsNullOrEmpty(x.sigMantenimiento) ? x.sigMantenimiento : " ",
                            area = !string.IsNullOrEmpty(x.areaEjecucion) ? x.areaEjecucion : " ",
                            descripcionActividad = !string.IsNullOrEmpty(x.descripcionActividad) ? x.descripcionActividad : " ",
                            semaforo = x.semaforo == 1 ? "Realizado" : x.semaforo == 2 ? "Pendiente" : x.semaforo == 3 ? "No se realizó" : " ",
                            reprogramacion = !string.IsNullOrEmpty(x.reprogramacion) ? x.reprogramacion : " ",
                            estatus = !string.IsNullOrEmpty(x.estatus) ? x.estatus : " "
                        }).ToList();

                        List<string> evidencias = new List<string>();
                        List<byte[]> evidenciasByte = new List<byte[]>();
                        List<object> imagenesEvi = new List<object>();

                        foreach (var repD in reporteDiario)
                        {
                            if (repD.revisionDetID != 0)
                            {
                                evidencias.AddRange(MAZDAFactoryServices.getPlanActividadesService().getEvidenciasReporte(repD.revisionDetID));
                            }
                        }

                        foreach (var evi in evidencias)
                        {
                            var eviFormateado = evi.Replace("data:image/png;base64,", "");
                            var eviFormateado2 = eviFormateado.Replace("data:image/jpg;base64,", "");
                            var eviByte = Convert.FromBase64String(eviFormateado2);

                            using (var ms = new MemoryStream(eviByte))
                            {
                                System.Drawing.Image img = System.Drawing.Image.FromStream(ms);
                                var tupla = new Tuple<int, int>(img.Width, img.Height);

                                if (tupla.Item1 > 700)
                                {
                                    double porcentaje = (700 * 100) / tupla.Item1;
                                    var nuevoWidth = (int)Math.Floor(img.Width * (porcentaje / 100));
                                    var nuevoHeight = (int)Math.Floor(img.Height * (porcentaje / 100));

                                    eviByte = MAZDAFactoryServices.getPlanActividadesService().ResizeImageToByteArray(eviByte, nuevoWidth, nuevoHeight);
                                }
                            }

                            imagenesEvi.Add(new
                            {
                                imagen = eviByte,
                                nombre = "",
                                ruta = "",
                                extension = ""
                            });
                        }

                        List<string> referencias = new List<string>();
                        List<byte[]> referenciasByte = new List<byte[]>();
                        List<object> imagenesRefe = new List<object>();

                        var equiposIDLista = reporteDiario.Where(x => x.equiposID != null).Select(y => y.equiposID).ToList();
                        foreach (var eqs in equiposIDLista)
                        {
                            referencias.AddRange(MAZDAFactoryServices.getPlanActividadesService().getReferencias(eqs));
                        }

                        foreach (var refe in referencias)
                        {
                            var refeFormateado = refe.Replace("data:image/png;base64,", "");
                            var refeFormateado2 = refeFormateado.Replace("data:image/jpg;base64,", "");
                            var refeByte = Convert.FromBase64String(refeFormateado2);

                            using (var ms = new MemoryStream(refeByte))
                            {
                                System.Drawing.Image img = System.Drawing.Image.FromStream(ms);
                                var tupla = new Tuple<int, int>(img.Width, img.Height);

                                if (tupla.Item1 > 700)
                                {
                                    double porcentaje = (700 * 100) / tupla.Item1;
                                    var nuevoWidth = (int)Math.Floor(img.Width * (porcentaje / 100));
                                    var nuevoHeight = (int)Math.Floor(img.Height * (porcentaje / 100));

                                    refeByte = MAZDAFactoryServices.getPlanActividadesService().ResizeImageToByteArray(refeByte, nuevoWidth, nuevoHeight);
                                }
                            }

                            imagenesRefe.Add(new
                            {
                                imagen = refeByte,
                                nombre = "",
                                ruta = "",
                                extension = ""
                            });
                        }

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("REPORTE ACTIVIDADES", string.Empty));
                        rd.Database.Tables[1].SetDataSource(reporteDiarioTabla);
                        rd.Database.Tables[2].SetDataSource(imagenesEvi);
                        rd.Database.Tables[3].SetDataSource(imagenesRefe);

                        rd.SetParameterValue("fecha", fecha);

                        Session.Add("reporte", rd);

                        break;
                    }
                case ReportesEnum.Mazda_PlanMensualGeneral:
                    {
                        setMedidasReporte("HO");

                        rd = new rptPlanMensualGeneral();

                        var planesMesGeneral = (List<PlanMesDTO>)Session["planMesGeneral"];
                        var lstDias = (List<ComboDTO>)Session["lstDias"];
                        var year = (int)Session["year"];
                        var month = (int)Session["month"];
                        var mes = new DateTime(year, month, 1);

                        List<ReportePlanMensualDTO> list = new List<ReportePlanMensualDTO>();

                        foreach (var pm in planesMesGeneral)
                        {
                            foreach (var pmDet in pm.detalle)
                            {
                                var diasCheck = pmDet.dias;

                                list.Add(new ReportePlanMensualDTO
                                {
                                    cuadrilla = pmDet.cuadrilla,
                                    periodo = pmDet.periodo,
                                    //equipoArea = pmDet.equipoAreaDesc,
                                    dia1 = diasCheck.Contains(1) ? "🡺" : "",
                                    dia2 = diasCheck.Contains(2) ? "🡺" : "",
                                    dia3 = diasCheck.Contains(3) ? "🡺" : "",
                                    dia4 = diasCheck.Contains(4) ? "🡺" : "",
                                    dia5 = diasCheck.Contains(5) ? "🡺" : "",
                                    dia6 = diasCheck.Contains(6) ? "🡺" : "",
                                    dia7 = diasCheck.Contains(7) ? "🡺" : "",
                                    dia8 = diasCheck.Contains(8) ? "🡺" : "",
                                    dia9 = diasCheck.Contains(9) ? "🡺" : "",
                                    dia10 = diasCheck.Contains(10) ? "🡺" : "",
                                    dia11 = diasCheck.Contains(11) ? "🡺" : "",
                                    dia12 = diasCheck.Contains(12) ? "🡺" : "",
                                    dia13 = diasCheck.Contains(13) ? "🡺" : "",
                                    dia14 = diasCheck.Contains(14) ? "🡺" : "",
                                    dia15 = diasCheck.Contains(15) ? "🡺" : "",
                                    dia16 = diasCheck.Contains(16) ? "🡺" : "",
                                    dia17 = diasCheck.Contains(17) ? "🡺" : "",
                                    dia18 = diasCheck.Contains(18) ? "🡺" : "",
                                    dia19 = diasCheck.Contains(19) ? "🡺" : "",
                                    dia20 = diasCheck.Contains(20) ? "🡺" : "",
                                    dia21 = diasCheck.Contains(21) ? "🡺" : "",
                                    dia22 = diasCheck.Contains(22) ? "🡺" : "",
                                    dia23 = diasCheck.Contains(23) ? "🡺" : "",
                                    dia24 = diasCheck.Contains(24) ? "🡺" : "",
                                    dia25 = diasCheck.Contains(25) ? "🡺" : "",
                                    dia26 = diasCheck.Contains(26) ? "🡺" : "",
                                    dia27 = diasCheck.Contains(27) ? "🡺" : "",
                                    dia28 = diasCheck.Contains(28) ? "🡺" : "",
                                    dia29 = diasCheck.Contains(29) ? "🡺" : "",
                                    dia30 = diasCheck.Contains(30) ? "🡺" : "",
                                    dia31 = diasCheck.Contains(31) ? "🡺" : ""
                                });
                            }
                        }

                        rd.Database.Tables[0].SetDataSource(getInfoEnca(string.Format("PLAN MENSUAL {0} {1}", CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(month), year).ToUpper(), string.Empty));
                        rd.Database.Tables[1].SetDataSource(list);

                        rd.SetParameterValue("mes", CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(month).ToUpper());

                        for (var i = 0; i < 31; i++)
                        {
                            if (lstDias.Where(x => x.Value == (i + 1)).FirstOrDefault() != null)
                            {
                                rd.SetParameterValue(("diaSem" + (i + 1)), lstDias.Where(x => x.Value == (i + 1)).FirstOrDefault().Text);
                                rd.SetParameterValue(("diaMes" + (i + 1)), lstDias.Where(x => x.Value == (i + 1)).FirstOrDefault().Value);
                            }
                            else
                            {
                                rd.SetParameterValue(("diaSem" + (i + 1)), "");
                                rd.SetParameterValue(("diaMes" + (i + 1)), "");
                            }
                        }

                        Session.Add("reporte", rd);

                        break;
                    }
                case ReportesEnum.REMOCIONCOMPONENTE:
                    {
                        DataTable dataTable1 = new DataTable();
                        DataTable dataTable2 = new DataTable();

                        dataTable1.Columns.Add("imgRemovido", System.Type.GetType("System.Byte[]"));
                        dataTable1.Columns.Add("imgInstalado", System.Type.GetType("System.Byte[]"));
                        dataTable1.Columns.Add("logoOverhaul", System.Type.GetType("System.Byte[]"));

                        string startupPath = AppDomain.CurrentDomain.BaseDirectory;
                        string targetPath = startupPath + "Content\\img\\logo\\logo-overhaul.jpg";
                        System.Drawing.Image newImage = System.Drawing.Image.FromFile(targetPath);
                        MemoryStream stream = new MemoryStream();
                        newImage.Save(stream, newImage.RawFormat);
                        byte[] dataLogo = stream.ToArray();


                        dataTable2.Columns.Add("personal", typeof(string));
                        dataTable1.Rows.Add(GlobalUtils.FixedSize((byte[])Session["imgRemovido"], 500, 500), GlobalUtils.FixedSize((byte[])Session["imgInstalado"], 500, 500), dataLogo);
                        List<string> personal = (List<string>)Session["personal"];
                        foreach (var item in personal)
                        {
                            dataTable2.Rows.Add(item);
                        }
                        setMedidasReporte("HO");
                        var fecha1 = Request.QueryString["fecha"].Trim() == "" ? DateTime.Now.ToString() : Request.QueryString["fecha"];
                        var noEconomico1 = Request.QueryString["noEconomico"].Trim() == "" ? "N/A" : Request.QueryString["noEconomico"];
                        var modelo1 = Request.QueryString["modelo"].Trim() == "" ? "N/A" : Request.QueryString["modelo"];
                        var horasmaquina1 = Request.QueryString["horasmaquina"].Trim() == "" ? "N/A" : Request.QueryString["horasmaquina"];
                        var seriemaquina1 = Request.QueryString["seriemaquina"].Trim() == "" ? "N/A" : Request.QueryString["seriemaquina"];
                        var descripcion1 = Request.QueryString["descripcion"].Trim() == "" ? "N/A" : Request.QueryString["descripcion"];
                        var numparte1 = Request.QueryString["numparte"].Trim() == "" ? "N/A" : Request.QueryString["numparte"];
                        var nocomponenteremovido1 = Request.QueryString["nocomponenteremovido"].Trim() == "" ? "N/A" : Request.QueryString["nocomponenteremovido"];
                        var horascomponenteremovido1 = Request.QueryString["horascomponenteremovido"].Trim() == "" ? "N/A" : Request.QueryString["horascomponenteremovido"];
                        var nocomponenteinstalado1 = Request.QueryString["nocomponenteinstalado"].Trim() == "" ? "SIN ESPECIFICAR" : Request.QueryString["nocomponenteinstalado"];
                        var garantia1 = Request.QueryString["garantia"].Trim() == "" ? "N/A" : Request.QueryString["garantia"];
                        var empresaresponsable1 = Request.QueryString["empresaresponsable"].Trim() == "" ? "N/A" : Request.QueryString["empresaresponsable"];
                        var motivo1 = Request.QueryString["motivo"].Trim() == "" ? "N/A" : Request.QueryString["motivo"];
                        var comentario1 = ((string)Session["comentario"]).Trim() == "" ? "Sin comentario" : ((string)Session["comentario"]).Trim();
                        var usuario = usuarioFactoryServices.getUsuarioService().getPassByID(Int32.Parse(Request.QueryString["realiza"].Trim()));
                        var realiza1 = usuario.nombre + " " + usuario.apellidoPaterno + " " + usuario.apellidoMaterno;
                        var firmaRealizo1 = Request.QueryString["firmaRealizo"].Trim() == "" ? "" : Request.QueryString["firmaRealizo"];
                        var firmaAdminOverhaul1 = Request.QueryString["firmaAdminOverhaul"].Trim() == "" ? "" : Request.QueryString["firmaAdminOverhaul"];
                        var horasComponenteInstalado1 = (Request.QueryString["horasComponenteInstalado"].Trim() == "" || Request.QueryString["horasComponenteInstalado"].Trim() == "N/A") ? "0.00" : Request.QueryString["horasComponenteInstalado"];
                        var obraRR = Request.QueryString["obra"].Trim() == "" ? "N/A" : Request.QueryString["obra"];
                        var fechaInstalacionRR = Request.QueryString["fechaInstalacion"].Trim() == "" ? "N/A" : Request.QueryString["fechaInstalacion"];
                        var subconjuntoRR = Request.QueryString["subconjunto"].Trim() == "" ? "N/A" : Request.QueryString["subconjunto"];
                        var horasAcumuladasRemovidoRR = Request.QueryString["horasAcumuladasRemovido"].Trim() == "" ? "N/A" : Request.QueryString["horasAcumuladasRemovido"];
                        var vidasRemovidoRR = Request.QueryString["vidasRemovido"].Trim() == "" ? "N/A" : Request.QueryString["vidasRemovido"];
                        var fechaInstalacionRemovidoRR = Request.QueryString["fechaInstalacionRemovido"].Trim() == "" ? "N/A" : Request.QueryString["fechaInstalacionRemovido"];
                        rd = new RemocionComponente();
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Remoción de componentes", "DIRECCION DE MAQUINARIA Y EQUIPO ADMINISTRACION DE OVERHAUL"));
                        rd.Database.Tables[1].SetDataSource(dataTable1);
                        rd.Database.Tables[2].SetDataSource(dataTable2);
                        rd.SetParameterValue("fecha", fecha1);
                        rd.SetParameterValue("noEconomico", noEconomico1);
                        rd.SetParameterValue("modelo", modelo1);
                        rd.SetParameterValue("horasmaquina", horasmaquina1);
                        rd.SetParameterValue("seriemaquina", seriemaquina1);
                        rd.SetParameterValue("descripcion", descripcion1);
                        rd.SetParameterValue("numparte", numparte1);
                        rd.SetParameterValue("nocomponenteremovido", nocomponenteremovido1);
                        rd.SetParameterValue("horascomponenteremovido", horascomponenteremovido1);
                        rd.SetParameterValue("nocomponenteinstalado", nocomponenteinstalado1);
                        rd.SetParameterValue("horascomponenteinstalado", horasComponenteInstalado1);
                        rd.SetParameterValue("garantia", garantia1);
                        rd.SetParameterValue("motivo", motivo1);
                        rd.SetParameterValue("comentario", comentario1);
                        rd.SetParameterValue("realiza", realiza1.Trim());
                        rd.SetParameterValue("firmaRealizo", firmaRealizo1);
                        rd.SetParameterValue("firmaAdminOverhaul", firmaAdminOverhaul1);
                        rd.SetParameterValue("admin", "ING. JESUS MIGUEL GARIBAY ESPINOZA");
                        rd.SetParameterValue("empresaresponsable", empresaresponsable1);
                        rd.SetParameterValue("obra", obraRR);
                        rd.SetParameterValue("fechaInstalacion", fechaInstalacionRR);
                        rd.SetParameterValue("subconjunto", subconjuntoRR);
                        rd.SetParameterValue("horasAcumuladasRemovido", horasAcumuladasRemovidoRR);
                        rd.SetParameterValue("vidasRemovido", vidasRemovidoRR);
                        rd.SetParameterValue("fechaInstalacionRemovido", fechaInstalacionRemovidoRR);
                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.REMOCIONCOMPONENTEGRUPO:
                    {
                        rd = new rptRemocionPorGrupos();
                        setMedidasReporte("VC");

                        var bitacoraComponentesRemovidos = (List<tblM_ReporteRemocionComponente>)Session["bitacoraComponentesRemovidos"];
                        List<rptRemocionComponentesDTO> lstBitacoraComponentesRemovidos = bitacoraComponentesRemovidos.Select(x => new rptRemocionComponentesDTO
                        {
                            noEconomico = x.maquina == null ? "" : x.maquina.noEconomico,
                            fecha = x.fechaRemocion.ToString("dd/MM/yyy"),
                            descripcion = x.componenteRemovido.subConjunto.descripcion + " " + (x.componenteRemovido.posicionID > 0 ? EnumHelper.GetDescription((PosicionesEnum)x.componenteRemovido.posicionID).ToUpper() : ""),
                            noComponente = x.componenteRemovido.noComponente,
                            concepto = x.motivoRemocionID.ToString(),
                            horasCicloActual = x.horasComponente.ToString(),
                            cicloVidaHoras = x.componenteRemovido.cicloVidaHoras.ToString(),
                            obra = remocionComponenteServices.getRemocionComponenteFactoryServices().getCC(x.areaCuenta).ToUpper(),
                            destino = x.destino == null ? "--" : x.destino.descripcion,
                            porcentajeRemocion = x.horasComponente != 0 ? decimal.Round((((x.componenteRemovido.cicloVidaHoras - x.horasComponente) * 100) / x.horasComponente), 2).ToString() + " %" : "0%"

                        }).ToList();
                        DataTable datatableComponentesRemovidos = new DataTable();
                        datatableComponentesRemovidos.Columns.Add("noEconomico", typeof(string));
                        datatableComponentesRemovidos.Columns.Add("fecha", typeof(string));
                        datatableComponentesRemovidos.Columns.Add("descripcion", typeof(string));
                        datatableComponentesRemovidos.Columns.Add("noComponente", typeof(string));
                        datatableComponentesRemovidos.Columns.Add("concepto", typeof(string));
                        datatableComponentesRemovidos.Columns.Add("horasCicloActual", typeof(string));
                        datatableComponentesRemovidos.Columns.Add("cicloVidaHoras", typeof(string));
                        datatableComponentesRemovidos.Columns.Add("obra", typeof(string));
                        datatableComponentesRemovidos.Columns.Add("destino", typeof(string));
                        datatableComponentesRemovidos.Columns.Add("porcentajeRemocion", typeof(string));
                        foreach (var item in lstBitacoraComponentesRemovidos)
                        {
                            datatableComponentesRemovidos.Rows.Add(
                                item.noEconomico,
                                item.fecha,
                                item.descripcion,
                                item.noComponente,
                                item.concepto,
                                item.horasCicloActual,
                                item.cicloVidaHoras,
                                item.obra,
                                item.destino,
                                item.porcentajeRemocion
                            );
                        }

                        var destinoRemocionesGrupo = lstBitacoraComponentesRemovidos.Where(x => x.destino != null).GroupBy(x => x.destino).Select(x => new
                        {
                            destino = x.Key,
                            total = x.Count()
                        }).OrderByDescending(x => x.total);

                        var fallas = datatableComponentesRemovidos.Select("concepto < 1").Count();
                        var programados = datatableComponentesRemovidos.Select("concepto = 1").Count();

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Bitácora de componentes removidos", "DIRECCION DE MAQUINARIA Y EQUIPO ADMINISTRACION DE OVERHAUL"));
                        rd.Database.Tables[1].SetDataSource(datatableComponentesRemovidos);
                        rd.Database.Tables[2].SetDataSource(destinoRemocionesGrupo);

                        rd.SetParameterValue("fallas", datatableComponentesRemovidos.Select("concepto = 1").Count());
                        rd.SetParameterValue("programados", datatableComponentesRemovidos.Select("concepto = 0").Count());

                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.Reporte_Facultamientos:
                    {
                        Session["downloadPDF"] = null;
                        try
                        {
                            // Obtención de variables del request.
                            var isCRModal = Convert.ToBoolean(Request.QueryString["isCRModal"]);
                            setMedidasReporte(isCRModal ? "HO" : "HorizontalCarta_NoModal");
                            var paqueteID = Request.QueryString["id"].ParseInt();

                            rd = new rptFacultamientosDpto();

                            // Datasource
                            Dictionary<string, object> diccionarioResultado = facultamientosFactoryServices.getFacultamientosService()
                                .ObtenerPaqueteActualizar(paqueteID, true);

                            var paqueteFacultamientos = (PaqueteFaDTO)diccionarioResultado["paqueteFacultamientos"];

                            rd.Database.Tables[0].SetDataSource(getInfoEnca(String.Empty, String.Empty));

                            // LLenado de autorizantes.
                            int contadorVoBo = 1;
                            rd.Database.Tables[1].SetDataSource(
                                paqueteFacultamientos.ListaAutorizantes
                                .Where(x => x.Nombre != "")
                                .Select(x => new
                                {
                                    tipo = (x.EsAutorizante) ? "Autorizante" : "VoBo " + contadorVoBo++,
                                    nombre = x.Nombre ?? "",
                                    estado = (x.Autorizado ?? false) ? "Autorizado" : "Pendiente",
                                    firma = (x.Firma != null) ? x.Firma : "S/F"
                                })
                                .ToList()
                            );

                            List<RptFacultamientoDTO> listaFa = new List<RptFacultamientoDTO>();

                            // Llenado de empleados.
                            paqueteFacultamientos.listaFacultamientos
                                .Where(x => x.Aplica)
                                .ToList()
                                .ForEach(x =>
                                {
                                    x.ListaEmpleados
                                        .Where(y => y.Aplica)
                                        .ToList()
                                        .ForEach(y =>
                                    {
                                        var facultamiento = new RptFacultamientoDTO
                                        {
                                            titulo = x.Titulo,
                                            concepto = y.Concepto,
                                            tipo = (y.EsAutorizante) ? "Autorizante" : "VoBo",
                                            nombre = (y.Aplica) ? (y.NombreEmpleado != null) ? y.NombreEmpleado : "PENDIENTE" : "N/A"
                                        };
                                        listaFa.Add(facultamiento);
                                    });
                                });

                            rd.Database.Tables[2].SetDataSource(listaFa);

                            // Se envían valores de parámetros.
                            rd.SetParameterValue("fecha", paqueteFacultamientos.Fecha == null ? DateTime.Today.ToShortDateString() : Convert.ToDateTime(paqueteFacultamientos.Fecha).ToShortDateString());
                            rd.SetParameterValue("obra", paqueteFacultamientos.Obra.Trim());
                            rd.SetParameterValue("cc", paqueteFacultamientos.CentroCostos);

                            // Se evalúa si es una versión antigüa o no activa.
                            switch (paqueteFacultamientos.EsActivo)
                            {
                                case null:
                                    rd.SetParameterValue("versionAntigua", "* El paquete está en proceso de autorización y por lo tanto no es oficial.");
                                    break;
                                case true:
                                    rd.SetParameterValue("versionAntigua", "");
                                    break;
                                case false:
                                    rd.SetParameterValue("versionAntigua", "* Este paquete no es la versión mas actual y por lo tanto no es oficial.");
                                    break;
                            }
                        }
                        catch (Exception e)
                        {
                            GlobalUtils.sendEmail("asunto", e.Message + " " + e.StackTrace, new List<string> { "martin.zayas@construplan.com.mx" });
                            // En caso de error, se loguea a la bd.
                            //logErrorFactoryServices.getLogErrorService()
                            //    .LogError(7, 0, "", "ReportesEnum.Reporte_Facultamientos", e, AccionEnum.REPORTE, 0, null);
                        }
                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.Reporte_Facultamientos_Empleado_General:
                    {
                        Session["downloadPDF"] = null;
                        try
                        {
                            // Variables del request.
                            var claveEmpleado = Request.QueryString["id"].ParseInt();

                            setMedidasReporte("HO");

                            rd = new rptFacultamientoGeneralEmpleado();


                            Dictionary<string, object> diccionarioResultado = facultamientosFactoryServices.getFacultamientosService()
                                .ObtenerFacultamientosEmpleado(claveEmpleado, 0);

                            string nombreEmpleado = facultamientosFactoryServices.getFacultamientosService()
                                .ObtenerNombreEmpleadoPorClave(claveEmpleado);

                            var listaFacultamientos = (List<CatalogoEmpleadoDTO>)diccionarioResultado["listaFacultamientos"];

                            rd.Database.Tables[0].SetDataSource(getInfoEnca(String.Empty, String.Empty));

                            // Se envían los datos al subreporte.
                            rd.Database.Tables[1].SetDataSource(
                                listaFacultamientos
                                .Select(x => new
                                {
                                    cc = x.CentroCostos,
                                    obra = x.Descripcion,
                                    titulo = x.Titulo,
                                    puesto = x.Puesto,
                                    fecha = x.Fecha,
                                    estado = x.Estatus,
                                    tipo = x.TipoAutorizacion
                                })
                                .ToList()
                            );

                            // Se envián los parámetros.
                            rd.SetParameterValue("nombreEmpleado", nombreEmpleado);
                            rd.SetParameterValue("claveEmpleado", claveEmpleado);
                            rd.SetParameterValue("fechaImpresion", String.Format("{0:dd-MM-yyyy}", DateTime.Now));
                        }
                        catch (Exception e)
                        {
                            // Si hay un error, se loguea a la bd.
                            logErrorFactoryServices.getLogErrorService()
                                .LogError(7, 0, "", "ReportesEnum.Reporte_Facultamientos", e, AccionEnum.REPORTE, 0, null);
                        }
                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.Reporte_Facultamiento_Empleado:
                    {
                        Session["downloadPDF"] = null;
                        try
                        {
                            setMedidasReporte("HO");

                            // Variables del request.
                            var claveEmpleado = Request.QueryString["id"].ParseInt();
                            var facultamientoID = Request.QueryString["facultamientoID"].ParseInt();

                            rd = new rptFacultamientoEmpleado();

                            //Dictionary<string, object> diccionarioResultado = facultamientosFactoryServices.getFacultamientosService()
                            //    .ObtenerFacultamientosEmpleado(claveEmpleado, ccID);

                            // Datasource principal.
                            Dictionary<string, object> diccionarioResultado = facultamientosFactoryServices.getFacultamientosService()
                            .ObtenerFacultamiento(facultamientoID);

                            var facultamiento = (FacultamientoDTO)diccionarioResultado["facultamiento"];

                            // Se obtiene el nombre completo del empleado en base a su clave.
                            string nombreEmpleado = facultamientosFactoryServices.getFacultamientosService()
                                .ObtenerNombreEmpleadoPorClave(claveEmpleado);

                            List<RptFacultamientoDTO> listaFa = new List<RptFacultamientoDTO>();

                            // Llenado de empleados.
                            facultamiento.ListaEmpleados
                                .ToList()
                                .ForEach(y =>
                                {
                                    var facultamientoReporte = new RptFacultamientoDTO
                                    {
                                        concepto = y.Concepto,
                                        tipo = (y.EsAutorizante) ? "Autorizante" : "VoBo",
                                        nombre = (y.Aplica) ? (y.NombreEmpleado != null) ? y.NombreEmpleado.Trim() : "PENDIENTE" : "N/A"
                                    };
                                    listaFa.Add(facultamientoReporte);
                                });

                            rd.Database.Tables[0].SetDataSource(getInfoEnca(String.Empty, String.Empty));
                            rd.Database.Tables[1].SetDataSource(listaFa);

                            // Se envían los parámetros.
                            rd.SetParameterValue("titulo", facultamiento.Titulo);
                            rd.SetParameterValue("nombreEmpleado", nombreEmpleado.Trim());
                            rd.SetParameterValue("obra", facultamiento.Obra.Trim());
                            rd.SetParameterValue("cc", facultamiento.CentroCostos.Trim());
                            rd.SetParameterValue("fecha", facultamiento.Fecha.Remove(10));
                            rd.SetParameterValue("clave", claveEmpleado);
                        }
                        catch (Exception e)
                        {
                            // En caso de error se loguea a la bd.
                            logErrorFactoryServices.getLogErrorService()
                                .LogError(7, 0, "", "ReportesEnum.Reporte_Facultamiento_Empleado", e, AccionEnum.REPORTE, 0, null);
                        }
                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.HISORICO_ALMACEN:
                    {
                        setMedidasReporte("VC");
                        rd = new rptHistoricoAlmacen();

                        var historicoAlmacen = (List<rptValorAlmacenDTO>)Session["rptHistoricoAlmacen"];
                        var anioHistoricoAlmacen = (int)Session["anioHistoricoAlmacen"];

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Reporte Histórico Almacén", "DIRECCION DE MAQUINARIA Y EQUIPO ADMINISTRACION DE OVERHAUL"));
                        rd.Database.Tables[1].SetDataSource(historicoAlmacen);

                        rd.SetParameterValue("anio", anioHistoricoAlmacen);

                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.programacionPagos:
                    {
                        setMedidasReporte("HC");
                        rd = new rptGenerarMovProv();

                        var lst = (List<sp_genera_movprovDTO>)Session["lstRptGenMovProv"];
                        var busq = (BusqGenMovProvDTO)Session["busqRptGenMovProv"];
                        var fecha = string.Format("Desde {0} al {1}", busq.minMov.ToShortDateString(), busq.maxMov.ToShortDateString());
                        if (busq.tipo == 1)
                        {
                            rd.Database.Tables[0].SetDataSource(getInfoEnca("Reporte de facturas en propuesta de pago", fecha));
                        }
                        else if (busq.tipo == 2)
                        {
                            rd.Database.Tables[0].SetDataSource(getInfoEnca("Reporte de pagos pendientes de autorización", fecha));
                        }
                        else if (busq.tipo == 3)
                        {
                            rd.Database.Tables[0].SetDataSource(getInfoEnca("Reporte de pagos autorizados", fecha));
                        }
                        else if (busq.tipo == 4)
                        {
                            rd.Database.Tables[0].SetDataSource(getInfoEnca("Reporte de pagos pendientes de cheque", fecha));
                        }
                        else if (busq.tipo == 5)
                        {
                            rd.Database.Tables[0].SetDataSource(getInfoEnca("Reporte de pagos con cheque generado", fecha));
                        }

                        rd.Database.Tables[1].SetDataSource(lst.Select(mov => new
                        {
                            numpro = mov.numpro.ToString(),
                            factura = mov.factura.ToString(),
                            fecha = mov.fecha.ToShortDateString(),
                            fecha_movto = mov.fecha_movto.ToShortDateString(),
                            tm = mov.tm,
                            monto = mov.monto.ToString("C2"),
                            tm_bancario = mov.tm_bancario,
                            tm_prov = mov.tm_prov,
                            cc = mov.cc,
                            oc = mov.oc,
                            monto_plan = mov.monto_plan.ToString("C2"),
                            status = (mov.numpro < 9000 ? "M.N" : "DLL"),
                            descTm = mov.descTm,
                            descTmp = mov.descTmp,
                            descTmb = mov.descTmb,
                            proveedor = mov.proveedor,
                            descStatus = mov.descStatus,
                            totalMonto = lst.Where(x => x.numpro == mov.numpro).Sum(x => x.monto).ToString("C2"),
                            totalPlan = lst.Where(x => x.numpro == mov.numpro).Sum(x => x.monto_plan).ToString("C2"),
                            cuenta = mov.cuenta,
                            banco = mov.banco
                        }).ToList());

                        //rd.SetParameterValue("anio", anioHistoricoAlmacen);

                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.CargoNominaMensualCC:
                    {
                        try
                        {
                            setMedidasReporte("HC");
                            rd = new rptCargoNominaMensualCC();

                            var nominaMensualID = Int32.Parse(Request.QueryString["nominaMensualID"]);
                            var reporteNominaMensual = maquinaFactoryServices.getMaquinaServices().ObtenerNominaMensualCCReporte(nominaMensualID);

                            rd.Database.Tables[0].SetDataSource(getInfoEnca("Costo Social por Centros de Costo.", string.Empty));
                            rd.Database.Tables[1].SetDataSource(reporteNominaMensual.listaMaquinas);

                            rd.SetParameterValue("proyecto", reporteNominaMensual.proyecto);
                            rd.SetParameterValue("mes", reporteNominaMensual.mes);
                            rd.SetParameterValue("año", reporteNominaMensual.año);
                            rd.SetParameterValue("horasHombreTotales", reporteNominaMensual.horasHombreTotales);
                            rd.SetParameterValue("costoSocialTotal", reporteNominaMensual.costoSocialTotal);
                            rd.SetParameterValue("fechaImpresion", DateTime.Today.ToShortDateString());

                            Session.Add("reporte", rd);
                        }
                        catch (Exception)
                        {
                            Console.WriteLine("");
                        }
                        break;
                    }
                case ReportesEnum.PlantillaPersonal:
                    {
                        try
                        {
                            setMedidasReporte("HC");
                            var ud = new UsuarioDAO();
                            bool permiso = ud.getViewAction(vSesiones.sesionCurrentView, "VerSueldos");
                            var inMemoryTemp = Request.QueryString["inMemory"];
                            if (inMemoryTemp != null)
                                rd = new rptPlantilla();
                            else
                            {
                                bool pendiente = bool.Parse(Request.QueryString["pendiente"]);
                                if (pendiente)
                                    rd = new rptPlantilla();
                                else
                                {
                                    if (permiso)
                                        rd = new rptPlantilla();
                                    else
                                        rd = new rptPlantillaPersonalSinSueldos();
                                }
                            }
                            var plantillaID = Int32.Parse(Request.QueryString["plantillaID"]);
                            var plantillaCC = Request.QueryString["plantillaCC"];
                            var esTabulador = Request.QueryString["esTabulador"];
                            var empresaID = vSesiones.sesionEmpresaActual;
                            string empresaStr = Request.QueryString["empresa"];
                            if (empresaStr != null) { empresaID = int.Parse(empresaStr); }

                            PlantillaReporteDTO plantilla = new PlantillaReporteDTO();

                            if (esTabulador != null && esTabulador == "1")
                                plantilla = plantillaPersonalFactoryService.getPlantillaPersonalFactoryService().GetReportePlantilla(plantillaCC, empresaID);
                            else
                                plantilla = plantillaPersonalFactoryService.getPlantillaPersonalFactoryService().GetReporte(plantillaID, empresaID);

                            if (plantilla.autorizantes == null)
                            {
                                plantilla.autorizantes = new List<Core.DTO.RecursosHumanos.Plantilla.PlantillaAutorizanteDTO>();
                                Core.DTO.RecursosHumanos.Plantilla.PlantillaAutorizanteDTO obj = new Core.DTO.RecursosHumanos.Plantilla.PlantillaAutorizanteDTO();
                                obj.nombre = "OCULTAR";
                                plantilla.autorizantes.Add(obj);
                            }

                            rd.Database.Tables[0].SetDataSource(getInfoEnca("Plantilla de Personal.", "Dirección de Recursos Humanos"));
                            rd.Database.Tables[1].SetDataSource(plantilla.data);
                            rd.Database.Tables[2].SetDataSource(plantilla.autorizantes);

                            rd.SetParameterValue("personal", plantilla.data.GroupBy(x => new { x.id, x.nomina }).Sum(x => int.Parse(x.First().personal)));
                            rd.SetParameterValue("cc", !string.IsNullOrEmpty(plantilla.cc) ? plantilla.cc : string.Empty);
                            rd.SetParameterValue("fechaInicio", plantilla.fechaInicio != null ? plantilla.fechaInicio : string.Empty);
                            rd.SetParameterValue("fechaFin", plantilla.fechaFin != null ? plantilla.fechaFin : string.Empty);

                            Session.Add("reporte", rd);
                        }
                        catch (Exception)
                        {
                            Console.WriteLine("");
                        }
                        break;
                    }
                case ReportesEnum.PlantillaPersonalEK:
                    {
                        try
                        {
                            setMedidasReporte("HC");
                            rd = new rptPlantillaPersonal2();

                            var cc = Request.QueryString["cc"];
                            var ccNombre = Request.QueryString["ccNombre"];
                            var lista = plantillaPersonalFactoryService.getPlantillaPersonalFactoryService().GetPlantillaEK(cc);


                            rd.Database.Tables[0].SetDataSource(getInfoEnca("Plantilla de Personal " + ccNombre, "Dirección de Recursos Humanos"));
                            rd.Database.Tables[1].SetDataSource(lista);

                            rd.SetParameterValue("personal", lista.Sum(x => x.personalActual));
                            rd.SetParameterValue("personalOriginal", lista.Sum(x => x.personalOriginal));
                            rd.SetParameterValue("cc", ccNombre);
                            rd.SetParameterValue("fechaInicio", lista.FirstOrDefault().fechaInicio);
                            rd.SetParameterValue("fechaFin", lista.FirstOrDefault().fechaFin ?? "");

                            Session.Add("reporte", rd);
                        }
                        catch (Exception)
                        {
                            Console.WriteLine("");
                        }
                        break;
                    }
                case ReportesEnum.entradaAlmacen:
                    {
                        try
                        {
                            setMedidasReporte("HC");
                            rd = new rptEntradasAlmacen();

                            var movimientos = (List<entradasAlmacenDTO>)Session["foliosEntradas"];

                            rd.Database.Tables[0].SetDataSource(getInfoEnca("Entrada Almacén", "ALMACÉN"));
                            rd.Database.Tables[1].SetDataSource(movimientos);

                            var info = movimientos.FirstOrDefault();

                            rd.SetParameterValue("almacen", info.almacen);
                            rd.SetParameterValue("centroCosto", info.centroCosto);
                            rd.SetParameterValue("ordenCompra", info.ordenCompra);
                            rd.SetParameterValue("fechaEntrada", info.fechaEntrada.ToShortDateString());
                            rd.SetParameterValue("proveedor", info.proveedor);
                            rd.SetParameterValue("direccion", info.direccion);
                            rd.SetParameterValue("ciudad", info.ciudad);
                            rd.SetParameterValue("telefonos", info.telefonos);
                            rd.SetParameterValue("folioEntrada", info.folioEntrada);
                            rd.SetParameterValue("comentarios", info.comentarios);
                            rd.SetParameterValue("totalCantidad", movimientos.Select(x => x.cantidad).Sum().ToString());
                            rd.SetParameterValue("totalPrecio", movimientos.Select(x => x.precio).Sum().ToString());
                            rd.SetParameterValue("totalImporte", movimientos.Select(x => x.importe).Sum().ToString());
                            rd.SetParameterValue("recibioDesc", info.recibio ?? "");

                            Session.Add("reporte", rd);
                        }
                        catch (Exception)
                        {

                        }
                        break;
                    }
                case ReportesEnum.salidaAlmacen:
                    {
                        try
                        {
                            setMedidasReporte("HC");
                            rd = new rptSalidasAlmacen();

                            var movimientos = (List<salidasAlmacenDTO>)Session["foliosSalidas"];

                            rd.Database.Tables[0].SetDataSource(getInfoEnca("Salida Almacén", "ALMACÉN"));
                            rd.Database.Tables[1].SetDataSource(movimientos);

                            var info = movimientos.FirstOrDefault();

                            rd.SetParameterValue("almacen", info.almacen);
                            rd.SetParameterValue("centroCosto", info.centroCosto);
                            rd.SetParameterValue("fechaSalida", info.fechaSalida.ToShortDateString());
                            rd.SetParameterValue("folioSalida", info.folioSalida);
                            rd.SetParameterValue("comentarios", info.comentarios ?? "");
                            rd.SetParameterValue("totalCantidad", movimientos.Select(x => x.cantidad).Sum().ToString());
                            rd.SetParameterValue("totalImporte", movimientos.Select(x => x.importe).Sum().ToString());
                            rd.SetParameterValue("transportista", "");
                            rd.SetParameterValue("autorizo1", "");
                            rd.SetParameterValue("autorizo2", "");

                            Session.Add("reporte", rd);
                        }
                        catch (Exception)
                        {

                        }
                        break;
                    }
                case ReportesEnum.salidaConsultaTraspaso:
                    {
                        try
                        {
                            setMedidasReporte("HC");
                            rd = new rptSalidaConsultaTraspaso();

                            var movimiento = (List<salidasAlmacenDTO>)Session["salidaConsultaTraspaso"];

                            rd.Database.Tables[0].SetDataSource(getInfoEnca("Salida Almacén", "ALMACÉN"));
                            rd.Database.Tables[1].SetDataSource(movimiento);

                            var info = movimiento.FirstOrDefault();

                            rd.SetParameterValue("comentarios", info.comentarios);
                            rd.SetParameterValue("totalCantidad", movimiento.Select(x => x.cantidad).Sum().ToString());
                            rd.SetParameterValue("totalImporte", "$" + movimiento.Select(x => x.importe).Sum().ToString("#,##0.##"));
                            rd.SetParameterValue("transportista", "");
                            rd.SetParameterValue("almacenOrigen", info.almacenOrigen);
                            rd.SetParameterValue("centroCostoOrigen", info.centroCostoOrigen);
                            rd.SetParameterValue("fechaSalida", info.fechaSalida.ToShortDateString());
                            rd.SetParameterValue("almacenDestino", info.almacenDestino);
                            rd.SetParameterValue("centroCostoDestino", info.centroCostoDestino);
                            rd.SetParameterValue("surtio", info.surtio);
                            rd.SetParameterValue("numero", info.numero);
                            rd.SetParameterValue("ordenTraspaso", info.ordenTraspaso);

                            Session.Add("reporte", rd);
                        }
                        catch (Exception)
                        {

                        }
                        break;
                    }
                case ReportesEnum.entradaConsultaTraspaso:
                    {
                        try
                        {
                            setMedidasReporte("HC");
                            rd = new rptEntradaConsultaTraspaso();

                            var movimiento = (List<salidasAlmacenDTO>)Session["entradaConsultaTraspaso"];

                            rd.Database.Tables[0].SetDataSource(getInfoEnca("Entrada Almacén", "ALMACÉN"));
                            rd.Database.Tables[1].SetDataSource(movimiento);

                            var info = movimiento.FirstOrDefault();

                            rd.SetParameterValue("comentarios", info.comentarios);
                            rd.SetParameterValue("totalCantidad", movimiento.Select(x => x.cantidad).Sum().ToString());
                            rd.SetParameterValue("totalImporte", "$" + movimiento.Select(x => x.importe).Sum().ToString("#,##0.##"));
                            rd.SetParameterValue("transportista", "");
                            rd.SetParameterValue("almacenOrigen", info.almacenOrigen);
                            rd.SetParameterValue("centroCostoOrigen", info.centroCostoOrigen);
                            rd.SetParameterValue("fechaEntrada", info.fechaEntrada.ToShortDateString());
                            rd.SetParameterValue("almacenDestino", info.almacenDestino);
                            rd.SetParameterValue("centroCostoDestino", info.centroCostoDestino);
                            rd.SetParameterValue("recibio", info.recibio ?? "");
                            rd.SetParameterValue("numero", info.numero);
                            rd.SetParameterValue("ordenTraspaso", info.ordenTraspaso);

                            Session.Add("reporte", rd);
                        }
                        catch (Exception)
                        {

                        }
                        break;
                    }
                case ReportesEnum.salidaTraspasoAlmacen:
                    {
                        try
                        {
                            setMedidasReporte("HC");
                            rd = new rptSalidasTraspasoAlmacen();

                            var movimientos = (List<salidasAlmacenDTO>)Session["foliosSalidasTraspasos"];

                            rd.Database.Tables[0].SetDataSource(getInfoEnca("Salida por consumo", "ALMACEN"));
                            rd.Database.Tables[1].SetDataSource(movimientos);

                            var info = movimientos.FirstOrDefault();

                            rd.SetParameterValue("almacen", info.almacen);
                            rd.SetParameterValue("centroCosto", info.centroCosto);
                            rd.SetParameterValue("fechaSalida", info.fechaSalida.ToShortDateString());
                            rd.SetParameterValue("folioSalida", info.folioSalida);
                            rd.SetParameterValue("comentarios", info.comentarios ?? "");
                            rd.SetParameterValue("totalCantidad", movimientos.Select(x => x.cantidad).Sum().ToString());
                            rd.SetParameterValue("totalImporte", movimientos.Select(x => x.importe).Sum().ToString());
                            rd.SetParameterValue("transportista", "");
                            rd.SetParameterValue("autorizo1", "");
                            rd.SetParameterValue("autorizo2", "");
                            rd.SetParameterValue("almacenDestino", info.almacenDestino);
                            rd.SetParameterValue("centroCostoDestino", info.centroCostoDestino);

                            Session.Add("reporte", rd);
                        }
                        catch (Exception)
                        {

                        }
                        break;
                    }
                case ReportesEnum.resguardoAlmacen:
                    {
                        try
                        {
                            setMedidasReporte("HC");
                            rd = new rptResguardo();

                            string cc = Request.QueryString["cc"];
                            int folio = int.Parse(Request.QueryString["folio"]);

                            var data = resguardoFactoryServices.getResguardoService().getResguardoReporte(cc, folio);
                            var lstResguados = data.Select(x => new
                            {
                                insumoDesc = x.insumoDesc,
                                tipo_activoDesc = x.tipo_activoDesc,
                                cantidad_resguardoDesc = (x.cantidad_resguardo - (decimal)x.resguardo_parcial).ToString(),
                                costo_promedioDesc = x.costo_promedio.ToString(),
                                marca = x.marca ?? "",
                                modelo = x.modelo ?? "",
                                color = x.color ?? "",
                                num_serie = x.num_serie ?? "",
                                valor_activo = "$" + x.valor_activo.ToString(),
                                plan_desc = x.plan_desc ?? "",
                                condiciones = x.condiciones,
                                condBuenas = x.condiciones == "B" ? "●" : "",
                                condRegulares = x.condiciones == "R" ? "●" : "",
                                condMalas = x.condiciones == "M" ? "●" : "",
                            }).ToList();

                            rd.Database.Tables[0].SetDataSource(getInfoEnca("Resguardos", "ALMACÉN"));
                            rd.Database.Tables[1].SetDataSource(lstResguados);

                            #region Estatus General del Resguardo
                            var estatusDesc = "";

                            if (data.All(x => x.estatus == "V"))
                            {
                                estatusDesc = "VIGENTE";
                            }
                            else if (data.Any(x => x.estatus == "P"))
                            {
                                estatusDesc = "VIGENTE PARCIAL";
                            }
                            else if (data.All(x => x.estatus == "D"))
                            {
                                estatusDesc = "DEVUELTO";
                            }
                            else if (data.All(x => x.estatus == "C"))
                            {
                                estatusDesc = "CANCELADO";
                            }
                            #endregion

                            rd.SetParameterValue("fechaHoy", DateTime.Now.Date.ToShortDateString());
                            rd.SetParameterValue("ccDesc", data[0].ccDesc);
                            rd.SetParameterValue("folio", data[0].folio.ToString());
                            rd.SetParameterValue("alm_salidaDesc", data[0].alm_salidaDesc);
                            rd.SetParameterValue("fec_resguardo", data[0].fec_resguardo.ToShortDateString());
                            rd.SetParameterValue("estatus", estatusDesc);
                            rd.SetParameterValue("recibe", data[0].empleadoNombre);
                            rd.SetParameterValue("autoriza", data[0].autorizaNombre ?? "");

                            Session.Add("reporte", rd);
                        }
                        catch (Exception)
                        {

                        }
                        break;
                    }
                case ReportesEnum.requisicionEK:
                    {
                        try
                        {
                            setMedidasReporte("HC");
                            rd = new rptRequisicionEK();

                            string cc = Request.QueryString["cc"];
                            int numero = int.Parse(Request.QueryString["numero"]);
                            string link = Request.QueryString["link"];
                            string PERU_tipoRequisicion = Request.QueryString["PERU_tipoRequisicion"];

                            if ((EmpresaEnum)vSesiones.sesionEmpresaActual == EmpresaEnum.Peru)
                            {

                            }
                            else
                            {
                                PERU_tipoRequisicion = "";
                            }

                            var requisicion = requisicionFactoryServices.getReqService().getRequisicionRpt(cc, numero, PERU_tipoRequisicion);

                            List<rptRequisicionInfoDTO> listRequisicionInfo = new List<rptRequisicionInfoDTO>();

                            listRequisicionInfo.Add(requisicion);

                            DataTable objEncabezado = getInfoEnca("Requisición", "");

                            string direccionEmpresa = "";
                            string rfcEmpresa = "";

                            if ((MainContextEnum)vSesiones.sesionEmpresaActual == MainContextEnum.PERU)
                            {
                                //PERU
                                direccionEmpresa = "";
                                rfcEmpresa = "";
                                objEncabezado.Rows[0][1] = @"";
                            }
                            else if ((MainContextEnum)vSesiones.sesionEmpresaActual == MainContextEnum.Colombia)
                            {
                                //COLOMBIA
                                direccionEmpresa = "";
                                rfcEmpresa = "";
                                objEncabezado.Rows[0][1] = @"";
                            }
                            else
                            {
                                //RESTO EMPRESAS
                                direccionEmpresa = " ";
                                rfcEmpresa = "";
                            }

                            rd.Database.Tables[0].SetDataSource(getInfoEnca("Requisición", ""));
                            rd.Database.Tables[1].SetDataSource(listRequisicionInfo);
                            rd.Database.Tables[2].SetDataSource(requisicion.partidas);

                            rd.SetParameterValue("usuarioSolicitaDesc", requisicion.usuarioSolicitaDesc ?? " ");
                            rd.SetParameterValue("usuarioSolicitaUso", requisicion.usuarioSolicitaUso ?? " ");
                            rd.SetParameterValue("direccionEmpresa", direccionEmpresa);
                            rd.SetParameterValue("rfcEmpresa", rfcEmpresa);

                            Session.Add("reporte", rd);
                        }
                        catch (Exception)
                        {

                        }
                        break;
                    }
                case ReportesEnum.reporteEntradaCompra:
                    {
                        try
                        {
                            setMedidasReporte("HC");
                            rd = new rptEntradaCompra();

                            var movimientos = (List<entradasAlmacenDTO>)Session["entradasCompra"];
                            var movimientosFormateados = new List<entradasAlmacenFormatoDTO>();
                            var simboloMoneda = vSesiones.sesionEmpresaActual != (int)EmpresaEnum.Peru ? "$ " : "S/ ";

                            foreach (var mov in movimientos)
                            {
                                movimientosFormateados.Add(new entradasAlmacenFormatoDTO
                                {
                                    partida = mov.partida,
                                    insumo = mov.insumo,
                                    areaCuenta = mov.areaCuenta,
                                    referencia = mov.referencia,
                                    remision = mov.remision,
                                    cantidad = mov.cantidad,
                                    precio = simboloMoneda + mov.precio.ToString("C6").Remove(0, 1),
                                    importe = simboloMoneda + mov.importe.ToString("C6").Remove(0, 1)
                                });
                            }

                            rd.Database.Tables[0].SetDataSource(getInfoEnca("Entrada Compra", "ALMACEN"));
                            rd.Database.Tables[1].SetDataSource(movimientosFormateados);

                            var info = movimientos.FirstOrDefault();

                            rd.SetParameterValue("almacen", info.almacen);
                            rd.SetParameterValue("centroCosto", info.centroCosto);
                            rd.SetParameterValue("ordenCompra", info.ordenCompra);
                            rd.SetParameterValue("fechaEntrada", info.fechaEntrada.ToShortDateString());
                            rd.SetParameterValue("proveedor", info.proveedor ?? "");
                            rd.SetParameterValue("direccion", info.direccion ?? "");
                            rd.SetParameterValue("ciudad", info.ciudad ?? "");
                            rd.SetParameterValue("telefonos", info.telefonos ?? "");
                            rd.SetParameterValue("folioEntrada", info.folioEntrada ?? "");
                            rd.SetParameterValue("comentarios", info.comentarios ?? "");
                            rd.SetParameterValue("totalCantidad", movimientos.Select(x => x.cantidad).Sum().ToString());
                            rd.SetParameterValue("totalPrecio", simboloMoneda + movimientos.Select(x => x.precio).Sum().ToString("C6").Remove(0, 1));
                            rd.SetParameterValue("totalImporte", simboloMoneda + movimientos.Select(x => x.importe).Sum().ToString("C6").Remove(0, 1));
                            rd.SetParameterValue("recibioDesc", info.recibio ?? "");

                            Session.Add("reporte", rd);
                        }
                        catch (Exception)
                        {

                        }
                        break;
                    }
                case ReportesEnum.reporteEntradaNoInventariable:
                    {
                        try
                        {
                            setMedidasReporte("HC");
                            rd = new rptEntradaNoInventariable();

                            var movimientos = (List<entradasAlmacenDTO>)Session["entradasNoInventariables"];
                            var movimientosFormateados = new List<entradasAlmacenFormatoDTO>();
                            var simboloMoneda = vSesiones.sesionEmpresaActual != (int)EmpresaEnum.Peru ? "$ " : "S/ ";

                            foreach (var mov in movimientos)
                            {
                                movimientosFormateados.Add(new entradasAlmacenFormatoDTO
                                {
                                    partida = mov.partida,
                                    insumo = mov.insumo,
                                    areaCuenta = mov.areaCuenta,
                                    referencia = mov.referencia,
                                    remision = mov.remision,
                                    cantidad = mov.cantidad,
                                    precio = simboloMoneda + mov.precio.ToString("C6").Remove(0, 1),
                                    importe = simboloMoneda + mov.importe.ToString("C6").Remove(0, 1)
                                });
                            }

                            rd.Database.Tables[0].SetDataSource(getInfoEnca("Entrada No Inventariable", "ALMACEN"));
                            rd.Database.Tables[1].SetDataSource(movimientosFormateados);

                            var info = movimientos.FirstOrDefault();

                            rd.SetParameterValue("almacen", info.almacen);
                            rd.SetParameterValue("centroCosto", info.centroCosto);
                            rd.SetParameterValue("ordenCompra", info.ordenCompra);
                            rd.SetParameterValue("fechaEntrada", info.fechaEntrada.ToShortDateString());
                            rd.SetParameterValue("proveedor", info.proveedor);
                            rd.SetParameterValue("direccion", info.direccion);
                            rd.SetParameterValue("ciudad", info.ciudad);
                            rd.SetParameterValue("telefonos", info.telefonos);
                            rd.SetParameterValue("folioEntrada", info.folioEntrada);
                            rd.SetParameterValue("comentarios", info.comentarios);
                            rd.SetParameterValue("totalCantidad", movimientos.Select(x => x.cantidad).Sum().ToString());
                            rd.SetParameterValue("totalPrecio", simboloMoneda + movimientos.Select(x => x.precio).Sum().ToString("C6").Remove(0, 1));
                            rd.SetParameterValue("totalImporte", simboloMoneda + movimientos.Select(x => x.importe).Sum().ToString("C6").Remove(0, 1));
                            rd.SetParameterValue("recibioDesc", "");

                            Session.Add("reporte", rd);
                        }
                        catch (Exception)
                        {

                        }
                        break;
                    }
                case ReportesEnum.reporteEntradaDevolucion:
                    {
                        try
                        {
                            setMedidasReporte("HC");
                            rd = new rptEntradaDevolucion();

                            var movimientos = (List<entradasAlmacenDTO>)Session["entradasDevolucion"];

                            rd.Database.Tables[0].SetDataSource(getInfoEnca("Entrada Devolución", "ALMACEN"));
                            rd.Database.Tables[1].SetDataSource(movimientos);

                            var info = movimientos.FirstOrDefault();

                            rd.SetParameterValue("almacen", info.almacen);
                            rd.SetParameterValue("centroCosto", info.centroCosto);
                            rd.SetParameterValue("fechaEntrada", info.fechaEntrada.ToShortDateString());
                            rd.SetParameterValue("folioEntrada", info.folioEntrada);
                            rd.SetParameterValue("comentarios", info.comentarios);
                            rd.SetParameterValue("totalCantidad", movimientos.Select(x => x.cantidad).Sum().ToString());
                            rd.SetParameterValue("totalPrecio", movimientos.Select(x => x.precio).Sum().ToString());
                            rd.SetParameterValue("totalImporte", movimientos.Select(x => x.importe).Sum().ToString());
                            rd.SetParameterValue("autorizoDesc", "");
                            rd.SetParameterValue("recibioDesc", "");

                            Session.Add("reporte", rd);
                        }
                        catch (Exception)
                        {

                        }
                        break;
                    }
                case ReportesEnum.reporteEntradaFisico:
                    {
                        try
                        {
                            setMedidasReporte("HC");
                            rd = new rptEntradaFisico();

                            var movimientos = (List<entradasAlmacenDTO>)Session["entradasFisico"];
                            var movimientosFormateados = new List<entradasAlmacenFormatoDTO>();
                            var simboloMoneda = vSesiones.sesionEmpresaActual != (int)EmpresaEnum.Peru ? "$ " : "S/ ";

                            foreach (var mov in movimientos)
                            {
                                movimientosFormateados.Add(new entradasAlmacenFormatoDTO
                                {
                                    partida = mov.partida,
                                    insumo = mov.insumo,
                                    areaCuenta = mov.areaCuenta,
                                    referencia = mov.referencia,
                                    remision = mov.remision,
                                    cantidad = mov.cantidad,
                                    precio = simboloMoneda + mov.precio.ToString("C6").Remove(0, 1),
                                    importe = simboloMoneda + mov.importe.ToString("C6").Remove(0, 1)
                                });
                            }

                            rd.Database.Tables[0].SetDataSource(getInfoEnca("Entrada Inventario Físico", "ALMACEN"));
                            rd.Database.Tables[1].SetDataSource(movimientosFormateados);

                            var info = movimientos.FirstOrDefault();

                            rd.SetParameterValue("almacen", info.almacen);
                            rd.SetParameterValue("centroCosto", info.centroCosto);
                            rd.SetParameterValue("fechaEntrada", info.fechaEntrada.ToShortDateString());
                            rd.SetParameterValue("folioEntrada", info.folioEntrada);
                            rd.SetParameterValue("comentarios", info.comentarios ?? "");
                            rd.SetParameterValue("totalCantidad", movimientos.Select(x => x.cantidad).Sum().ToString());
                            rd.SetParameterValue("totalPrecio", simboloMoneda + movimientos.Select(x => x.precio).Sum().ToString("C6").Remove(0, 1));
                            rd.SetParameterValue("totalImporte", simboloMoneda + movimientos.Select(x => x.importe).Sum().ToString("C6").Remove(0, 1));
                            //Capturó Inventario Físico
                            rd.SetParameterValue("recibioDesc", info.recibio ?? "");

                            Session.Add("reporte", rd);
                        }
                        catch (Exception)
                        {

                        }
                        break;
                    }
                case ReportesEnum.reporteSalidaDevolucion:
                    {
                        try
                        {
                            setMedidasReporte("HC");
                            rd = new rptSalidaDevolucion();

                            var movimientos = (List<salidasAlmacenDTO>)Session["salidasDevolucion"];
                            var movimientosFormateados = new List<salidasAlmacenFormatoDTO>();
                            var simboloMoneda = vSesiones.sesionEmpresaActual != (int)EmpresaEnum.Peru ? "$ " : "S/ ";

                            foreach (var mov in movimientos)
                            {
                                movimientosFormateados.Add(new salidasAlmacenFormatoDTO
                                {
                                    partida = mov.partida,
                                    insumo = mov.insumo,
                                    areaCuenta = mov.areaCuenta,
                                    referencia = mov.referencia,
                                    remision = mov.remision,
                                    cantidad = mov.cantidad,
                                    precio = simboloMoneda + mov.precio.ToString("C6").Remove(0, 1),
                                    importe = simboloMoneda + mov.importe.ToString("C6").Remove(0, 1)
                                });
                            }

                            rd.Database.Tables[0].SetDataSource(getInfoEnca("Salida Devolución", "ALMACEN"));
                            rd.Database.Tables[1].SetDataSource(movimientosFormateados);

                            var info = movimientos.FirstOrDefault();

                            rd.SetParameterValue("almacen", info.almacen);
                            rd.SetParameterValue("centroCosto", info.centroCosto);
                            rd.SetParameterValue("ordenCompra", info.ordenCompra);
                            rd.SetParameterValue("fechaSalida", info.fechaSalida.ToShortDateString());
                            rd.SetParameterValue("folioSalida", info.folioSalida);
                            rd.SetParameterValue("comentarios", info.comentarios);
                            rd.SetParameterValue("totalCantidad", movimientos.Select(x => x.cantidad).Sum().ToString());
                            rd.SetParameterValue("totalPrecio", simboloMoneda + movimientos.Select(x => x.precio).Sum().ToString("C6").Remove(0, 1));
                            rd.SetParameterValue("totalImporte", simboloMoneda + movimientos.Select(x => x.importe).Sum().ToString("C6").Remove(0, 1));
                            rd.SetParameterValue("recibioDesc", "");

                            Session.Add("reporte", rd);
                        }
                        catch (Exception)
                        {

                        }
                        break;
                    }
                case ReportesEnum.reporteSalidaFisico:
                    {
                        try
                        {
                            setMedidasReporte("HC");
                            rd = new rptSalidaFisico();

                            var movimientos = (List<salidasAlmacenDTO>)Session["salidasFisico"];
                            var movimientosFormateados = new List<salidasAlmacenFormatoDTO>();
                            var simboloMoneda = vSesiones.sesionEmpresaActual != (int)EmpresaEnum.Peru ? "$ " : "S/ ";

                            foreach (var mov in movimientos)
                            {
                                movimientosFormateados.Add(new salidasAlmacenFormatoDTO
                                {
                                    partida = mov.partida,
                                    insumo = mov.insumo,
                                    areaCuenta = mov.areaCuenta,
                                    referencia = mov.referencia,
                                    remision = mov.remision,
                                    cantidad = mov.cantidad,
                                    precio = simboloMoneda + mov.precio.ToString("C6").Remove(0, 1),
                                    importe = simboloMoneda + mov.importe.ToString("C6").Remove(0, 1)
                                });
                            }

                            rd.Database.Tables[0].SetDataSource(getInfoEnca("Salida Físico", "ALMACEN"));
                            rd.Database.Tables[1].SetDataSource(movimientosFormateados);

                            var info = movimientos.FirstOrDefault();

                            rd.SetParameterValue("almacen", info.almacen);
                            rd.SetParameterValue("centroCosto", info.centroCosto);
                            rd.SetParameterValue("fechaSalida", info.fechaSalida.ToShortDateString());
                            rd.SetParameterValue("folioSalida", info.folioSalida);
                            rd.SetParameterValue("comentarios", info.comentariosGenerales ?? info.comentarios ?? "");
                            rd.SetParameterValue("totalCantidad", movimientos.Select(x => x.cantidad).Sum().ToString());
                            rd.SetParameterValue("totalPrecio", simboloMoneda + movimientos.Select(x => x.precio).Sum().ToString("C6").Remove(0, 1));
                            rd.SetParameterValue("totalImporte", simboloMoneda + movimientos.Select(x => x.importe).Sum().ToString("C6").Remove(0, 1));
                            rd.SetParameterValue("recibioDesc", "");

                            Session.Add("reporte", rd);
                        }
                        catch (Exception)
                        {

                        }
                        break;
                    }
                case ReportesEnum.reporteSalidaConsumoSinOrigen:
                    {
                        try
                        {
                            setMedidasReporte("HC");
                            rd = new rptSalidaConsumoSinOrigen();

                            var movimientos = (List<salidasAlmacenDTO>)Session["salidasConsumo"];
                            var movimientosFormateados = new List<salidasAlmacenFormatoDTO>();
                            var simboloMoneda = vSesiones.sesionEmpresaActual != (int)EmpresaEnum.Peru ? "$ " : "S/ ";

                            foreach (var mov in movimientos)
                            {
                                movimientosFormateados.Add(new salidasAlmacenFormatoDTO
                                {
                                    partida = mov.partida,
                                    insumo = mov.insumo,
                                    areaCuenta = (int)EmpresaEnum.Peru == vSesiones.sesionEmpresaActual || (int)EmpresaEnum.Colombia == vSesiones.sesionEmpresaActual ? string.IsNullOrEmpty(mov.noEconomico) ? "0-0" : mov.noEconomico : mov.areaCuenta,
                                    referencia = mov.referencia,
                                    remision = mov.remision,
                                    cantidad = mov.cantidad,
                                    precio = simboloMoneda + mov.precio.ToString("C6").Remove(0, 1),
                                    importe = simboloMoneda + mov.importe.ToString("C6").Remove(0, 1)
                                });
                            }

                            rd.Database.Tables[0].SetDataSource(getInfoEnca("Salida Consumo", "ALMACEN"));
                            rd.Database.Tables[1].SetDataSource(movimientosFormateados);

                            var info = movimientos.FirstOrDefault();

                            rd.SetParameterValue("almacen", info.almacen);
                            rd.SetParameterValue("centroCosto", info.centroCosto);
                            rd.SetParameterValue("fechaSalida", info.fechaSalida.ToShortDateString());
                            rd.SetParameterValue("folioSalida", info.folioSalida);
                            rd.SetParameterValue("comentarios", string.IsNullOrEmpty(info.comentarios) ? "" : info.comentarios);
                            rd.SetParameterValue("totalCantidad", movimientos.Select(x => x.cantidad).Sum().ToString());
                            rd.SetParameterValue("totalPrecio", simboloMoneda + movimientos.Select(x => x.precio).Sum().ToString("C6").Remove(0, 1));
                            rd.SetParameterValue("totalImporte", simboloMoneda + movimientos.Select(x => x.importe).Sum().ToString("C6").Remove(0, 1));
                            rd.SetParameterValue("tituloFirmaTransportista", (((int)EmpresaEnum.Construplan == vSesiones.sesionEmpresaActual || (int)EmpresaEnum.Arrendadora == vSesiones.sesionEmpresaActual) ? "Transportista" : "Colaborador"));
                            rd.SetParameterValue("transportista", "");
                            rd.SetParameterValue("autorizoDesc", "");
                            rd.SetParameterValue("recibioDesc", "");

                            Session.Add("reporte", rd);
                        }
                        catch (Exception)
                        {

                        }
                        break;
                    }
                case ReportesEnum.reporteSeguimientoRequisiciones:
                    {
                        try
                        {
                            setMedidasReporte("HO");
                            rd = new rptSeguimientoRequisiciones();

                            var seguimiento = (List<RequisicionSeguimientoDTO>)Session["seguimientoRequisiciones"];

                            rd.Database.Tables[0].SetDataSource(getInfoEnca("Seguimiento Requisiciones", "Resumen de Requisiciones Pendientes por Surtir"));

                            List<object> tabla = new List<object>();

                            foreach (var seg in seguimiento)
                            {
                                tabla.Add(new
                                {
                                    requisitor = seg.requisitorDesc,
                                    requisicion = seg.requisicion,
                                    fechaElaboracionDesc = seg.fechaElaboracionDesc,
                                    fechaEntregaComprasDesc = seg.fechaEntregaComprasDesc,
                                    tipoRequisicion = seg.tipoRequisicion,
                                    economico = seg.economico,
                                    descripcion = seg.descripcion,
                                    compradorDesc = seg.compradorDesc,
                                    ordenCompra = seg.ordenCompra,
                                    ordenCompraAutorizada = seg.ordenCompraAutorizada,
                                    proveedorDesc = seg.proveedorDesc,
                                    tiempoEntregaDiasDesc = seg.tiempoEntregaDiasDesc,
                                    tiempoEntregaComentarios = seg.tiempoEntregaComentarios,
                                    fechaEntradaDesc = seg.fechaEntradaDesc
                                });
                            }

                            rd.Database.Tables[1].SetDataSource(tabla);

                            Session.Add("reporte", rd);
                        }
                        catch (Exception)
                        {

                        }
                        break;
                    }
                case ReportesEnum.DIAGRAMA_GANTT:
                    {
                        setMedidasReporte("HC");
                        rd = new rptDiagramaGantt();

                        var idEventoOverhaul = Request.QueryString["index"].Trim() == "" ? "" : Request.QueryString["index"];
                        var tipoOverhaulDG = Request.QueryString["tipo"].Trim() == "" ? "" : Request.QueryString["tipo"];


                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Reporte Ejecutivo", "DIRECCION DE MAQUINARIA Y EQUIPO ADMINISTRACION DE OVERHAUL"));

                        var eventoOverhaul = tallerOverhaulFactoryServices.getTallerOverhaulFactoryServices().getEventoOHByID(Int32.Parse(idEventoOverhaul));
                        var maquinaEventoOverhaul = maquinaFactoryServices.getMaquinaServices().GetMaquina(eventoOverhaul.maquinaID);
                        var diasTotalesOverhaul = tipoOverhaulDG == "0" ? ((eventoOverhaul.fechaFinP ?? default(DateTime)) - (eventoOverhaul.fechaInicio ?? default(DateTime))).TotalDays + 1 :
                            ((eventoOverhaul.fechaFin ?? default(DateTime)) - (eventoOverhaul.fechaInicio ?? default(DateTime))).TotalDays + 1;

                        var actividadesDG = JsonConvert.DeserializeObject<List<ActividadOverhaulDTO>>(eventoOverhaul.actividades).Select(x => new DGDTO()
                        {
                            id = x.id,
                            idActividad = x.idAct,
                            descripcion = tallerOverhaulFactoryServices.getTallerOverhaulFactoryServices().getDescripcionActividadOverhaul(x.idAct).ToUpper(),
                            comentario = tallerOverhaulFactoryServices.getTallerOverhaulFactoryServices().CargarStringComentarioActividad(x.idAct, eventoOverhaul.id, 0, x.fechaInicio ?? default(DateTime), x.numDia).ToUpper(),
                            duracion = x.horasDuracion,
                            fechaInicio = tipoOverhaulDG == "0" ? (x.fechaInicioP ?? default(DateTime)).ToString("D", CultureInfo.CreateSpecificCulture("es-ES")) :
                                (x.fechaInicio ?? default(DateTime)).ToString("D", CultureInfo.CreateSpecificCulture("es-ES")),
                            fechaInicioP = (x.fechaInicioP ?? default(DateTime)).ToString("dd/MM/yyyy"),
                            fechaEjecucion = tipoOverhaulDG == "0" ? "" :
                                (x.fechaInicio ?? default(DateTime)).ToString("dd/MM/yyyy"),
                            comentarioRE = tallerOverhaulFactoryServices.getTallerOverhaulFactoryServices().CargarStringComentarioActividad(x.idAct, eventoOverhaul.id, 1, x.fechaInicio ?? default(DateTime), x.numDia).ToUpper(),
                            fechaInicioRaw = tipoOverhaulDG == "0" ? x.fechaInicioP ?? default(DateTime) : x.fechaInicio ?? default(DateTime),
                            //archivos = tallerOverhaulFactoryServices.getTallerOverhaulFactoryServices().CargarArchivosActividad(eventoOverhaul.id, x.idAct, 0, x.numDia),
                            fechaFin = tipoOverhaulDG == "0" ? "" :
                                (x.fechaFin ?? default(DateTime)).ToString("dd/MM/yyyy"),
                        }).Where(x => x.fechaInicioRaw != default(DateTime)).ToList();

                        //int auxIDAct = 0;
                        //for (int i = 0; i < actividadesDG.Count(); i++)
                        //{
                        //    if (actividadesDG[i].idActividad == 702)
                        //    {
                        //        int a = 0;
                        //    }
                        //    if (i > 0 && auxIDAct == actividadesDG[i].idActividad)
                        //    {
                        //        actividadesDG[i].fechaInicio = actividadesDG[i - 1].fechaInicio;
                        //        actividadesDG[i].fechaEjecucion = actividadesDG[i - 1].fechaEjecucion;
                        //        actividadesDG[i].fechaInicioP = actividadesDG[i - 1].fechaInicioP;
                        //        actividadesDG[i].fechaInicioRaw = actividadesDG[i - 1].fechaInicioRaw;
                        //    }
                        //    auxIDAct = actividadesDG[i].idActividad;
                        //}

                        int auxActividad = -1;
                        DateTime fechaInicio = DateTime.Today;

                        //foreach (var item in actividadesDG) 
                        //{
                        //    if (item.id == auxActividad)
                        //    {

                        //        if (item.fechaInicioRaw == fechaInicio)
                        //        {
                        //            item.fechaInicioRaw = item.fechaInicioRaw.AddDays(1);
                        //            item.fechaInicio = item.fechaInicioRaw.ToString("D", CultureInfo.CreateSpecificCulture("es-ES"));
                        //        }
                        //    }
                        //    else
                        //    {
                        //        auxActividad = item.id;
                        //        fechaInicio = item.fechaInicioRaw;
                        //    }
                        //}

                        //actividadesDG = actividadesDG.GroupBy(x => new { x.idActividad, x.fechaInicio }).Select(x => new DGDTO()
                        //{
                        //    id = x.FirstOrDefault().id,
                        //    idActividad = x.Key.idActividad,
                        //    descripcion = x.LastOrDefault().descripcion,
                        //    comentario = x.LastOrDefault().comentario,
                        //    duracion = x.Sum(y => y.duracion),
                        //    fechaInicio = x.Key.fechaInicio,
                        //    fechaEjecucion = x.LastOrDefault().fechaEjecucion,
                        //    comentarioRE = x.LastOrDefault().comentarioRE,
                        //    fechaInicioRaw = x.LastOrDefault().fechaInicioRaw,
                        //    archivos = x.LastOrDefault().archivos,
                        //    fechaFin = x.LastOrDefault().fechaFin,
                        //}).ToList();

                        //var archivosActividadRE = actividadesDG.Select(x => x.archivos).ToList();

                        rd.Database.Tables[1].SetDataSource(actividadesDG);

                        rd.SetParameterValue("noEconomico", maquinaEventoOverhaul.noEconomico);
                        rd.SetParameterValue("descripcion", maquinaEventoOverhaul.descripcion + " " + maquinaEventoOverhaul.marca.descripcion + " " + maquinaEventoOverhaul.modeloEquipo.descripcion);
                        rd.SetParameterValue("serie", "SERIE: " + maquinaEventoOverhaul.noSerie);
                        rd.SetParameterValue("diasTotal", diasTotalesOverhaul + (diasTotalesOverhaul > 1 ? " días" : " día"));
                        rd.SetParameterValue("fechaInicio", (eventoOverhaul.fechaInicio ?? default(DateTime)).ToString("D", CultureInfo.CreateSpecificCulture("es-ES")));
                        rd.SetParameterValue("fechaFin", tipoOverhaulDG == "0" ? (eventoOverhaul.fechaFinP ?? default(DateTime)).ToString("D", CultureInfo.CreateSpecificCulture("es-ES")) :
                            (eventoOverhaul.fechaFin ?? default(DateTime)).ToString("D", CultureInfo.CreateSpecificCulture("es-ES")));
                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.ordenCompraEK:
                    {
                        try
                        {
                            setMedidasReporte("HC");
                            rd = new rptOrdenCompraEK();

                            string cc = Request.QueryString["cc"];
                            int numero = int.Parse(Request.QueryString["numero"]);
                            string PERU_tipoCompra = Request.QueryString["PERU_tipoCompra"] != null ? Request.QueryString["PERU_tipoCompra"] as string : "";

                            var ordenCompra = ordenCompraFactoryServices.getOcService().getOrdenCompraRpt(cc, numero, PERU_tipoCompra);

                            List<rptOrdenCompraInfoDTO> listOrdenCompraInfo = new List<rptOrdenCompraInfoDTO>();

                            listOrdenCompraInfo.Add(ordenCompra);

                            rd.Database.Tables[0].SetDataSource(getInfoEnca("Orden de Compra", ""));
                            rd.Database.Tables[1].SetDataSource(listOrdenCompraInfo);
                            rd.Database.Tables[2].SetDataSource(ordenCompra.pago);
                            rd.Database.Tables[3].SetDataSource(ordenCompra.partidas);

                            List<object> lstRetenciones = new List<object>() { };
                            foreach (var item in ordenCompra.lstRetencionesDTO)
                            {
                                lstRetenciones.Add(new
                                {
                                    id_cpto = item.id_cpto,
                                    desc_ret = item.desc_ret,
                                    importe = item.importe
                                });
                            }

                            rd.Database.Tables[4].SetDataSource(lstRetenciones);

                            rd.SetParameterValue("cfdi", ordenCompra.CFDI != null ? ordenCompra.CFDI : string.Empty);

                            if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
                            {
                                rd.SetParameterValue("direccion", "CAMINOS DEL INCA 244 OF. 803 SANTIAGO DE SURCO - LIMA");
                                rd.SetParameterValue("formaPago1", ordenCompra.PERU_formaPago);
                                rd.SetParameterValue("formaPago2", ordenCompra.PERU_formaPago);
                                rd.SetParameterValue("PERU_tipoCompra", ordenCompra.PERU_tipoCompra);
                            }
                            else if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Colombia)
                            {
                                rd.SetParameterValue("direccion", "CALLE 98 # 70-91 OFICINA 1012 EDIFICIO VARDI");
                                rd.SetParameterValue("formaPago1", "PPD (Pago en parcialidades o diferido)");
                                rd.SetParameterValue("formaPago2", "99 (Por definir)");
                                rd.SetParameterValue("PERU_tipoCompra", "");
                            }
                            else
                            {
                                rd.SetParameterValue("direccion", "PERIFERICO PTE 770 COL. EMILIANO ZAPATA");
                                rd.SetParameterValue("formaPago1", "PPD (Pago en parcialidades o diferido)");
                                rd.SetParameterValue("formaPago2", "99 (Por definir)");
                                rd.SetParameterValue("PERU_tipoCompra", "");
                            }

                            if (vSesiones.sesionVersionCompraOriginal == null)
                            {
                                rd.SetParameterValue("version", "COPIA");
                            }
                            else
                            {
                                rd.SetParameterValue("version", vSesiones.sesionVersionCompraOriginal ? "ORIGINAL" : "COPIA");
                            }

                            rd.SetParameterValue("tipoCompra", ordenCompra.tipoCompra ?? "");

                            if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan)
                            {
                                rd.SetParameterValue("rfc", "SGI160111MQ9");
                                rd.SetParameterValue("facturar", "SOL- INDUSTRIALES SA DE CV");
                                rd.SetParameterValue("leyendaDocumentacion", "");
                                rd.SetParameterValue("textoPieInforme", @"ESTA ORDEN DE COMPRA REPRESENTA LA INTENCION DE ADQUIRIR UN BIEN Y/O SERVICIO, EL PROVEEDOR ESTA OBLIGADO A CARGAR SU FACTURA AL . LA ORDEN DE COMPRA O FACTURA POR SI SOLA NO REPRESENTA PARA CONSTRUPLAN UN COMPROMISO DE PAGO.");
                            }
                            else if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                            {
                                rd.SetParameterValue("rfc", "ACO171207CZ7");
                                rd.SetParameterValue("facturar", "ARRENDADORA CONSTRUPLAN SA DE CV");
                                rd.SetParameterValue("leyendaDocumentacion", "");
                                rd.SetParameterValue("textoPieInforme", @"ESTA ORDEN DE COMPRA REPRESENTA LA INTENCION DE ADQUIRIR UN BIEN Y/O SERVICIO, EL PROVEEDOR ESTA OBLIGADO A CARGAR SU FACTURA AL PORTAL DE PROVEEDORES DE ARRENDADORA CONSTRUPLAN HASTA MAXIMO 15 DIAS SIGUIENTES A LA FECHA DE FACTURACIÓN. LA ORDEN DE COMPRA O FACTURA POR SI SOLA NO REPRESENTA PARA ARRENDADORA CONSTRUPLAN UN COMPROMISO DE PAGO.");
                            }
                            else if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.EICI)
                            {
                                rd.SetParameterValue("rfc", "CIE1809208AC");
                                rd.SetParameterValue("facturar", "CONSTRUPLAN E ICI ENERGIA S.A.P.I. DE C.V.");
                                rd.SetParameterValue("leyendaDocumentacion", "");
                                rd.SetParameterValue("textoPieInforme", @"ESTA ORDEN DE COMPRA REPRESENTA LA INTENCION DE ADQUIRIR UN BIEN Y/O SERVICIO, EL PROVEEDOR ESTA OBLIGADO A CARGAR SU FACTURA AL PORTAL DE PROVEEDORES DE CONSTRUPLAN HASTA MAXIMO 15 DIAS SIGUIENTES A LA FECHA DE FACTURACIÓN. LA ORDEN DE COMPRA O FACTURA POR SI SOLA NO REPRESENTA PARA CONSTRUPLAN UN COMPROMISO DE PAGO.");
                            }
                            else if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
                            {
                                rd.SetParameterValue("rfc", "RUC 20609408261");
                                rd.SetParameterValue("facturar", ordenCompra.facturar);
                                rd.SetParameterValue("leyendaDocumentacion", "FAVOR DE ENVIAR LA SIGUIENTE DOCUMENTACIÓN AL CORREO: <b style='font-size:8px'>proveedorescdp@construplan.com.pe</b> ORDEN DE COMPRA O SERVICIO, FACTURA FISCAL Y XML. VALIDACIÓN DE LA FACTURA POR SUNAT.");
                                rd.SetParameterValue("textoPieInforme", @"ESTA ORDEN DE COMPRA REPRESENTA LA INTENCION DE ADQUIRIR UN BIEN Y/O SERVICIO, EL PROVEEDOR ESTA OBLIGADO A CARGAR SU FACTURA AL PORTAL DE PROVEEDORES DE CONSTRUPLAN HASTA MAXIMO 15 DIAS SIGUIENTES A LA FECHA DE FACTURACIÓN. LA ORDEN DE COMPRA O FACTURA POR SI SOLA NO REPRESENTA PARA CONSTRUPLAN UN COMPROMISO DE PAGO.");
                            }
                            else if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Colombia)
                            {
                                rd.SetParameterValue("rfc", "GCP800324FJ1");
                                rd.SetParameterValue("facturar", "GRUPO CONSTRUCCIONES PLANIFICADAS SA DE CV");
                                rd.SetParameterValue("leyendaDocumentacion", "");
                                rd.SetParameterValue("textoPieInforme", @"ESTA ORDEN DE COMPRA REPRESENTA LA INTENCION DE ADQUIRIR UN BIEN Y/O SERVICIO, EL PROVEEDOR ESTA OBLIGADO A CARGAR SU FACTURA AL PORTAL DE PROVEEDORES DE CONSTRUPLAN HASTA MAXIMO 15 DIAS SIGUIENTES A LA FECHA DE FACTURACIÓN. LA ORDEN DE COMPRA O FACTURA POR SI SOLA NO REPRESENTA PARA CONSTRUPLAN UN COMPROMISO DE PAGO.");
                            }
                            else
                            {
                                //Valores default para el resto de empresas hasta que se especifique.
                                rd.SetParameterValue("rfc", "SGI160111MQ9");
                                rd.SetParameterValue("facturar", "SOL- INDUSTRIALES SA DE CV");
                                rd.SetParameterValue("leyendaDocumentacion", "");
                                rd.SetParameterValue("textoPieInforme", @"ESTA ORDEN DE COMPRA REPRESENTA LA INTENCION DE ADQUIRIR UN BIEN Y/O SERVICIO, EL PROVEEDOR ESTA OBLIGADO A CARGAR SU FACTURA AL PORTAL DE PROVEEDORES DE CONSTRUPLAN HASTA MAXIMO 15 DIAS SIGUIENTES A LA FECHA DE FACTURACIÓN. LA ORDEN DE COMPRA O FACTURA POR SI SOLA NO REPRESENTA PARA CONSTRUPLAN UN COMPROMISO DE PAGO.");
                            }
                            rd.SetParameterValue("fechaVencimiento", ordenCompra.fechaVencimientoString ?? "");
                            rd.SetParameterValue("totalRetencion", ordenCompra.totalRetencion);
                            rd.SetParameterValue("totalFinal", ordenCompra.totalFinal);

                            Session.Add("reporte", rd);
                        }
                        catch (Exception)
                        {

                        }
                        break;
                    }
                case ReportesEnum.ordenCompraConsultaEK:
                    {
                        try
                        {
                            setMedidasReporte("HC");
                            rd = new rptOrdenCompraConsultaEK();

                            string cc = Request.QueryString["cc"];
                            int numero = int.Parse(Request.QueryString["numero"]);

                            var ordenCompra = ordenCompraFactoryServices.getOcService().getOrdenCompraRpt(cc, numero, "");

                            List<rptOrdenCompraInfoDTO> listOrdenCompraInfo = new List<rptOrdenCompraInfoDTO>();

                            listOrdenCompraInfo.Add(ordenCompra);

                            rd.Database.Tables[0].SetDataSource(getInfoEnca("Orden de Compra", ""));
                            rd.Database.Tables[1].SetDataSource(listOrdenCompraInfo);
                            rd.Database.Tables[2].SetDataSource(ordenCompra.pago);
                            rd.Database.Tables[3].SetDataSource(ordenCompra.partidas);

                            rd.SetParameterValue("cfdi", ordenCompra.CFDI);
                            rd.SetParameterValue("version", "COPIA"); //Cuando se imprime por consulta siempre será copia ya que primero se debe imprimir por un comprador en la vista de generar compras.

                            if (vSesiones.sesionEmpresaActual == 1)
                            {
                                rd.SetParameterValue("rfc", " ");
                                rd.SetParameterValue("facturar", "SOL- INDUSTRIALES SA DE CV");
                                rd.SetParameterValue("textoPieInforme", @"ESTA ORDEN DE COMPRA REPRESENTA LA INTENCION DE ADQUIRIR UN BIEN Y/O SERVICIO, EL PROVEEDOR ESTA OBLIGADO A CARGAR SU FACTURA AL PORTAL LA ORDEN DE COMPRA O FACTURA POR SI SOLA NO REPRESENTA PARA CONSTRUPLAN UN COMPROMISO DE PAGO.");
                            }
                            else if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
                            {
                                rd.SetParameterValue("rfc", "RUC 20609408261");
                                rd.SetParameterValue("facturar", ordenCompra.facturar);
                                rd.SetParameterValue("textoPieInforme", @"ESTA ORDEN DE COMPRA REPRESENTA LA INTENCION DE ADQUIRIR UN BIEN Y/O SERVICIO, EL PROVEEDOR ESTA OBLIGADO A CARGAR SU FACTURA AL PORTAL DE PROVEEDORES DE CONSTRUPLAN HASTA MAXIMO 15 DIAS SIGUIENTES A LA FECHA DE FACTURACIÓN. LA ORDEN DE COMPRA O FACTURA POR SI SOLA NO REPRESENTA PARA CONSTRUPLAN UN COMPROMISO DE PAGO.");
                            }
                            else if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Colombia)
                            {
                                rd.SetParameterValue("rfc", "901.308.390-1");
                                rd.SetParameterValue("facturar", "CONSTRUPLAN COLOMBIA SA DE CV");
                                rd.SetParameterValue("textoPieInforme", @"ESTA ORDEN DE COMPRA REPRESENTA LA INTENCION DE ADQUIRIR UN BIEN Y/O SERVICIO, EL PROVEEDOR ESTA OBLIGADO A CARGAR SU FACTURA AL PORTAL DE PROVEEDORES DE CONSTRUPLAN HASTA MAXIMO 15 DIAS SIGUIENTES A LA FECHA DE FACTURACIÓN. LA ORDEN DE COMPRA O FACTURA POR SI SOLA NO REPRESENTA PARA CONSTRUPLAN UN COMPROMISO DE PAGO.");
                            }
                            else
                            {
                                rd.SetParameterValue("rfc", "ACO171207CZ7");
                                rd.SetParameterValue("facturar", "ARRENDADORA CONSTRUPLAN SA DE CV");
                                rd.SetParameterValue("textoPieInforme", @"ESTA ORDEN DE COMPRA REPRESENTA LA INTENCION DE ADQUIRIR UN BIEN Y/O SERVICIO, EL PROVEEDOR ESTA OBLIGADO A CARGAR SU FACTURA AL PORTAL DE PROVEEDORES DE ARRENDADORA CONSTRUPLAN HASTA MAXIMO 15 DIAS SIGUIENTES A LA FECHA DE FACTURACIÓN. LA ORDEN DE COMPRA O FACTURA POR SI SOLA NO REPRESENTA PARA ARRENDADORA CONSTRUPLAN UN COMPROMISO DE PAGO.");
                            }

                            Session.Add("reporte", rd);
                        }
                        catch (Exception)
                        {

                        }
                        break;
                    }
                case ReportesEnum.ordenCompraAuditoria:
                    {
                        try
                        {
                            setMedidasReporte("HC");
                            rd = new rptOrdenCompraEK();

                            string cc = Request.QueryString["cc"];
                            int numero = int.Parse(Request.QueryString["numero"]);

                            var ordenCompra = ordenCompraFactoryServices.getOcService().getOrdenCompraRpt(cc, numero, "");

                            List<rptOrdenCompraInfoDTO> listOrdenCompraInfo = new List<rptOrdenCompraInfoDTO>();

                            listOrdenCompraInfo.Add(ordenCompra);

                            rd.Database.Tables[0].SetDataSource(getInfoEnca("Orden de Compra", ""));
                            rd.Database.Tables[1].SetDataSource(listOrdenCompraInfo);
                            rd.Database.Tables[2].SetDataSource(ordenCompra.pago);
                            rd.Database.Tables[3].SetDataSource(ordenCompra.partidas);

                            rd.SetParameterValue("cfdi", ordenCompra.CFDI);

                            rd.SetParameterValue("version", "REPORTE AUDITORIA");

                            if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan)
                            {
                                rd.SetParameterValue("rfc", " ");
                                rd.SetParameterValue("facturar", "SOL- INDUSTRIALES SA DE CV");
                                rd.SetParameterValue("textoPieInforme", @"ESTA ORDEN DE COMPRA REPRESENTA LA INTENCION DE ADQUIRIR UN BIEN Y/O SERVICIO, EL PROVEEDOR ESTA OBLIGADO A CARGAR SU FACTURA AL PORTAL . LA ORDEN DE COMPRA O FACTURA POR SI SOLA NO REPRESENTA PARA CONSTRUPLAN UN COMPROMISO DE PAGO.");
                            }
                            else if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                            {
                                rd.SetParameterValue("rfc", "ACO171207CZ7");
                                rd.SetParameterValue("facturar", "ARRENDADORA CONSTRUPLAN SA DE CV");
                                rd.SetParameterValue("textoPieInforme", @"ESTA ORDEN DE COMPRA REPRESENTA LA INTENCION DE ADQUIRIR UN BIEN Y/O SERVICIO, EL PROVEEDOR ESTA OBLIGADO A CARGAR SU FACTURA AL PORTAL DE PROVEEDORES DE ARRENDADORA CONSTRUPLAN HASTA MAXIMO 15 DIAS SIGUIENTES A LA FECHA DE FACTURACIÓN. LA ORDEN DE COMPRA O FACTURA POR SI SOLA NO REPRESENTA PARA ARRENDADORA CONSTRUPLAN UN COMPROMISO DE PAGO.");
                            }
                            else if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.EICI)
                            {
                                rd.SetParameterValue("rfc", "CIE1809208AC");
                                rd.SetParameterValue("facturar", "CONSTRUPLAN E ICI ENERGIA S.A.P.I. DE C.V.");
                                rd.SetParameterValue("textoPieInforme", @"ESTA ORDEN DE COMPRA REPRESENTA LA INTENCION DE ADQUIRIR UN BIEN Y/O SERVICIO, EL PROVEEDOR ESTA OBLIGADO A CARGAR SU FACTURA AL PORTAL DE PROVEEDORES DE CONSTRUPLAN HASTA MAXIMO 15 DIAS SIGUIENTES A LA FECHA DE FACTURACIÓN. LA ORDEN DE COMPRA O FACTURA POR SI SOLA NO REPRESENTA PARA CONSTRUPLAN UN COMPROMISO DE PAGO.");
                            }
                            else if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
                            {
                                rd.SetParameterValue("rfc", ordenCompra.rfc);
                                rd.SetParameterValue("facturar", ordenCompra.facturar);
                                rd.SetParameterValue("textoPieInforme", @"ESTA ORDEN DE COMPRA REPRESENTA LA INTENCION DE ADQUIRIR UN BIEN Y/O SERVICIO, EL PROVEEDOR ESTA OBLIGADO A CARGAR SU FACTURA AL PORTAL DE PROVEEDORES DE CONSTRUPLAN HASTA MAXIMO 15 DIAS SIGUIENTES A LA FECHA DE FACTURACIÓN. LA ORDEN DE COMPRA O FACTURA POR SI SOLA NO REPRESENTA PARA CONSTRUPLAN UN COMPROMISO DE PAGO.");
                            }
                            else if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Colombia)
                            {
                                rd.SetParameterValue("rfc", "901.308.390-1");
                                rd.SetParameterValue("facturar", "CONSTRUPLAN COLOMBIA SA DE CV");
                                rd.SetParameterValue("textoPieInforme", @"ESTA ORDEN DE COMPRA REPRESENTA LA INTENCION DE ADQUIRIR UN BIEN Y/O SERVICIO, EL PROVEEDOR ESTA OBLIGADO A CARGAR SU FACTURA AL PORTAL DE PROVEEDORES DE CONSTRUPLAN HASTA MAXIMO 15 DIAS SIGUIENTES A LA FECHA DE FACTURACIÓN. LA ORDEN DE COMPRA O FACTURA POR SI SOLA NO REPRESENTA PARA CONSTRUPLAN UN COMPROMISO DE PAGO.");
                            }
                            else
                            {
                                //Valores default para el resto de empresas hasta que se especifique.
                                rd.SetParameterValue("rfc", " ");
                                rd.SetParameterValue("facturar", "SOL- INDUSTRIALES SA DE CV");
                                rd.SetParameterValue("textoPieInforme", @"ESTA ORDEN DE COMPRA REPRESENTA LA INTENCION DE ADQUIRIR UN BIEN Y/O SERVICIO, EL PROVEEDOR ESTA OBLIGADO A CARGAR SU FACTURA AL PORTAL . LA ORDEN DE COMPRA O FACTURA POR SI SOLA NO REPRESENTA PARA CONSTRUPLAN UN COMPROMISO DE PAGO.");
                            }

                            rd.SetParameterValue("fechaVencimiento", ordenCompra.fechaVencimientoString);

                            Session.Add("reporte", rd);
                        }
                        catch (Exception)
                        {

                        }
                        break;
                    }
                case ReportesEnum.ordenCompraInterna:
                    {
                        try
                        {
                            setMedidasReporte("HC");
                            rd = new rptOrdenCompraEK();

                            string cc = Request.QueryString["cc"];
                            int numero = int.Parse(Request.QueryString["numero"]);

                            var ordenCompra = ordenCompraFactoryServices.getOcService().getOrdenCompraInternaRpt(cc, numero);

                            List<rptOrdenCompraInfoDTO> listOrdenCompraInfo = new List<rptOrdenCompraInfoDTO>();

                            listOrdenCompraInfo.Add(ordenCompra);

                            rd.Database.Tables[0].SetDataSource(getInfoEnca("Orden de Compra", ""));
                            rd.Database.Tables[1].SetDataSource(listOrdenCompraInfo);
                            rd.Database.Tables[2].SetDataSource(ordenCompra.pago);
                            rd.Database.Tables[3].SetDataSource(ordenCompra.partidas);

                            rd.SetParameterValue("cfdi", ordenCompra.CFDI);

                            rd.SetParameterValue("version", "COMPRA INTERNA");

                            if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan)
                            {
                                rd.SetParameterValue("rfc", "SGI160111MQ9");
                                rd.SetParameterValue("facturar", "SOL- INDUSTRIALES SA DE CV");
                                rd.SetParameterValue("textoPieInforme", @"ESTA ORDEN DE COMPRA REPRESENTA LA INTENCION DE ADQUIRIR UN BIEN Y/O SERVICIO, EL PROVEEDOR ESTA OBLIGADO A CARGAR SU FACTURA AL PORTAL DE PROVEEDORES DE CONSTRUPLAN HASTA MAXIMO 15 DIAS SIGUIENTES A LA FECHA DE FACTURACIÓN. LA ORDEN DE COMPRA O FACTURA POR SI SOLA NO REPRESENTA PARA CONSTRUPLAN UN COMPROMISO DE PAGO.");
                            }
                            else if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                            {
                                rd.SetParameterValue("rfc", "ACO171207CZ7");
                                rd.SetParameterValue("facturar", "ARRENDADORA CONSTRUPLAN SA DE CV");
                                rd.SetParameterValue("textoPieInforme", @"ESTA ORDEN DE COMPRA REPRESENTA LA INTENCION DE ADQUIRIR UN BIEN Y/O SERVICIO, EL PROVEEDOR ESTA OBLIGADO A CARGAR SU FACTURA AL PORTAL DE PROVEEDORES DE ARRENDADORA CONSTRUPLAN HASTA MAXIMO 15 DIAS SIGUIENTES A LA FECHA DE FACTURACIÓN. LA ORDEN DE COMPRA O FACTURA POR SI SOLA NO REPRESENTA PARA ARRENDADORA CONSTRUPLAN UN COMPROMISO DE PAGO.");
                            }
                            else if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.EICI)
                            {
                                rd.SetParameterValue("rfc", "CIE1809208AC");
                                rd.SetParameterValue("facturar", "CONSTRUPLAN E ICI ENERGIA S.A.P.I. DE C.V.");
                                rd.SetParameterValue("textoPieInforme", @"ESTA ORDEN DE COMPRA REPRESENTA LA INTENCION DE ADQUIRIR UN BIEN Y/O SERVICIO, EL PROVEEDOR ESTA OBLIGADO A CARGAR SU FACTURA AL PORTAL DE PROVEEDORES DE CONSTRUPLAN HASTA MAXIMO 15 DIAS SIGUIENTES A LA FECHA DE FACTURACIÓN. LA ORDEN DE COMPRA O FACTURA POR SI SOLA NO REPRESENTA PARA CONSTRUPLAN UN COMPROMISO DE PAGO.");
                            }
                            else if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Colombia)
                            {
                                rd.SetParameterValue("rfc", "901.308.390-1");
                                rd.SetParameterValue("facturar", "CONSTRUPLAN COLOMBIA SA DE CV");
                                rd.SetParameterValue("textoPieInforme", @"ESTA ORDEN DE COMPRA REPRESENTA LA INTENCION DE ADQUIRIR UN BIEN Y/O SERVICIO, EL PROVEEDOR ESTA OBLIGADO A CARGAR SU FACTURA AL PORTAL DE PROVEEDORES DE CONSTRUPLAN HASTA MAXIMO 15 DIAS SIGUIENTES A LA FECHA DE FACTURACIÓN. LA ORDEN DE COMPRA O FACTURA POR SI SOLA NO REPRESENTA PARA CONSTRUPLAN UN COMPROMISO DE PAGO.");
                            }
                            else
                            {
                                //Valores default para el resto de empresas hasta que se especifique.
                                rd.SetParameterValue("rfc", "SGI160111MQ9");
                                rd.SetParameterValue("facturar", "SOL- INDUSTRIALES SA DE CV");
                                rd.SetParameterValue("textoPieInforme", @"ESTA ORDEN DE COMPRA REPRESENTA LA INTENCION DE ADQUIRIR UN BIEN Y/O SERVICIO, EL PROVEEDOR ESTA OBLIGADO A CARGAR SU FACTURA AL PORTAL DE PROVEEDORES DE CONSTRUPLAN HASTA MAXIMO 15 DIAS SIGUIENTES A LA FECHA DE FACTURACIÓN. LA ORDEN DE COMPRA O FACTURA POR SI SOLA NO REPRESENTA PARA CONSTRUPLAN UN COMPROMISO DE PAGO.");
                            }

                            rd.SetParameterValue("fechaVencimiento", ordenCompra.fechaVencimientoString);

                            Session.Add("reporte", rd);
                        }
                        catch (Exception)
                        {

                        }
                        break;
                    }
                case ReportesEnum.reporteDashboardEvaluacionDesempeno:
                    {
                        try
                        {
                            setMedidasReporte("HC");
                            rd = new rptDashboardEvaluacionResumen();

                            var listaDashboard = (List<Core.DTO.Administracion.Seguridad.Evaluacion.EmpleadoDTO>)Session["dashboardEvaluacionDesempeño"];
                            var actividadesActuales = (List<tblSED_Actividad>)Session["dataActividadesActuales"];
                            var centroCostoDesc = (string)Session["centroCostoDesc"];
                            List<DashboardReporteResumenDTO> tabla = new List<DashboardReporteResumenDTO>();

                            foreach (var emp in listaDashboard)
                            {
                                tabla.Add(new DashboardReporteResumenDTO
                                {
                                    categoria = emp.categoria.ToString(),
                                    empresa = emp.empresa,
                                    empleado = string.Format(@"{0} {1} {2}", emp.nombre, emp.apellidoPaterno, emp.apellidoMaterno),
                                    cumplido1 = emp.actividades.Where(x => x.id == 15).Select(x => x.porcentajeCumplido).FirstOrDefault(),
                                    cumplido2 = emp.actividades.Where(x => x.id == 16).Select(x => x.porcentajeCumplido).FirstOrDefault(),
                                    cumplido3 = emp.actividades.Where(x => x.id == 17).Select(x => x.porcentajeCumplido).FirstOrDefault(),
                                    cumplido4 = emp.actividades.Where(x => x.id == 18).Select(x => x.porcentajeCumplido).FirstOrDefault(),
                                    cumplido5 = emp.actividades.Where(x => x.id == 19).Select(x => x.porcentajeCumplido).FirstOrDefault(),
                                    cumplido6 = emp.actividades.Where(x => x.id == 20).Select(x => x.porcentajeCumplido).FirstOrDefault(),
                                    cumplido7 = emp.actividades.Where(x => x.id == 21).Select(x => x.porcentajeCumplido).FirstOrDefault(),
                                    cumplido8 = emp.actividades.Where(x => x.id == 22).Select(x => x.porcentajeCumplido).FirstOrDefault(),
                                    cumplimientoMensual = emp.porcentajeCumplimientoMensual
                                });
                            }

                            rd.Database.Tables[0].SetDataSource(getInfoEnca("Evaluación Desempeño", centroCostoDesc));
                            rd.Database.Tables[1].SetDataSource(tabla);

                            rd.SetParameterValue("promedioActividad1", tabla.Count() > 0 ? tabla.Average(x => x.cumplido1) : 0);
                            rd.SetParameterValue("promedioActividad2", tabla.Count() > 0 ? tabla.Average(x => x.cumplido2) : 0);
                            rd.SetParameterValue("promedioActividad3", tabla.Count() > 0 ? tabla.Average(x => x.cumplido3) : 0);
                            rd.SetParameterValue("promedioActividad4", tabla.Count() > 0 ? tabla.Average(x => x.cumplido4) : 0);
                            rd.SetParameterValue("promedioActividad5", tabla.Count() > 0 ? tabla.Average(x => x.cumplido5) : 0);
                            rd.SetParameterValue("promedioActividad6", tabla.Count() > 0 ? tabla.Average(x => x.cumplido6) : 0);
                            rd.SetParameterValue("promedioActividad7", tabla.Count() > 0 ? tabla.Average(x => x.cumplido7) : 0);
                            rd.SetParameterValue("promedioActividad8", tabla.Count() > 0 ? tabla.Average(x => x.cumplido8) : 0);
                            rd.SetParameterValue("promedioGeneral", tabla.Count() > 0 ? tabla.Average(x => x.cumplimientoMensual) : 0);

                            Session.Add("reporte", rd);
                        }
                        catch (Exception)
                        {

                        }
                        break;
                    }
                case ReportesEnum.reporteDashboardEvaluacionDinamico:
                    {
                        try
                        {
                            setMedidasReporte("HC");
                            rd = new rptDashboardEvaluacionDinamico2();

                            var listaDashboard = (List<Core.DTO.Administracion.Seguridad.Evaluacion.EmpleadoDTO>)Session["dashboardEvaluacionDesempeño"];
                            var actividadesActuales = (List<tblSED_Actividad>)Session["dataActividadesActuales"];
                            var centroCostoDesc = (string)Session["centroCostoDesc"];
                            List<DashboardReporteResumenDTO> tabla = new List<DashboardReporteResumenDTO>();
                            List<dynamic> encabezados = new List<dynamic>();

                            encabezados.Add(new
                            {
                                categoria = "",
                                empresa = "",
                                empleado = "",
                                actividad1 = actividadesActuales.ElementAtOrDefault(0) != null ? actividadesActuales[0].descripcion : "",
                                actividad2 = actividadesActuales.ElementAtOrDefault(1) != null ? actividadesActuales[1].descripcion : "",
                                actividad3 = actividadesActuales.ElementAtOrDefault(2) != null ? actividadesActuales[2].descripcion : "",
                                actividad4 = actividadesActuales.ElementAtOrDefault(3) != null ? actividadesActuales[3].descripcion : "",
                                actividad5 = actividadesActuales.ElementAtOrDefault(4) != null ? actividadesActuales[4].descripcion : "",
                                actividad6 = actividadesActuales.ElementAtOrDefault(5) != null ? actividadesActuales[5].descripcion : "",
                                actividad7 = actividadesActuales.ElementAtOrDefault(6) != null ? actividadesActuales[6].descripcion : "",
                                actividad8 = actividadesActuales.ElementAtOrDefault(7) != null ? actividadesActuales[7].descripcion : "",
                                actividad9 = actividadesActuales.ElementAtOrDefault(8) != null ? actividadesActuales[8].descripcion : "",
                                actividad10 = actividadesActuales.ElementAtOrDefault(9) != null ? actividadesActuales[9].descripcion : "",
                                actividad11 = actividadesActuales.ElementAtOrDefault(10) != null ? actividadesActuales[10].descripcion : "",
                                actividad12 = actividadesActuales.ElementAtOrDefault(11) != null ? actividadesActuales[11].descripcion : "",
                                actividad13 = actividadesActuales.ElementAtOrDefault(12) != null ? actividadesActuales[12].descripcion : "",
                                actividad14 = actividadesActuales.ElementAtOrDefault(13) != null ? actividadesActuales[13].descripcion : "",
                                actividad15 = actividadesActuales.ElementAtOrDefault(14) != null ? actividadesActuales[14].descripcion : "",
                                cumplimientoMensual = "Cumplimiento Mensual"
                            });

                            foreach (var emp in listaDashboard)
                            {
                                Tuple<decimal, string> formatoActividad1 = formatoValorCeldaDashboardEvaluacion(actividadesActuales, 0, emp);
                                decimal cumplido1 = formatoActividad1.Item1;
                                string cumplido1Valor = formatoActividad1.Item2;

                                Tuple<decimal, string> formatoActividad2 = formatoValorCeldaDashboardEvaluacion(actividadesActuales, 1, emp);
                                decimal cumplido2 = formatoActividad2.Item1;
                                string cumplido2Valor = formatoActividad2.Item2;

                                Tuple<decimal, string> formatoActividad3 = formatoValorCeldaDashboardEvaluacion(actividadesActuales, 2, emp);
                                decimal cumplido3 = formatoActividad3.Item1;
                                string cumplido3Valor = formatoActividad3.Item2;

                                Tuple<decimal, string> formatoActividad4 = formatoValorCeldaDashboardEvaluacion(actividadesActuales, 3, emp);
                                decimal cumplido4 = formatoActividad4.Item1;
                                string cumplido4Valor = formatoActividad4.Item2;

                                Tuple<decimal, string> formatoActividad5 = formatoValorCeldaDashboardEvaluacion(actividadesActuales, 4, emp);
                                decimal cumplido5 = formatoActividad5.Item1;
                                string cumplido5Valor = formatoActividad5.Item2;

                                Tuple<decimal, string> formatoActividad6 = formatoValorCeldaDashboardEvaluacion(actividadesActuales, 5, emp);
                                decimal cumplido6 = formatoActividad6.Item1;
                                string cumplido6Valor = formatoActividad6.Item2;

                                Tuple<decimal, string> formatoActividad7 = formatoValorCeldaDashboardEvaluacion(actividadesActuales, 6, emp);
                                decimal cumplido7 = formatoActividad7.Item1;
                                string cumplido7Valor = formatoActividad7.Item2;

                                Tuple<decimal, string> formatoActividad8 = formatoValorCeldaDashboardEvaluacion(actividadesActuales, 7, emp);
                                decimal cumplido8 = formatoActividad8.Item1;
                                string cumplido8Valor = formatoActividad8.Item2;

                                Tuple<decimal, string> formatoActividad9 = formatoValorCeldaDashboardEvaluacion(actividadesActuales, 8, emp);
                                decimal cumplido9 = formatoActividad9.Item1;
                                string cumplido9Valor = formatoActividad9.Item2;

                                Tuple<decimal, string> formatoActividad10 = formatoValorCeldaDashboardEvaluacion(actividadesActuales, 9, emp);
                                decimal cumplido10 = formatoActividad10.Item1;
                                string cumplido10Valor = formatoActividad10.Item2;

                                Tuple<decimal, string> formatoActividad11 = formatoValorCeldaDashboardEvaluacion(actividadesActuales, 10, emp);
                                decimal cumplido11 = formatoActividad11.Item1;
                                string cumplido11Valor = formatoActividad11.Item2;

                                Tuple<decimal, string> formatoActividad12 = formatoValorCeldaDashboardEvaluacion(actividadesActuales, 11, emp);
                                decimal cumplido12 = formatoActividad12.Item1;
                                string cumplido12Valor = formatoActividad12.Item2;
                                
                                tabla.Add(new DashboardReporteResumenDTO
                                {
                                    categoria = emp.categoria.ToString(),
                                    empresa = emp.empresa,
                                    empleado = string.Format(@"{0} {1} {2}", emp.nombre, emp.apellidoPaterno, emp.apellidoMaterno),

                                    cumplido1 = cumplido1,
                                    cumplido2 = cumplido2,
                                    cumplido3 = cumplido3,
                                    cumplido4 = cumplido4,
                                    cumplido5 = cumplido5,
                                    cumplido6 = cumplido6,
                                    cumplido7 = cumplido7,
                                    cumplido8 = cumplido8,
                                    cumplido9 = cumplido9,
                                    cumplido10 = cumplido10,
                                    cumplido11 = cumplido11,
                                    cumplido12 = cumplido12,

                                    cumplido1Valor = cumplido1Valor,
                                    cumplido2Valor = cumplido2Valor,
                                    cumplido3Valor = cumplido3Valor,
                                    cumplido4Valor = cumplido4Valor,
                                    cumplido5Valor = cumplido5Valor,
                                    cumplido6Valor = cumplido6Valor,
                                    cumplido7Valor = cumplido7Valor,
                                    cumplido8Valor = cumplido8Valor,
                                    cumplido9Valor = cumplido9Valor,
                                    cumplido10Valor = cumplido10Valor,
                                    cumplido11Valor = cumplido11Valor,
                                    cumplido12Valor = cumplido12Valor,

                                    cumplimientoMensual = emp.porcentajeCumplimientoMensual,
                                    cumplimientoMensualValor = emp.porcentajeCumplimientoMensual.ToString("0.00") + "%"
                                });
                            }

                            rd.Database.Tables[0].SetDataSource(getInfoEnca("Evaluación Desempeño", centroCostoDesc));
                            rd.Database.Tables[1].SetDataSource(tabla);
                            rd.Database.Tables[2].SetDataSource(encabezados);

                            var promedioActividad1 = tabla.Where(x => x.cumplido1 >= 0).ToList().Count() > 0 ? tabla.Where(x => x.cumplido1 >= 0).ToList().Average(x => x.cumplido1) : -1;
                            var promedioActividad2 = tabla.Where(x => x.cumplido2 >= 0).ToList().Count() > 0 ? tabla.Where(x => x.cumplido2 >= 0).ToList().Average(x => x.cumplido2) : -1;
                            var promedioActividad3 = tabla.Where(x => x.cumplido3 >= 0).ToList().Count() > 0 ? tabla.Where(x => x.cumplido3 >= 0).ToList().Average(x => x.cumplido3) : -1;
                            var promedioActividad4 = tabla.Where(x => x.cumplido4 >= 0).ToList().Count() > 0 ? tabla.Where(x => x.cumplido4 >= 0).ToList().Average(x => x.cumplido4) : -1;
                            var promedioActividad5 = tabla.Where(x => x.cumplido5 >= 0).ToList().Count() > 0 ? tabla.Where(x => x.cumplido5 >= 0).ToList().Average(x => x.cumplido5) : -1;
                            var promedioActividad6 = tabla.Where(x => x.cumplido6 >= 0).ToList().Count() > 0 ? tabla.Where(x => x.cumplido6 >= 0).ToList().Average(x => x.cumplido6) : -1;
                            var promedioActividad7 = tabla.Where(x => x.cumplido7 >= 0).ToList().Count() > 0 ? tabla.Where(x => x.cumplido7 >= 0).ToList().Average(x => x.cumplido7) : -1;
                            var promedioActividad8 = tabla.Where(x => x.cumplido8 >= 0).ToList().Count() > 0 ? tabla.Where(x => x.cumplido8 >= 0).ToList().Average(x => x.cumplido8) : -1;
                            var promedioActividad9 = tabla.Where(x => x.cumplido9 >= 0).ToList().Count() > 0 ? tabla.Where(x => x.cumplido9 >= 0).ToList().Average(x => x.cumplido9) : -1;
                            var promedioActividad10 = tabla.Where(x => x.cumplido10 >= 0).ToList().Count() > 0 ? tabla.Where(x => x.cumplido10 >= 0).ToList().Average(x => x.cumplido10) : -1;
                            var promedioActividad11 = tabla.Where(x => x.cumplido11 >= 0).ToList().Count() > 0 ? tabla.Where(x => x.cumplido11 >= 0).ToList().Average(x => x.cumplido11) : -1;
                            var promedioActividad12 = tabla.Where(x => x.cumplido12 >= 0).ToList().Count() > 0 ? tabla.Where(x => x.cumplido12 >= 0).ToList().Average(x => x.cumplido12) : -1;

                            rd.SetParameterValue("promedioActividad1", promedioActividad1);
                            rd.SetParameterValue("promedioActividad2", promedioActividad2);
                            rd.SetParameterValue("promedioActividad3", promedioActividad3);
                            rd.SetParameterValue("promedioActividad4", promedioActividad4);
                            rd.SetParameterValue("promedioActividad5", promedioActividad5);
                            rd.SetParameterValue("promedioActividad6", promedioActividad6);
                            rd.SetParameterValue("promedioActividad7", promedioActividad7);
                            rd.SetParameterValue("promedioActividad8", promedioActividad8);
                            rd.SetParameterValue("promedioActividad9", promedioActividad9);
                            rd.SetParameterValue("promedioActividad10", promedioActividad10);
                            rd.SetParameterValue("promedioActividad11", promedioActividad11);
                            rd.SetParameterValue("promedioActividad12", promedioActividad12);
                            rd.SetParameterValue("promedioGeneral", tabla.Average(x => x.cumplimientoMensual));

                            Session.Add("reporte", rd);
                        }
                        catch (Exception)
                        {

                        }
                        break;
                    }
                case ReportesEnum.borrador:
                    {
                        try
                        {
                            setMedidasReporte("HC");
                            rd = new rptBorrador();

                            var borradorDetalle = (List<UbicacionDetalleDTO>)Session["borradorDetalle"];

                            var tablaDet = borradorDetalle.Select(x => new
                            {
                                ccDescripcion = x.ccDescripcion,
                                numero = x.numero.ToString(),
                                fecha = x.fecha.ToShortDateString(),
                                almacenLAB = x.almacenLAB,
                                insumoDesc = x.insumoDesc,
                                cantidad = x.cantidad.ToString(),
                                area_alm = x.area_alm,
                                lado_alm = x.lado_alm,
                                estante_alm = x.estante_alm,
                                nivel_alm = x.nivel_alm
                            }).ToList();

                            rd.Database.Tables[0].SetDataSource(getInfoEnca("Borrador", ""));
                            rd.Database.Tables[1].SetDataSource(tablaDet);

                            rd.SetParameterValue("fecha", DateTime.Now.Date.ToShortDateString());
                            rd.SetParameterValue("ccAreaCuenta", vSesiones.sesionEmpresaActual == 1 ? "C.C." : "Área Cuenta");

                            Session.Add("reporte", rd);
                        }
                        catch (Exception)
                        {

                        }
                        break;
                    }
                case ReportesEnum.reporteSurtidoRequisicion:
                    {
                        try
                        {
                            setMedidasReporte("HC");
                            rd = new rptSurtidoRequisicion();

                            var surtido = (List<SurtidoRequisicionDTO>)Session["surtidoRequisicion"];

                            rd.Database.Tables[0].SetDataSource(getInfoEnca("Surtido Requisición", ""));
                            rd.Database.Tables[1].SetDataSource(surtido);

                            rd.SetParameterValue("centroCosto", surtido[0].centroCosto);
                            rd.SetParameterValue("numero", surtido[0].numero);

                            Session.Add("reporte", rd);
                        }
                        catch (Exception)
                        {

                        }
                        break;
                    }
                case ReportesEnum.REPORTE_EJECUTIVO:
                    {
                        setMedidasReporte("HO");
                        rd = new rptReporteEjecutivo();

                        #region CONSULTAS
                        MainContextEnum idEmpresa = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora;

                        #region SE OBTIENE CAP. PLANEACIÓN OVERHAUL
                        List<tblM_CapPlaneacionOverhaul> _lstCapPlaneacionOverhaulDapperDTO = tallerOverhaulFactoryServices.getTallerOverhaulFactoryServices()._lstCapPlaneacionOverhaulDapperDTO(idEmpresa);
                        #endregion

                        #region SE OBTIENE LISTADO DE MAQUINAS
                        List<tblM_CatMaquina> _lstCatMaquinasDapperDTO = maquinaFactoryServices.getMaquinaServices()._lstCatMaquinasDapperDTO(idEmpresa);
                        #endregion

                        #region SE OBTIENE LISTADO COMENTARIOS ACTIVIDAD OVERHAUL
                        List<tblM_ComentarioActividadOverhaul> _lstComentarioActividadOverhaulDapperDTO = tallerOverhaulFactoryServices.getTallerOverhaulFactoryServices()._lstComentarioActividadOverhaulDapperDTO(idEmpresa);
                        #endregion

                        #region SE OBTIENE LISTADO ACTIVIDAD OVERHAUL
                        List<tblM_CatActividadOverhaul> _lstCatActividadOverhaulDapperDTO = tallerOverhaulFactoryServices.getTallerOverhaulFactoryServices()._lstCatActividadOverhaulDapperDTO(idEmpresa);
                        #endregion

                        #endregion

                        var idEventoOverhaulRE = Request.QueryString["index"].Trim() == "" ? "" : Request.QueryString["index"];
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Reporte Ejecutivo", "DIRECCION DE MAQUINARIA Y EQUIPO ADMINISTRACION DE OVERHAUL"));
                        var eventoOverhaulRE = tallerOverhaulFactoryServices.getTallerOverhaulFactoryServices().getEventoOHByID(Int32.Parse(idEventoOverhaulRE), _lstCapPlaneacionOverhaulDapperDTO);
                        var maquinaEventoOverhaulRE = maquinaFactoryServices.getMaquinaServices().GetMaquina(eventoOverhaulRE.maquinaID, _lstCatMaquinasDapperDTO);
                        var diasTotalesOverhaulRE = ((eventoOverhaulRE.fechaFin ?? default(DateTime)) - (eventoOverhaulRE.fechaInicio ?? default(DateTime))).TotalDays + 1;
                        var portadaReporteEjecutivo = tallerOverhaulFactoryServices.getTallerOverhaulFactoryServices().CargarArchivosActividad(eventoOverhaulRE.id, -1, 4, -1, _lstComentarioActividadOverhaulDapperDTO).Select(x => x.comentario).ToList();
                        var comentarioPortadaRE = tallerOverhaulFactoryServices.getTallerOverhaulFactoryServices().CargarArchivosActividad(eventoOverhaulRE.id, -1, 5, -1, _lstComentarioActividadOverhaulDapperDTO).Select(x => x.comentario).FirstOrDefault();
                        if (comentarioPortadaRE == null) { comentarioPortadaRE = ""; }
                        byte[] imagenPortadaRE;
                        if (portadaReporteEjecutivo.Count > 0)
                        {
#if DEBUG
                            string archivo = portadaReporteEjecutivo[0];
                            string nombreArchivo = string.Empty;
                            string[] splitArchivo = archivo.Split('\\');
                            foreach (var item in splitArchivo)
                            {
                                nombreArchivo = item;
                            }
                            string ruta = @"C:\MAQUINARIA\OVERHAUL\" + nombreArchivo;
                            imagenPortadaRE = GlobalUtils.FixedSize(File.ReadAllBytes(ruta), 100, 100);
#else
                            imagenPortadaRE = GlobalUtils.FixedSize(File.ReadAllBytes(portadaReporteEjecutivo.FirstOrDefault()), 672, 785);
#endif
                        }
                        else
                        {
                            string startupPath = AppDomain.CurrentDomain.BaseDirectory;
                            string targetPath = startupPath + "Content\\img\\nodisponible.png";
                            System.Drawing.Image newImage = System.Drawing.Image.FromFile(targetPath);
                            MemoryStream stream = new MemoryStream();
                            newImage.Save(stream, newImage.RawFormat);
                            byte[] data = stream.ToArray();
                            imagenPortadaRE = data;
                        }
                        int j = 0;
                        var actividadesDGRE = JsonConvert.DeserializeObject<List<ActividadOverhaulDTO>>(eventoOverhaulRE.actividades).OrderBy(x => x.fechaInicio).GroupBy(x => x.idAct).Select(x =>
                        {
                            var catActividad = tallerOverhaulFactoryServices.getTallerOverhaulFactoryServices().CargarActividad(x.Key, _lstCatActividadOverhaulDapperDTO);
                            if (catActividad != null && catActividad.reporteEjecutivo)
                            {
                                if (x.FirstOrDefault().fechaInicio != null) j++;
                                return new
                                {
                                    id = x.Key,
                                    num = j,
                                    descripcion = tallerOverhaulFactoryServices.getTallerOverhaulFactoryServices().getDescripcionActividadOverhaul(x.Key, _lstCatActividadOverhaulDapperDTO).ToUpper(),
                                    comentario = tallerOverhaulFactoryServices.getTallerOverhaulFactoryServices().CargarStringComentarioActividad(x.Key, eventoOverhaulRE.id, 0, x.FirstOrDefault().fechaInicio ?? default(DateTime), x.FirstOrDefault().numDia, _lstComentarioActividadOverhaulDapperDTO).Trim().ToUpper(),
                                    duracion = x.Sum(y => y.horasDuracion),
                                    fechaInicio = (x.FirstOrDefault().fechaInicio ?? default(DateTime)).ToString("D", CultureInfo.CreateSpecificCulture("es-ES")),
                                    comentarioRE = tallerOverhaulFactoryServices.getTallerOverhaulFactoryServices().CargarStringComentarioActividad(x.Key, eventoOverhaulRE.id, 1, x.FirstOrDefault().fechaInicio ?? default(DateTime), x.FirstOrDefault().numDia, _lstComentarioActividadOverhaulDapperDTO).Trim(),
                                    archivos = tallerOverhaulFactoryServices.getTallerOverhaulFactoryServices().CargarArchivosActividad(eventoOverhaulRE.id, x.FirstOrDefault().id, 0, x.FirstOrDefault().numDia, _lstComentarioActividadOverhaulDapperDTO),
                                    fechaRaw = x.FirstOrDefault().fechaInicio ?? default(DateTime),
                                    fechaFin = (x.LastOrDefault().fechaFin ?? default(DateTime)).ToString("D", CultureInfo.CreateSpecificCulture("es-ES")),
                                    idNumDia = x.Key.ToString() + "-" + x.FirstOrDefault().numDia.ToString()
                                };
                            }
                            else return null;
                        }).Where(x => x != null && x.fechaRaw != default(DateTime)).OrderBy(x => x.num).ToList();

                        var archivosActividadRE2 = tallerOverhaulFactoryServices.getTallerOverhaulFactoryServices().CargarArchivosActividad(eventoOverhaulRE.id, -1, 2, -1, _lstComentarioActividadOverhaulDapperDTO);
                        var archivosActividadRE6 = tallerOverhaulFactoryServices.getTallerOverhaulFactoryServices().CargarArchivosActividad(eventoOverhaulRE.id, -1, 6, -1, _lstComentarioActividadOverhaulDapperDTO);

#if DEBUG
                        string stop = string.Empty;
                        foreach (var item in archivosActividadRE2)
                        {
                            string archivo = item.comentario;
                            string nombreArchivo = string.Empty;
                            string[] splitArchivo = archivo.Split('\\');
                            foreach (var item2 in splitArchivo)
                            {
                                string ruta2 = @"C:\MAQUINARIA\OVERHAUL\" + item2;
                                item.comentario = ruta2;
                            }
                        }
                        var archivosRE = archivosActividadRE2.Select(x => new
                        {
                            id = x.id,
                            imagen = GlobalUtils.FixedSize(File.ReadAllBytes(x.comentario), 100, 100),
                            actividadID = x.actividadID.ToString() + "-" + x.numDia.ToString()
                        }).ToList();
#else
                        var archivosRE = archivosActividadRE2.Select(x => new
                        {
                            id = x.id,
                            imagen = GlobalUtils.FixedSize(File.ReadAllBytes(x.comentario), 200, 200),
                            actividadID = x.actividadID.ToString() + "-" + x.numDia.ToString()
                        }).ToList();
#endif

                        if (archivosRE.Count() == 0)
                        {
                            string startupPath = AppDomain.CurrentDomain.BaseDirectory;
                            string targetPath = startupPath + "Content\\img\\nodisponible.png";
                            System.Drawing.Image newImage = System.Drawing.Image.FromFile(targetPath);
                            MemoryStream stream = new MemoryStream();
                            newImage.Save(stream, newImage.RawFormat);
                            byte[] data = stream.ToArray();
                            var auxArchivosRE = new { id = 0, imagen = GlobalUtils.FixedSize(data, 200, 200), actividadID = actividadesDGRE.FirstOrDefault().idNumDia };
                            archivosRE.Add(auxArchivosRE);
                        }

#if DEBUG
                        string stop2 = string.Empty;
                        foreach (var item in archivosActividadRE6)
                        {
                            string archivo = item.comentario;
                            string nombreArchivo = string.Empty;
                            string[] splitArchivo = archivo.Split('\\');
                            foreach (var item2 in splitArchivo)
                            {
                                string ruta2 = @"C:\MAQUINARIA\OVERHAUL\" + item2;
                                item.comentario = ruta2;
                            }
                        }
                        var archivosRE6 = archivosActividadRE6.Select(x => new
                        {
                            imagenEvidencia = GlobalUtils.FixedSize(File.ReadAllBytes(x.comentario), 100, 100)
                        }).ToList();
#else
                        var archivosRE6 = archivosActividadRE6.Select(x => new
                        {
                            imagenEvidencia = GlobalUtils.FixedSize(File.ReadAllBytes(x.comentario), 200, 200)
                        }).ToList();
#endif

                        var portadaRE = (new { imagen = imagenPortadaRE, comentario = comentarioPortadaRE });

                        rd.Database.Tables[1].SetDataSource(actividadesDGRE);
                        rd.Database.Tables[2].SetDataSource(archivosRE6);
                        rd.Database.Tables[3].SetDataSource(archivosRE);
                        rd.Database.Tables[4].SetDataSource(new[] { portadaRE });

                        rd.SetParameterValue("noEconomico", maquinaEventoOverhaulRE.noEconomico);
                        rd.SetParameterValue("fechaInicio", (eventoOverhaulRE.fechaInicio ?? default(DateTime)).ToString("Y", CultureInfo.CreateSpecificCulture("es-ES")));
                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.REPORTE_LISTADO_MAESTRO:
                    {
                        setMedidasReporte("HC");
                        rd = new rptListadoMaestro();
                        var lstMaestroComponentes = Session["rptLstMaestro"];
                        var lstMaestroDatos = (DatosLstMaestro)Session["rptLstMaestroDatos"];
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Listado Maestro", "DIRECCION DE MAQUINARIA Y EQUIPO ADMINISTRACION DE OVERHAUL"));
                        rd.Database.Tables[1].SetDataSource(lstMaestroComponentes);
                        rd.SetParameterValue("obraMaquina", lstMaestroDatos.obraMaquina);
                        rd.SetParameterValue("periodo", lstMaestroDatos.periodo);
                        rd.SetParameterValue("fecha", DateTime.Now);
                        rd.SetParameterValue("obra", lstMaestroDatos.obra);
                        rd.SetParameterValue("noEconomico", lstMaestroDatos.noEconomico);
                        rd.SetParameterValue("ritmo", lstMaestroDatos.ritmo);
                        rd.SetParameterValue("horasComponente", lstMaestroDatos.horasComponente);
                        rd.SetParameterValue("target", lstMaestroDatos.target);
                        rd.SetParameterValue("proximoPCR", lstMaestroDatos.proximoPCR);
                        rd.SetParameterValue("causa", lstMaestroDatos.cause);
                        rd.SetParameterValue("elaboro", lstMaestroDatos.elaboro);
                        rd.SetParameterValue("facilitador", lstMaestroDatos.facilitador);
                        rd.SetParameterValue("reviso", lstMaestroDatos.reviso);
                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.REPORTE_INVENTARIO_COMP:
                    {
                        setMedidasReporte("HC");
                        rd = new rptInventarioComponentes();
                        var inventarioComponentes = (List<rptInventarioComponenteDTO>)Session["rptInventarioComponente"];
                        var modeloInventarioComponente = (Request.QueryString["modelo"].Trim() == "" || Request.QueryString["modelo"].Trim() == "null") ? " " : Request.QueryString["modelo"];
                        var grupoInventarioComponente = (Request.QueryString["grupo"].Trim() == "" || Request.QueryString["grupo"].Trim() == "null") ? " " : Request.QueryString["grupo"];
                        var conjuntoInventarioComponente = (Request.QueryString["conjunto"].Trim() == "" || Request.QueryString["conjunto"].Trim() == "null") ? " " : Request.QueryString["conjunto"];
                        var subconjuntoInventarioComponente = (Request.QueryString["subconjunto"].Trim() == "" || Request.QueryString["subconjunto"].Trim() == "null") ? " " : Request.QueryString["subconjunto"];
                        List<rptInventarioDTO> reporteInventarioObjeto = new List<rptInventarioDTO>();
                        foreach (var item in inventarioComponentes)
                        {
                            rptInventarioDTO auxReporteInventario = new rptInventarioDTO();
                            auxReporteInventario.subconjunto = item.subconjunto;
                            auxReporteInventario.total = item.total;
                            foreach (var item2 in item.totalesLocaciones)
                            {
                                int suma = 0;
                                Int32.TryParse(item2.Text, out suma);
                                switch (item2.Prefijo)
                                {
                                    case "0": auxReporteInventario.almacenMLC = suma; break;
                                    case "1": auxReporteInventario.almacenMNB = suma; break;
                                    case "2": auxReporteInventario.almacenMSA = suma; break;
                                    case "3": auxReporteInventario.almacenMTAK = suma; break;
                                    case "5": auxReporteInventario.almacenTMC = suma; break;
                                    case "8": auxReporteInventario.komatsu = suma; break;
                                    case "9": auxReporteInventario.madisa = suma; break;
                                    case "10": auxReporteInventario.matco = suma; break;
                                    case "11": auxReporteInventario.piinsa = suma; break;
                                    case "12": auxReporteInventario.soluciones = suma; break;
                                    case "13": auxReporteInventario.tmcCRC = suma; break;
                                }
                            }
                            reporteInventarioObjeto.Add(auxReporteInventario);
                        }
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Reporte Inventario Componente", "DIRECCION DE MAQUINARIA Y EQUIPO ADMINISTRACION DE OVERHAUL"));
                        rd.Database.Tables[1].SetDataSource(reporteInventarioObjeto);
                        rd.SetParameterValue("modeloMaquina", modeloInventarioComponente);
                        rd.SetParameterValue("grupoMaquina", grupoInventarioComponente);
                        rd.SetParameterValue("conjunto", conjuntoInventarioComponente);
                        rd.SetParameterValue("subconjunto", subconjuntoInventarioComponente);

                        Session.Add("reporte", rd);

                        break;
                    }
                case ReportesEnum.REPORTE_VIDA_UTIL:
                    {
                        setMedidasReporte("HC");
                        rd = new rptVidaUtil();

                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.REPORTE_DISPONIBILIDAD_OVERHAUL:
                    {
                        setMedidasReporte("HC");
                        rd = new rptKPIOverhaul();
                        var overhauls = Session["rptDisponibilidadOverhaul"];
                        string obraRptDisponibilidad = Request.QueryString["obra"].Trim() == "" ? "" : Request.QueryString["obra"];
                        int anioRptDisponibilidad = DateTime.Now.Year;
                        Int32.TryParse(Request.QueryString["anio"].Trim(), out anioRptDisponibilidad);
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Reporte Disponibilidad Overhaul", "DIRECCION DE MAQUINARIA Y EQUIPO ADMINISTRACION DE OVERHAUL"));
                        rd.Database.Tables[1].SetDataSource(overhauls);
                        var auxObraRptDisponibilidad = obraRptDisponibilidad;
                        auxObraRptDisponibilidad = administracionComponentesFactoryServices.getAdministracionComponentesFactoryServices().getDescripcionCC(obraRptDisponibilidad);

                        rd.SetParameterValue("obra", auxObraRptDisponibilidad.ToUpper());
                        rd.SetParameterValue("anio", anioRptDisponibilidad);
                        Session.Add("reporte", rd);

                        break;
                    }
                case ReportesEnum.ReporteProgramaCambioComponente:
                    {
                        setMedidasReporte("HC");
                        rd = new rptProgramaCambioComp();
                        var overhauls = Session["rptProgramaCambioComp"];
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Programa de Cambio de Componentes", "DIRECCION DE MAQUINARIA Y EQUIPO ADMINISTRACION DE OVERHAUL"));
                        rd.Database.Tables[1].SetDataSource(overhauls);
                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.ReporteProgramaInversion:
                    {
                        setMedidasReporte("HC");
                        rd = new rptProgramaInversion();
                        DataTable dataTable1 = new DataTable();
                        dataTable1.Columns.Add("logoOverhaul", System.Type.GetType("System.Byte[]"));

                        string startupPath = AppDomain.CurrentDomain.BaseDirectory;
                        string targetPath = startupPath + "Content\\img\\logo\\logo-overhaul.jpg";
                        System.Drawing.Image newImage = System.Drawing.Image.FromFile(targetPath);
                        MemoryStream stream = new MemoryStream();
                        newImage.Save(stream, newImage.RawFormat);
                        byte[] dataLogo = stream.ToArray();
                        dataTable1.Rows.Add(dataLogo);

                        List<ReporteInversionOverhaulDTO> overhauls = (List<ReporteInversionOverhaulDTO>)Session["rptProgramaCambioComp"];
                        var pAutorizado = overhauls.Sum(s => s.presupuesto);
                        var pProgramado = overhauls.Where(x => x.paroTerminado && x.programado).Sum(s => s.presupuesto);
                        var eProgramado = overhauls.Where(x => x.paroTerminado && x.programado).Sum(s => s.erogado);
                        var eNoProgramado = overhauls.Where(x => x.paroTerminado && !x.programado).Sum(s => s.erogado);
                        var pTotal = pProgramado;
                        var eTotal = Convert.ToDecimal(eProgramado) + Convert.ToDecimal(eNoProgramado);
                        var bolsa = Convert.ToDecimal(pAutorizado) - Convert.ToDecimal(eTotal);

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Programa de Inversión Anual", "DIRECCION DE MAQUINARIA Y EQUIPO ADMINISTRACION DE OVERHAUL"));
                        rd.Database.Tables[1].SetDataSource(overhauls);
                        rd.Database.Tables[2].SetDataSource(dataTable1);

                        var firmaRealizo = GlobalUtils.CrearFirmaDigital(0000, Core.Enum.Principal.DocumentosEnum.ProgramaInversionAnual, 1230);
                        var firmaReviso = GlobalUtils.CrearFirmaDigital(0000, Core.Enum.Principal.DocumentosEnum.ProgramaInversionAnual, 6);

                        rd.SetParameterValue("pAutorizado", pAutorizado);
                        rd.SetParameterValue("pProgramado", pProgramado);
                        rd.SetParameterValue("eProgramado", eProgramado);
                        rd.SetParameterValue("eNoProgramado", eNoProgramado);
                        rd.SetParameterValue("pTotal", pTotal);
                        rd.SetParameterValue("eTotal", eTotal);
                        rd.SetParameterValue("bolsa", bolsa);
                        rd.SetParameterValue("firmaRealizo", firmaRealizo);
                        rd.SetParameterValue("firmaReviso", firmaReviso);
                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.REPORTE_CALENDARIO_EJECUTADO:
                    {
                        setMedidasReporte("HC");
                        rd = new rptCalendarioEjecutado();
                        var rptCalendarioEjecutado = (List<rptCalendarioEjecutadoDTO>)Session["rptCalenEjecOverhaul"];
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Reporte Calendario Ejecutado", "DIRECCION DE MAQUINARIA Y EQUIPO ADMINISTRACION DE OVERHAUL"));
                        rd.Database.Tables[1].SetDataSource(rptCalendarioEjecutado);
                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.rptAvanceGeneral:
                    {
                        setMedidasReporte("HC");
                        rd = new rptAvanceGeneral();
                        List<PresupuestoPorObraDTO> rptAvancePresupuesto = (List<PresupuestoPorObraDTO>)Session["reporteAvancePresupuesto"];
                        List<PresupuestoPorObraDTO> rptAvancePresupuestoGeneral = (List<PresupuestoPorObraDTO>)Session["reporteAvancePresupuestoGeneral"];
                        decimal totalPresupuestoPpal = 0;
                        decimal totalAvancePpal = 0;
                        decimal totalErogadoPpal = 0;
                        decimal totalBolsaPpal = 0;
                        decimal totalPresupuestoModelo = 0;
                        decimal totalErogadoModelo = 0;

                        foreach (var item in rptAvancePresupuesto)
                        {
                            totalPresupuestoModelo += item.costo;
                            totalErogadoModelo += item.presupuesto;
                        }

                        foreach (var item in rptAvancePresupuestoGeneral)
                        {
                            totalPresupuestoPpal += item.presupuesto;
                            totalAvancePpal += item.avance;
                            totalErogadoPpal += item.avanceErogado;
                            totalBolsaPpal += item.bolsaRestante;
                        }

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Reporte Avance General", "Dirección de Maquinaria y Equipo"));
                        rd.Database.Tables[1].SetDataSource(rptAvancePresupuesto);
                        rd.Database.Tables[2].SetDataSource(rptAvancePresupuestoGeneral);
                        rd.SetParameterValue("totalPresupuestoPpal", totalPresupuestoPpal);
                        rd.SetParameterValue("totalAvancePpal", totalAvancePpal);
                        rd.SetParameterValue("totalErogadoPpal", totalErogadoPpal);
                        rd.SetParameterValue("totalBolsaPpal", totalBolsaPpal);
                        rd.SetParameterValue("totalPresupuestoModelo", totalPresupuestoModelo);
                        rd.SetParameterValue("totalErogadoModelo", totalErogadoModelo);

                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.REPORTE_PRECISION_OVERHAUL:
                    {
                        setMedidasReporte("HC");
                        rd = new rptPrecisionOverhaul();
                        var rptPrecisionOverhaul = Session["rptPrecisionOverhaul"];
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Reporte Precision Overhaul", "DIRECCION DE MAQUINARIA Y EQUIPO ADMINISTRACION DE OVERHAUL"));
                        rd.Database.Tables[1].SetDataSource(rptPrecisionOverhaul);
                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.CONJUNTOS_OVERHAUL:
                    {
                        setMedidasReporte("HC");
                        rd = new rptConjuntosSubconjuntos();
                        var rptConjuntosOverhaul = Session["rptConjuntosOverhaul"];

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Reporte Conjuntos subconjuntos", "DIRECCION DE MAQUINARIA Y EQUIPO ADMINISTRACION DE OVERHAUL"));
                        rd.Database.Tables[1].SetDataSource(rptConjuntosOverhaul);
                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.VIDA_UTIL_OVERHAUL:
                    {
                        setMedidasReporte("HC");
                        rd = new rptVidaUtil();
                        var reporteVidaUtil = Session["rptVidaUtil"];

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Reporte Conjuntos subconjuntos", "DIRECCION DE MAQUINARIA Y EQUIPO ADMINISTRACION DE OVERHAUL"));
                        rd.Database.Tables[1].SetDataSource(reporteVidaUtil);
                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.DESECHO_OVERHAUL:
                    {
                        setMedidasReporte("HC");
                        rd = new rptDesechoComponente();
                        reporteDesechoDTO reporteDesecho = (reporteDesechoDTO)Session["reporteDesecho"];
                        DataTable evidenciaDesecho = new DataTable();
                        evidenciaDesecho.Columns.Add("foto", typeof(byte[]));
                        List<ModeloArchivoDTO> archivosEvidenciaDesecho = new List<ModeloArchivoDTO>();
                        if (reporteDesecho.evidencia != null) { archivosEvidenciaDesecho = JsonConvert.DeserializeObject<List<ModeloArchivoDTO>>(reporteDesecho.evidencia); }
                        foreach (var item in archivosEvidenciaDesecho)
                        {
                            byte[] archivo = File.ReadAllBytes(item.ruta);
                            evidenciaDesecho.Rows.Add(archivo);
                        }
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Reporte Desecho Componente", "DIRECCION DE MAQUINARIA Y EQUIPO ADMINISTRACION DE OVERHAUL"));
                        rd.Database.Tables[1].SetDataSource(evidenciaDesecho);
                        rd.SetParameterValue("noEconomico", reporteDesecho.noEconomico);
                        rd.SetParameterValue("modelo", reporteDesecho.modelo);
                        rd.SetParameterValue("horasMaquina", reporteDesecho.horasMaquina);
                        rd.SetParameterValue("serieMaquina", reporteDesecho.serieMaquina);
                        rd.SetParameterValue("subconjunto", reporteDesecho.subconjunto);
                        rd.SetParameterValue("numParte", reporteDesecho.numParte);
                        rd.SetParameterValue("serieComponente", reporteDesecho.serieComponente);
                        rd.SetParameterValue("horasComponente", reporteDesecho.horasComponente);
                        rd.SetParameterValue("horasAcumuladas", reporteDesecho.horasAcumuladas);
                        rd.SetParameterValue("rutaFotoSerie", reporteDesecho.rutaFotoSerie);
                        rd.SetParameterValue("motivo", reporteDesecho.motivo);
                        rd.SetParameterValue("nombreRealizo", reporteDesecho.realizo);
                        rd.SetParameterValue("nombreFirma", "ING. JOSÉ PEDRO LOPEZ PROVENCIO");
                        rd.SetParameterValue("realizo", GlobalUtils.CrearFirmaDigital(reporteDesecho.idReporte, Core.Enum.Principal.DocumentosEnum.Remocion_Overhual, reporteDesecho.realizoID));
                        rd.SetParameterValue("firma", GlobalUtils.CrearFirmaDigital(reporteDesecho.idReporte, Core.Enum.Principal.DocumentosEnum.Remocion_Overhual, 1230));
                        rd.SetParameterValue("fecha", reporteDesecho.fecha);
                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.REPORTEFALLA:
                    {
                        setMedidasReporte("HC");
                        var reporteFalla = (rptReporteFallaDTO)Session["rptReporteFalla"];
                        if (reporteFalla.fallaComponente == 1)
                        {
                            rd = new rptReporteFalla();
                        }
                        else
                        {
                            rd = new rptReporteFallaReparacion();
                        }
                        DataTable evidenciaReporteFalla = new DataTable();
                        evidenciaReporteFalla.Columns.Add("imagen", typeof(byte[]));
                        var archivosEvidenciaFalla = ReporteFallaFS.getReporteFallaOverhaulFactoryServices().getLstImagenes(reporteFalla.idReporte)
                            .Where(x => x.esActivo).Select(img => new ModeloArchivoDTO()
                            {
                                id = img.id,
                                FechaCreacion = img.fechaRegistro.ToShortDateString(),
                                nombre = img.nombre,
                                ruta = img.ruta
                            }).ToList();
                        foreach (var item in archivosEvidenciaFalla)
                        {
#if DEBUG
                            byte[] archivo = new byte[1];
#else
                            byte[] archivo = File.ReadAllBytes(item.ruta);
                            archivo = GlobalUtils.FixedSize(archivo, 672, 785);
                            
#endif
                            if (Path.GetExtension(item.ruta) != ".mp4")
                            {
                                evidenciaReporteFalla.Rows.Add(archivo);
                            }
                        }
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Reporte de falla", "DIRECCION DE MAQUINARIA Y EQUIPO ADMINISTRACION DE OVERHAUL"));
                        rd.Database.Tables[1].SetDataSource(evidenciaReporteFalla);
                        rd.SetParameterValue("obra", reporteFalla.obra);
                        rd.SetParameterValue("fecha", reporteFalla.fecha);
                        rd.SetParameterValue("frente", reporteFalla.frente);
                        rd.SetParameterValue("fechaParo", reporteFalla.fechaParo);
                        rd.SetParameterValue("noEconomico", reporteFalla.noEconomico);
                        rd.SetParameterValue("descripcionMaq", reporteFalla.descripcionMaq);
                        rd.SetParameterValue("marcaMaq", reporteFalla.marcaMaq);
                        rd.SetParameterValue("modeloMaq", reporteFalla.modeloMaq);
                        rd.SetParameterValue("noSerieMaq", reporteFalla.noSerieMaq);
                        rd.SetParameterValue("horometroMaq", reporteFalla.horometroMaq);
                        rd.SetParameterValue("descripcionFalla", reporteFalla.descripcionFalla);
                        rd.SetParameterValue("realiza", reporteFalla.realiza);
                        rd.SetParameterValue("revisa", reporteFalla.revisa);
                        rd.SetParameterValue("realizaFirma", reporteFalla.realizaFirma);
                        rd.SetParameterValue("revisaFirma", reporteFalla.revisaFirma);
                        rd.SetParameterValue("conjunto", reporteFalla.conjunto ?? "");
                        rd.SetParameterValue("subconjunto", reporteFalla.subconjunto ?? "");
                        rd.SetParameterValue("causa", reporteFalla.causa);
                        rd.SetParameterValue("destinoCargo", reporteFalla.destinoCargo);
                        rd.SetParameterValue("diagnosticosAplicados", reporteFalla.diagnosticosAplicados);
                        rd.SetParameterValue("tipoReparacion", reporteFalla.tipoReparacion);
                        if (reporteFalla.fallaComponente == 1)
                        {
                            rd.SetParameterValue("fechaComp", reporteFalla.fechaComp);
                            rd.SetParameterValue("horometroComp", reporteFalla.horometroComp);
                            rd.SetParameterValue("numParteComp", reporteFalla.numParteComp);
                        }
                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.Captura_Diaria_Barrenacion:
                    {
                        setMedidasReporte("HC");

                        rd = new capturaDiariaBarrenacion();

                        int capturaID = int.Parse(Request.QueryString["id"]);

                        var captura = barrenacionFactoryService.GetBarrenacionService().ObtenerCapturaDiariaPorId(capturaID);

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Reporte de Captura Diaria / Barrenación", "Barrenación"));

                        var detalles = captura.detalles.Select(x => new
                        {
                            x.bordo,
                            x.espaciamiento,
                            x.barrenos,
                            x.profundidad,
                            x.banco,
                            x.densidadMaterial,
                            tipoBarreno = x.tipoBarreno.GetDescription(),
                            x.subbarreno,
                            toneladas = x.tipoBarreno == TipoBarrenoEnum.Normal ? (x.barrenos * (x.profundidad + 1) * x.bordo * x.espaciamiento * x.densidadMaterial) : 0,
                            toneladasHora = x.tipoBarreno == TipoBarrenoEnum.Normal ? (x.barrenos * (x.profundidad + 1) * x.bordo * x.espaciamiento * x.densidadMaterial) / captura.horasTrabajadas : 0
                        });

                        rd.Database.Tables[1].SetDataSource(detalles);

                        rd.SetParameterValue("noEconomico", captura.noEconomico);
                        rd.SetParameterValue("horasTrabajadas", captura.horasTrabajadas);
                        rd.SetParameterValue("turno", captura.turno);
                        rd.SetParameterValue("operador", captura.operador);
                        rd.SetParameterValue("ayudante", captura.ayudante);
                        rd.SetParameterValue("tipoCaptura", captura.tipoCaptura);
                        rd.SetParameterValue("fechaCaptura", captura.fechaCaptura);
                        rd.SetParameterValue("metrosLineales", String.Format("{0:00}", captura.metrosLineales));
                        rd.SetParameterValue("metrosLinealesHora", String.Format("{0:00}", captura.metrosLinealesHora));
                        rd.SetParameterValue("areaCuenta", captura.areaCuenta);

                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.Rendimiento_Pieza_Barrenacion:
                    {
                        setMedidasReporte("HC");

                        rd = new reporteRendimientoPiezaBarrenacion();

                        int piezaID = int.Parse(Request.QueryString["piezaID"]);
                        var fechaInicio = DateTime.Parse(Request.QueryString["fechaInicio"].ToString());
                        var fechaFin = DateTime.Parse(Request.QueryString["fechaFin"].ToString());

                        var noSerie = Request.QueryString["noSerie"];
                        var barrenadora = Request.QueryString["barrenadora"];
                        var horasTrabajadas = Request.QueryString["horasTrabajadas"];
                        var totalBarrenos = Request.QueryString["totalBarrenos"];
                        var metrosLineales = Request.QueryString["metrosLineales"];
                        var toneladasBarreno = Request.QueryString["toneladasBarreno"];
                        var toneladasBarrenoRealizados = Request.QueryString["toneladasBarrenoRealizados"];
                        var tipoPieza = Request.QueryString["tipoPieza"];
                        var M3 = Request.QueryString["M3"];

                        //var rendimientoPieza = barrenacionFactoryService.GetBarrenacionService().CargarRendimientoPieza(piezaID, fechaInicio, fechaFin);

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Reporte de Rendimiento de Pieza / Barrenación", "Barrenación"));

                        rd.SetParameterValue("fechaInicio", fechaInicio.ToLongDateString());
                        rd.SetParameterValue("fechaFin", fechaFin.ToLongDateString());
                        rd.SetParameterValue("noSerie", noSerie);
                        rd.SetParameterValue("barrenadora", barrenadora);
                        rd.SetParameterValue("horasTrabajadas", horasTrabajadas);
                        rd.SetParameterValue("totalBarrenos", totalBarrenos);
                        rd.SetParameterValue("metrosLineales", String.Format("{0:00}", metrosLineales));
                        rd.SetParameterValue("toneladasBarreno", String.Format("{0:00}", toneladasBarreno));
                        rd.SetParameterValue("toneladasBarrenoRealizados", String.Format("{0:00}", toneladasBarrenoRealizados));
                        rd.SetParameterValue("M3", String.Format("{0:00}", M3));
                        rd.SetParameterValue("tipoPieza", tipoPieza);

                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.Captura_Diaria_General_Barrenacion:
                    {
                        setMedidasReporte("HC");

                        rd = new reporteGeneralCapturasBarrenacion();

                        var areaCuenta = Request.QueryString["areaCuenta"].ToString();
                        var barrenadoraID = Request.QueryString["barrenadoraID"].ToString().Split(',');



                        var fechaInicio = DateTime.Parse(Request.QueryString["fechaInicio"].ToString());
                        var fechaFin = DateTime.Parse(Request.QueryString["fechaFin"].ToString());


                        var listaReporteGeneral = (List<ReporteGeneralCapturaDTO>)HttpContext.Current.Session["rptBarrenacion_rptCaptura"];// barrenacionFactoryService.GetBarrenacionService().ObtenerReporteGeneralCapturas(areaCuenta, barrenadoraID, fechaInicio, fechaFin);

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Reporte de Captura General / Barrenación", "Barrenación"));
                        rd.Database.Tables[1].SetDataSource(listaReporteGeneral);

                        decimal totalHorasTrabajadas = listaReporteGeneral.Average(x => x.horasTrabajo);
                        decimal totalBarrenos = listaReporteGeneral.Average(x => (decimal)x.barrenos);
                        decimal totalMetrosLineales = listaReporteGeneral.Average(x => x.metrosLineales);
                        decimal promedioMetrosLinealesHora = listaReporteGeneral.Average(x => x.metrosLinealesHora);
                        decimal totalToneladas = listaReporteGeneral.Average(x => x.toneladas);
                        decimal totalToneladasHr = listaReporteGeneral.Average(x => x.toneladasHora);
                        var areaCuentaDesc = barrenacionFactoryService.GetBarrenacionService().getCCDescByAC(listaReporteGeneral.FirstOrDefault().areaCuenta);

                        rd.SetParameterValue("totalHorasTrabajadas", totalHorasTrabajadas.ToString("#,##0.00"));
                        rd.SetParameterValue("totalBarrenos", totalBarrenos.ToString("#,##0.00"));
                        rd.SetParameterValue("totalMetrosLineales", totalMetrosLineales.ToString("#,##0.00"));
                        rd.SetParameterValue("promedioMetrosLinealesHora", promedioMetrosLinealesHora.ToString("#,##0.00"));
                        rd.SetParameterValue("fechaInicio", fechaInicio.ToShortDateString());
                        rd.SetParameterValue("fechaFin", fechaFin.ToShortDateString());
                        rd.SetParameterValue("areaCuenta", areaCuentaDesc);
                        rd.SetParameterValue("totalToneladas", totalToneladas.ToString("#,##0.00"));
                        rd.SetParameterValue("totalToneladasHr", totalToneladasHr.ToString("#,##0.00"));

                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.cuadroComparativo:
                    {
                        setMedidasReporte("HC");

                        rd = new rptCuadroComparativo();

                        var cc = Request.QueryString["cc"].ToString();
                        var numero = Int32.Parse(Request.QueryString["numero"]);
                        var folio = Int32.Parse(Request.QueryString["folio"]);

                        var cuadro = ordenCompraFactoryServices.getOcService().getCuadroReporte(cc, numero, folio);
                        var confiabilidades = new Dictionary<string, object>();

                        if (vSesiones.sesionEmpresaActual != 3)
                        {
                            confiabilidades = cuadroComparativoFS.getCCService().CalificarConfiabilidad(cuadro, numero);
                            var caliPartidas = confiabilidades["partidas"] as List<CalificacionPartidaDTO>;

                            foreach (var gbPartida in caliPartidas.GroupBy(g => g.partida))
                            {
                                var partidaCuadro = cuadro.partidas.FirstOrDefault(w => w.partida == gbPartida.Key.ToString());
                                for (int i = 0; i < gbPartida.Count(); i++)
                                {
                                    switch (i)
                                    {
                                        case 0:
                                            partidaCuadro.calificacion1 = gbPartida.ElementAt(i).calificacion.ToString();
                                            break;
                                        case 1:
                                            partidaCuadro.calificacion2 = gbPartida.ElementAt(i).calificacion.ToString();
                                            break;
                                        case 2:
                                            partidaCuadro.calificacion3 = gbPartida.ElementAt(i).calificacion.ToString();
                                            break;
                                    }
                                }
                            }
                        }

                        string moneda1Desc = "";
                        string moneda2Desc = "";
                        string moneda3Desc = "";

                        DataTable objEncabezado = getInfoEnca("Cuadro Comparativo de Requisiciones", "");

                        if ((MainContextEnum)vSesiones.sesionEmpresaActual != MainContextEnum.PERU)
                        {
                            //RESTO EMPRESAS
                            moneda1Desc = "N";
                            moneda2Desc = "N";
                            moneda3Desc = "N";
                        }
                        else
                        {
                            //PERU
                            moneda1Desc = cuadro.moneda1 == "2" ? "E" : "N";
                            moneda2Desc = cuadro.moneda2 == "2" ? "E" : "N";
                            moneda3Desc = cuadro.moneda3 == "2" ? "E" : "N";

                            objEncabezado.Rows[0][1] = @"GRUPO CONSTRUCCIONES PLANIFICADAS  S. A DE C. V. SUCURSAL PERU";
                        }

                        rd.Database.Tables[0].SetDataSource(objEncabezado);
                        rd.Database.Tables[1].SetDataSource(cuadro.partidas);

                        rd.SetParameterValue("cc", cuadro.cc);
                        rd.SetParameterValue("folioCuadroComparativo", cuadro.folioCuadroComparativo);
                        rd.SetParameterValue("fechaCuadro", cuadro.fechaCuadro);
                        rd.SetParameterValue("fechaActual", cuadro.fechaActual);
                        rd.SetParameterValue("proveedor1", cuadro.proveedor1);
                        rd.SetParameterValue("proveedor2", cuadro.proveedor2);
                        rd.SetParameterValue("proveedor3", cuadro.proveedor3);

                        rd.SetParameterValue("subTotalProv1", cuadro.subTotalProv1);
                        rd.SetParameterValue("subTotalProv2", cuadro.subTotalProv2);
                        rd.SetParameterValue("subTotalProv3", cuadro.subTotalProv3);
                        rd.SetParameterValue("descuentoProv1", cuadro.descuentoProv1);
                        rd.SetParameterValue("descuentoProv2", cuadro.descuentoProv2);
                        rd.SetParameterValue("descuentoProv3", cuadro.descuentoProv3);
                        rd.SetParameterValue("total1Prov1", cuadro.total1Prov1);
                        rd.SetParameterValue("total1Prov2", cuadro.total1Prov2);
                        rd.SetParameterValue("total1Prov3", cuadro.total1Prov3);
                        rd.SetParameterValue("ivaProv1", cuadro.ivaProv1);
                        rd.SetParameterValue("ivaProv2", cuadro.ivaProv2);
                        rd.SetParameterValue("ivaProv3", cuadro.ivaProv3);
                        rd.SetParameterValue("total2Prov1", cuadro.total2Prov1);
                        rd.SetParameterValue("total2Prov2", cuadro.total2Prov2);
                        rd.SetParameterValue("total2Prov3", cuadro.total2Prov3);
                        rd.SetParameterValue("fletesProv1", cuadro.fletesProv1);
                        rd.SetParameterValue("fletesProv2", cuadro.fletesProv2);
                        rd.SetParameterValue("fletesProv3", cuadro.fletesProv3);
                        rd.SetParameterValue("gastosProv1", cuadro.gastosProv1);
                        rd.SetParameterValue("gastosProv2", cuadro.gastosProv2);
                        rd.SetParameterValue("gastosProv3", cuadro.gastosProv3);
                        rd.SetParameterValue("granTotalProv1", cuadro.granTotalProv1);
                        rd.SetParameterValue("granTotalProv2", cuadro.granTotalProv2);
                        rd.SetParameterValue("granTotalProv3", cuadro.granTotalProv3);
                        rd.SetParameterValue("labProv1", cuadro.labProv1);
                        rd.SetParameterValue("labProv2", cuadro.labProv2);
                        rd.SetParameterValue("labProv3", cuadro.labProv3);
                        rd.SetParameterValue("pagoProv1", cuadro.pagoProv1);
                        rd.SetParameterValue("pagoProv2", cuadro.pagoProv2);
                        rd.SetParameterValue("pagoProv3", cuadro.pagoProv3);
                        rd.SetParameterValue("fechaEntregaProv1", cuadro.fechaEntregaProv1);
                        rd.SetParameterValue("fechaEntregaProv2", cuadro.fechaEntregaProv2);
                        rd.SetParameterValue("fechaEntregaProv3", cuadro.fechaEntregaProv3);
                        rd.SetParameterValue("comentarioProv1", cuadro.comentarioProv1);
                        rd.SetParameterValue("comentarioProv2", cuadro.comentarioProv2);
                        rd.SetParameterValue("comentarioProv3", cuadro.comentarioProv3);

                        if (vSesiones.sesionEmpresaActual != 3)
                        {
                            var caliProv = confiabilidades["prov"] as decimal[];
                            rd.SetParameterValue("confiabilidadProv11", caliProv[0]); //SE USA PARA COMPARAR RESULTADOS
                            rd.SetParameterValue("confiabilidadProv22", caliProv[1]); //
                            rd.SetParameterValue("confiabilidadProv33", caliProv[2]); //
                            rd.SetParameterValue("confiabilidadProv1", caliProv[0] + "%");
                            rd.SetParameterValue("confiabilidadProv2", caliProv[1] + "%");
                            rd.SetParameterValue("confiabilidadProv3", caliProv[2] + "%");
                        }
                        else
                        {
                            rd.SetParameterValue("confiabilidadProv11", 0); //SE USA PARA COMPARAR RESULTADOS
                            rd.SetParameterValue("confiabilidadProv22", 0);
                            rd.SetParameterValue("confiabilidadProv33", 0);
                            rd.SetParameterValue("confiabilidadProv1", 0);
                            rd.SetParameterValue("confiabilidadProv2", 0);
                            rd.SetParameterValue("confiabilidadProv3", 0);
                        }

                        rd.SetParameterValue("moneda1", moneda1Desc);
                        rd.SetParameterValue("moneda2", moneda2Desc);
                        rd.SetParameterValue("moneda3", moneda3Desc);

                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.Control_Asistencia:
                    {
                        setMedidasReporte("HC");

                        rd = new rptControlAsistencia();

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Control de asistencia a cursos de capacitación", "Seguridad"));

                        var controlAsistenciaID = Convert.ToInt32(Request.QueryString["controlAsistenciaID"].ToString());

                        if (vSesiones.sesionSistemaActual != 10)
                        {
                            #region Capacitación Operativa/Capital Humano
                            var controlAsistencia = capacitacionFactoryService.GetCapacitacionService().ObtenerDatosControlAsistenciaReporte(controlAsistenciaID);
                            var listaAsistentes = new List<dynamic>();

                            foreach (var asis in controlAsistencia.asistentes)
                            {
                                //Se cambia a un objecto dinámico para poner el número de asistente como string vacío en los renglones de relleno.
                                listaAsistentes.Add(new
                                {
                                    numeroAsistente = asis.numeroAsistente > 0 ? asis.numeroAsistente.ToString() : "",
                                    claveEmpleado = asis.claveEmpleado,
                                    nombreEmpleado = asis.nombreEmpleado,
                                    puesto = asis.puesto,
                                    cc = asis.cc,
                                    departamento = asis.departamento,
                                    razonSocial = asis.razonSocial,
                                    rfc = asis.rfc
                                });
                            }

                            #region Agregar renglones de relleno
                            var cantidadAsistentes = listaAsistentes.Count();
                            var limite = 15;
                            var flagLimite = false;

                            do
                            {
                                if (cantidadAsistentes <= limite)
                                {
                                    flagLimite = true;

                                    if (cantidadAsistentes < limite)
                                    {
                                        for (int i = cantidadAsistentes; i < limite; i++)
                                        {
                                            listaAsistentes.Add(new
                                            {
                                                numeroAsistente = "",
                                                claveEmpleado = "",
                                                nombreEmpleado = "",
                                                puesto = "",
                                                cc = "",
                                                departamento = "",
                                                razonSocial = "",
                                                rfc = ""
                                            });
                                        }
                                    }
                                }

                                limite += 15;
                            } while (!flagLimite);
                            #endregion

                            rd.Database.Tables[1].SetDataSource(listaAsistentes);

                            rd.SetParameterValue("nombreCurso", controlAsistencia.nombreCurso);
                            rd.SetParameterValue("nombreInstructor", controlAsistencia.nombreInstructor);
                            rd.SetParameterValue("duracion", controlAsistencia.duracion);
                            rd.SetParameterValue("fechaCapacitacion", controlAsistencia.fechaCapacitacion);
                            rd.SetParameterValue("objetivos", controlAsistencia.objetivos);
                            rd.SetParameterValue("temasPrincipales", controlAsistencia.temasPrincipales);
                            rd.SetParameterValue("ccCurso", controlAsistencia.ccCurso);
                            rd.SetParameterValue("lugar", controlAsistencia.lugar);
                            rd.SetParameterValue("horario", controlAsistencia.horario);

                            string empresaExterna;
                            if (controlAsistencia.esExterno)
                            {
                                empresaExterna = string.Format("Empresa Externa: {0}", controlAsistencia.empresaExterna);
                            }
                            else
                            {
                                empresaExterna = "";
                            }
                            rd.SetParameterValue("empresaExterna", empresaExterna);
                            #endregion
                        }
                        else
                        {
                            #region Seguridad
                            var controlAsistencia = capacitacionSeguridadFactoryService.GetCapacitacionSeguridadService().ObtenerDatosControlAsistenciaReporte(controlAsistenciaID);
                            var listaAsistentes = new List<dynamic>();

                            foreach (var asis in controlAsistencia.asistentes)
                            {
                                //Se cambia a un objecto dinámico para poner el número de asistente como string vacío en los renglones de relleno.
                                listaAsistentes.Add(new
                                {
                                    numeroAsistente = asis.numeroAsistente > 0 ? asis.numeroAsistente.ToString() : "",
                                    claveEmpleado = asis.claveEmpleado,
                                    nombreEmpleado = asis.nombreEmpleado,
                                    puesto = asis.puesto,
                                    cc = asis.cc,
                                    departamento = asis.departamento,
                                    razonSocial = asis.razonSocial,
                                    rfc = asis.rfc
                                });
                            }

                            #region Agregar renglones de relleno
                            var cantidadAsistentes = listaAsistentes.Count();
                            var limite = 15;
                            var flagLimite = false;

                            do
                            {
                                if (cantidadAsistentes <= limite)
                                {
                                    flagLimite = true;

                                    if (cantidadAsistentes < limite)
                                    {
                                        for (int i = cantidadAsistentes; i < limite; i++)
                                        {
                                            listaAsistentes.Add(new
                                            {
                                                numeroAsistente = "",
                                                claveEmpleado = "",
                                                nombreEmpleado = "",
                                                puesto = "",
                                                cc = "",
                                                departamento = "",
                                                razonSocial = "",
                                                rfc = ""
                                            });
                                        }
                                    }
                                }

                                limite += 15;
                            } while (!flagLimite);
                            #endregion

                            rd.Database.Tables[1].SetDataSource(listaAsistentes);

                            rd.SetParameterValue("nombreCurso", controlAsistencia.nombreCurso);
                            rd.SetParameterValue("nombreInstructor", controlAsistencia.nombreInstructor);
                            rd.SetParameterValue("duracion", controlAsistencia.duracion);
                            rd.SetParameterValue("fechaCapacitacion", controlAsistencia.fechaCapacitacion);
                            rd.SetParameterValue("objetivos", controlAsistencia.objetivos);
                            rd.SetParameterValue("temasPrincipales", controlAsistencia.temasPrincipales);
                            rd.SetParameterValue("ccCurso", controlAsistencia.ccCurso);
                            rd.SetParameterValue("lugar", controlAsistencia.lugar);
                            rd.SetParameterValue("horario", controlAsistencia.horario);

                            string empresaExterna;
                            if (controlAsistencia.esExterno)
                            {
                                empresaExterna = string.Format("Empresa Externa: {0}", controlAsistencia.empresaExterna);
                            }
                            else
                            {
                                empresaExterna = "";
                            }
                            rd.SetParameterValue("empresaExterna", empresaExterna);
                            #endregion
                        }

                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.Formato_Autorizacion_Capacitacion:
                    {
                        var isCRModal = Convert.ToBoolean(Request.QueryString["isCRModal"]);
                        setMedidasReporte(isCRModal ? "HO" : "HorizontalCarta_NoModal");

                        rd = new rptFormatoAutorizacion();

                        var controlAsistenciaID = Convert.ToInt32(Request.QueryString["controlAsistenciaID"].ToString());

                        var controlAsistencia = capacitacionFactoryService.GetCapacitacionService().ObtenerDatosFormatoAutorizacion(controlAsistenciaID);

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("SISTEMA DE ADMINISTRACIÓN EN SEGURIDAD Y SALUD EN EL TRABAJO", "Seguridad"));

                        var listaAsistentes = new List<dynamic>();

                        foreach (var asis in controlAsistencia.asistentes)
                        {
                            //Se cambia a un objecto dinámico para poner el número de asistente como string vacío en los renglones de relleno.
                            listaAsistentes.Add(new
                            {
                                numeroAsistente = asis.numeroAsistente > 0 ? asis.numeroAsistente.ToString() : "",
                                claveEmpleado = asis.claveEmpleado,
                                nombreEmpleado = asis.nombreEmpleado,
                                puesto = asis.puesto,
                                cc = asis.cc,
                                departamento = asis.departamento,
                                razonSocial = asis.razonSocial,
                                rfc = asis.rfc
                            });
                        }

                        #region Agregar renglones de relleno
                        var cantidadAsistentes = listaAsistentes.Count();
                        var limite = 15;
                        var flagLimite = false;

                        do
                        {
                            if (cantidadAsistentes <= limite)
                            {
                                flagLimite = true;

                                if (cantidadAsistentes < limite)
                                {
                                    for (int i = cantidadAsistentes; i < limite; i++)
                                    {
                                        listaAsistentes.Add(new
                                        {
                                            numeroAsistente = "",
                                            claveEmpleado = "",
                                            nombreEmpleado = "",
                                            puesto = "",
                                            cc = "",
                                            departamento = "",
                                            razonSocial = "",
                                            rfc = ""
                                        });
                                    }
                                }
                            }

                            limite += 15;
                        } while (!flagLimite);
                        #endregion

                        rd.Database.Tables[1].SetDataSource(listaAsistentes); //rd.Database.Tables[1].SetDataSource(controlAsistencia.asistentes);

                        rd.SetParameterValue("nombreCurso", controlAsistencia.nombreCurso);
                        rd.SetParameterValue("claveCurso", controlAsistencia.claveCurso);
                        rd.SetParameterValue("fechaExpedicion", controlAsistencia.fechaExpedicion);
                        rd.SetParameterValue("fechaVencimiento", controlAsistencia.fechaVencimiento);
                        rd.SetParameterValue("razonSocial", controlAsistencia.razonSocial);
                        rd.SetParameterValue("rfc", controlAsistencia.rfc);
                        rd.SetParameterValue("nota", controlAsistencia.nota);
                        rd.SetParameterValue("nombreJefe", controlAsistencia.nombreJefe);
                        rd.SetParameterValue("firmaJefe", controlAsistencia.firmaJefe ?? "S/F");
                        rd.SetParameterValue("nombreGerente", controlAsistencia.nombreGerente);
                        rd.SetParameterValue("firmaGerente", controlAsistencia.firmaGerente ?? "S/F");
                        rd.SetParameterValue("nombreCoordinador", controlAsistencia.nombreCoordinador);
                        rd.SetParameterValue("firmaCoordinador", controlAsistencia.firmaCoordinador ?? "S/F");
                        rd.SetParameterValue("nombreSecretario", controlAsistencia.nombreSecretario);
                        rd.SetParameterValue("firmaSecretario", controlAsistencia.firmaSecretario ?? "S/F");
                        rd.SetParameterValue("referenciaNormativa", controlAsistencia.referenciaNormativa);

                        Session["downloadPDF"] = null;
                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.Formato_Autorizacion_General_Capacitacion:
                    {
                        setMedidasReporte("HC");

                        rd = new rptFormatoAutorizacionGeneral();

                        if (Session["reporteAutorizacionGeneral"] == null)
                        {
                            throw new Exception("No se encuentra la información para imprimir el reporte.");
                        }

                        var controlAsistencia = (FormatoAutorizacionDTO)Session["reporteAutorizacionGeneral"];

                        rd.Database.Tables[0].SetDataSource(getInfoEnca(" ", "Seguridad"));

                        var listaAsistentes = new List<dynamic>();

                        foreach (var asis in controlAsistencia.asistentes)
                        {
                            //Se cambia a un objecto dinámico para poner el número de asistente como string vacío en los renglones de relleno.
                            listaAsistentes.Add(new
                            {
                                numeroAsistente = asis.numeroAsistente > 0 ? asis.numeroAsistente.ToString() : "",
                                claveEmpleado = asis.claveEmpleado,
                                nombreEmpleado = asis.nombreEmpleado,
                                puesto = asis.puesto,
                                cc = asis.cc,
                                departamento = asis.departamento,
                                razonSocial = asis.razonSocial,
                                rfc = asis.rfc
                            });
                        }

                        #region Agregar renglones de relleno
                        var cantidadAsistentes = listaAsistentes.Count();
                        var limite = 15;
                        var flagLimite = false;

                        do
                        {
                            if (cantidadAsistentes <= limite)
                            {
                                flagLimite = true;

                                if (cantidadAsistentes < limite)
                                {
                                    for (int i = cantidadAsistentes; i < limite; i++)
                                    {
                                        listaAsistentes.Add(new
                                        {
                                            numeroAsistente = "",
                                            claveEmpleado = "",
                                            nombreEmpleado = "",
                                            puesto = "",
                                            cc = "",
                                            departamento = "",
                                            razonSocial = "",
                                            rfc = ""
                                        });
                                    }
                                }
                            }

                            limite += 15;
                        } while (!flagLimite);
                        #endregion

                        rd.Database.Tables[1].SetDataSource(listaAsistentes); //rd.Database.Tables[1].SetDataSource(controlAsistencia.asistentes);

                        rd.SetParameterValue("nombreCurso", controlAsistencia.nombreCurso);
                        rd.SetParameterValue("claveCurso", controlAsistencia.claveCurso);
                        rd.SetParameterValue("revision", controlAsistencia.revision);
                        rd.SetParameterValue("fechaExpedicion", controlAsistencia.fechaExpedicion);
                        rd.SetParameterValue("fechaVencimiento", controlAsistencia.fechaVencimiento);
                        rd.SetParameterValue("nota", controlAsistencia.nota);
                        rd.SetParameterValue("nombreJefe", controlAsistencia.nombreJefe);
                        rd.SetParameterValue("firmaJefe", controlAsistencia.firmaJefe ?? "S/F");
                        rd.SetParameterValue("nombreGerente", controlAsistencia.nombreGerente);
                        rd.SetParameterValue("firmaGerente", controlAsistencia.firmaGerente ?? "S/F");
                        rd.SetParameterValue("nombreCoordinador", controlAsistencia.nombreCoordinador);
                        rd.SetParameterValue("firmaCoordinador", controlAsistencia.firmaCoordinador ?? "S/F");
                        rd.SetParameterValue("nombreSecretario", controlAsistencia.nombreSecretario);
                        rd.SetParameterValue("firmaSecretario", controlAsistencia.firmaSecretario ?? "S/F");
                        rd.SetParameterValue("referenciaNormativa", controlAsistencia.referenciaNormativa);

                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.rptListaAutorizacion:
                    {
                        setMedidasReporte("HC");

                        rd = new rptListaAutorizacion();

                        var listaAutorizacionID = Convert.ToInt32(Request.QueryString["listaAutorizacionID"].ToString());
                        var razonSocialID = Convert.ToInt32(Request.QueryString["razonSocialID"].ToString());
                        var departamento = Convert.ToInt32(Request.QueryString["departamento"].ToString());
                        var cc = Request.QueryString["cc"].ToString();
                        var empresa = Convert.ToInt32(Request.QueryString["empresa"].ToString());
                        var listaAutorizacion = capacitacionFactoryService.GetCapacitacionService().getListaAutorizacionReporte(listaAutorizacionID, razonSocialID, departamento, cc, empresa);

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("SISTEMA DE ADMINISTRACIÓN EN SEGURIDAD Y SALUD EN EL TRABAJO", ""));
                        rd.Database.Tables[1].SetDataSource(listaAutorizacion.listaAsistentes);

                        rd.SetParameterValue("claveListaAutorizacion", listaAutorizacion.claveListaAutorizacion);
                        rd.SetParameterValue("revision", listaAutorizacion.revision);
                        rd.SetParameterValue("codigoCurso", listaAutorizacion.codigoCurso);
                        rd.SetParameterValue("fechaEmision", listaAutorizacion.fechaEmision);
                        rd.SetParameterValue("razonSocial", listaAutorizacion.razonSocial);
                        rd.SetParameterValue("rfc", listaAutorizacion.rfc);
                        rd.SetParameterValue("departamento", listaAutorizacion.departamento);
                        rd.SetParameterValue("objetivoContenidoCapacitacion", listaAutorizacion.objetivoContenidoCapacitacion);
                        rd.SetParameterValue("nota", listaAutorizacion.nota);
                        rd.SetParameterValue("nombreJefe", listaAutorizacion.nombreJefe);
                        rd.SetParameterValue("firmaJefe", listaAutorizacion.firmaJefe);
                        rd.SetParameterValue("nombreGerente", listaAutorizacion.nombreGerente);
                        rd.SetParameterValue("firmaGerente", listaAutorizacion.firmaGerente);
                        rd.SetParameterValue("nombreCoordinador", listaAutorizacion.nombreCoordinador);
                        rd.SetParameterValue("firmaCoordinador", listaAutorizacion.firmaCoordinador);

                        if (vSesiones.sesionEmpresaActual != (int)EmpresaEnum.Peru)
                        {
                            rd.SetParameterValue("etiquetaCoordinador", "Coordinador de CSH");
                            rd.SetParameterValue("etiquetaSecretario", "Secretario de CSH");
                            rd.SetParameterValue("nombreSecretario", listaAutorizacion.nombreSecretario);
                            rd.SetParameterValue("firmaSecretario", listaAutorizacion.firmaSecretario);
                        }
                        else
                        {
                            rd.SetParameterValue("etiquetaCoordinador", "Jefe de Capacitación");
                            rd.SetParameterValue("etiquetaSecretario", "");
                            rd.SetParameterValue("nombreSecretario", "");
                            rd.SetParameterValue("firmaSecretario", "");
                        }

                        rd.SetParameterValue("nombreSeguridad", listaAutorizacion.nombreSeguridad);
                        rd.SetParameterValue("firmaSeguridad", listaAutorizacion.firmaSeguridad);
                        rd.SetParameterValue("referenciaNormativa", listaAutorizacion.referenciaNormativa);
                        rd.SetParameterValue("tipoRFC", vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru ? "RUC" : "RFC");

                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.rptListaAutorizacionCorreo:
                    {
                        setMedidasReporte("HC");

                        rd = new rptListaAutorizacion();

                        var listaAutorizacionID = Convert.ToInt32(Request.QueryString["listaAutorizacionID"].ToString());
                        var razonSocialID = Convert.ToInt32(Request.QueryString["razonSocialID"].ToString());
                        var departamento = Convert.ToInt32(Request.QueryString["departamento"].ToString());
                        var cc = Request.QueryString["cc"].ToString();
                        var empresa = Convert.ToInt32(Request.QueryString["empresa"].ToString());
                        var listaAutorizacion = capacitacionFactoryService.GetCapacitacionService().getListaAutorizacionReporte(listaAutorizacionID, razonSocialID, departamento, cc, empresa);

                        Session["listaAutorizacionID"] = listaAutorizacionID;

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("SISTEMA DE ADMINISTRACIÓN EN SEGURIDAD Y SALUD EN EL TRABAJO", ""));
                        rd.Database.Tables[1].SetDataSource(listaAutorizacion.listaAsistentes);

                        rd.SetParameterValue("claveListaAutorizacion", listaAutorizacion.claveListaAutorizacion);
                        rd.SetParameterValue("revision", listaAutorizacion.revision);
                        rd.SetParameterValue("codigoCurso", listaAutorizacion.codigoCurso);
                        rd.SetParameterValue("fechaEmision", listaAutorizacion.fechaEmision);
                        rd.SetParameterValue("razonSocial", listaAutorizacion.razonSocial);
                        rd.SetParameterValue("rfc", listaAutorizacion.rfc);
                        rd.SetParameterValue("departamento", listaAutorizacion.departamento);
                        rd.SetParameterValue("objetivoContenidoCapacitacion", listaAutorizacion.objetivoContenidoCapacitacion);
                        rd.SetParameterValue("nota", listaAutorizacion.nota);
                        rd.SetParameterValue("nombreJefe", listaAutorizacion.nombreJefe);
                        rd.SetParameterValue("firmaJefe", listaAutorizacion.firmaJefe);
                        rd.SetParameterValue("nombreGerente", listaAutorizacion.nombreGerente);
                        rd.SetParameterValue("firmaGerente", listaAutorizacion.firmaGerente);
                        rd.SetParameterValue("nombreCoordinador", listaAutorizacion.nombreCoordinador);
                        rd.SetParameterValue("firmaCoordinador", listaAutorizacion.firmaCoordinador);
                        rd.SetParameterValue("nombreSecretario", listaAutorizacion.nombreSecretario);
                        rd.SetParameterValue("firmaSecretario", listaAutorizacion.firmaSecretario);

                        if (vSesiones.sesionEmpresaActual != (int)EmpresaEnum.Peru)
                        {
                            rd.SetParameterValue("etiquetaCoordinador", "Coordinador de CSH");
                            rd.SetParameterValue("etiquetaSecretario", "Secretario de CSH");
                            rd.SetParameterValue("nombreSecretario", listaAutorizacion.nombreSecretario);
                            rd.SetParameterValue("firmaSecretario", listaAutorizacion.firmaSecretario);
                        }
                        else
                        {
                            rd.SetParameterValue("etiquetaCoordinador", "Jefe de Capacitación");
                            rd.SetParameterValue("etiquetaSecretario", "");
                            rd.SetParameterValue("nombreSecretario", "");
                            rd.SetParameterValue("firmaSecretario", "");
                        }

                        rd.SetParameterValue("nombreSeguridad", listaAutorizacion.nombreSeguridad);
                        rd.SetParameterValue("firmaSeguridad", listaAutorizacion.firmaSeguridad);
                        rd.SetParameterValue("referenciaNormativa", listaAutorizacion.referenciaNormativa);
                        rd.SetParameterValue("tipoRFC", vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru ? "RUC" : "RFC");

                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.Licencia_Habilidades:
                    {
                        setMedidasReporte("HC");

                        rd = new rptLicencia();

                        var claveEmpleado = Convert.ToInt32(Request.QueryString["claveEmpleado"].ToString());
                        var empresa = Convert.ToInt32(Request.QueryString["empresa"].ToString());

                        var licencia = capacitacionFactoryService.GetCapacitacionService().ObtenerLicenciaEmpleado(claveEmpleado, empresa);

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("SISTEMA DE ADMINISTRACIÓN EN SEGURIDAD", "Seguridad"));

                        rd.SetParameterValue("nombre", licencia.nombre);
                        rd.SetParameterValue("NSS", licencia.NSS);
                        rd.SetParameterValue("puesto", licencia.puesto);
                        rd.SetParameterValue("area", licencia.area);
                        rd.SetParameterValue("fechaImpresion", DateTime.Now.ToShortDateString());

                        string empty = "_";
                        for (int i = 1; i <= 9; i++)
                        {
                            if (i <= licencia.cursos.Length)
                            {
                                var curso = licencia.cursos[i - 1];
                                rd.SetParameterValue("curso" + i, curso.Item1);
                                rd.SetParameterValue("fechaExpCurso" + i, curso.Item2);
                            }
                            else
                            {
                                rd.SetParameterValue("curso" + i, empty);
                                rd.SetParameterValue("fechaExpCurso" + i, empty);
                            }
                        }

                        Session.Add("reporte", rd);
                        break;
                    }

                case ReportesEnum.Reparaciones_Pendientes:
                    {
                        setMedidasReporte("HO");
                        rd = new rptReparacionesPendientes();
                        var datosRepPend = (List<ReparacionesPendientesDTO>)Session["rptReparacionesPendientes"];
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("DIRECCIÓN DE MAQUINARIA DE EQUIPO", "Reporte de Reparaciones Pendientes por Surtir"));
                        rd.Database.Tables[1].SetDataSource(datosRepPend);
                        rd.SetParameterValue("fecha", DateTime.Today);
                        Session.Add("reporte", rd);
                        //Session["reporteReparacionesPendientes"] = null;
                        break;
                    }
                case ReportesEnum.Tiempos_Reparacion:
                    {
                        setMedidasReporte("HO");
                        rd = new rptTiemposReparacion();
                        var datosTiempoRep = (List<TiemposReparacionDTO>)Session["rptTiemposReparacion"];

                        var promedioCRCTiempos = datosTiempoRep.Where(x => x.fechaTerminado != "").GroupBy(x => x.proveedor).Select(x => new
                        {
                            crc = x.Key,
                            promedio = ((decimal)x.Select(y => y.diasReparacion).Sum()) / ((decimal)x.Count())
                        }).OrderBy(x => x.crc); ;
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("DIRECCIÓN DE MAQUINARIA DE EQUIPO", "Reporte de Tiempos Proceso de Reparación"));
                        rd.Database.Tables[1].SetDataSource(datosTiempoRep);
                        rd.Database.Tables[2].SetDataSource(promedioCRCTiempos);
                        rd.SetParameterValue("fecha", DateTime.Today);
                        Session.Add("reporte", rd);
                        //Session["rptTiemposReparacion"] = null;

                        break;

                    }
                case ReportesEnum.InformePreliminar:
                    {
                        setMedidasReporte("HC");

                        rd = new rptInformePreliminar();

                        int informeID = int.Parse(Request.QueryString["informeID"]);

                        var resultado = SeguridadIncidentesServices.getSeguridadIncidenteService().getInformePreliminarByID(informeID);

                        var informe = resultado["informacion"] as informePreliminarDTO;

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Reporte Preliminar de Accidente", "Seguridad"));

                        string fechaYHora = String.Format("{0} {1}",
                            informe.fechaIncidenteComplete.ToLongDateString(),
                            informe.fechaIncidenteComplete.ToLongTimeString());

                        rd.SetParameterValue("folio", informe.folio.ToString());
                        rd.SetParameterValue("proyecto", informe.proyecto);
                        rd.SetParameterValue("fecha", informe.fechaInforme);
                        rd.SetParameterValue("nombreEmpleado", informe.nombreEmpleado);
                        rd.SetParameterValue("fechaIngreso", informe.fechaIngresoEmpleado);
                        rd.SetParameterValue("puestoEmpleado", informe.puestoEmpleado);
                        rd.SetParameterValue("area", informe.departamentoEmpleado);
                        rd.SetParameterValue("supervisor", informe.supervisorEmpleado);
                        rd.SetParameterValue("fechaYHora", fechaYHora.ToUpper());
                        rd.SetParameterValue("personaInformo", informe.nombrePersonaInformo);
                        rd.SetParameterValue("tipoLesion", informe.tipoLesion);
                        rd.SetParameterValue("descripcionHechos", informe.descripcionIncidente);
                        rd.SetParameterValue("accionInmediata", informe.accionInmediata ?? "ND");

                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.FormatoRIA:
                    {
                        setMedidasReporte("HC");

                        rd = new rptFormatoRIA();

                        int informeID = int.Parse(Request.QueryString["informeID"]);

                        var resultado = SeguridadIncidentesServices.getSeguridadIncidenteService().ObtenerIncidentePorInformeID(informeID);

                        var incidente = resultado["informacion"] as FormatoRIADTO;
                        Session["IncidenteReporte"] = incidente;

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("ANÁLISIS DE REPORTE DE INVESTIGACIÓN DE ACCIDENTE", "Seguridad"));

                        var ordenCronologico = incidente.ordenCronologico.Select(x => new { ordenCronologico = x, informeID = informeID.ToString() }).ToList();
                        rd.Database.Tables[1].SetDataSource(ordenCronologico);

                        rd.Database.Tables[2].SetDataSource(incidente.grupoInvestigacion);

                        var causaBasica = incidente.causaBasica.Select(x => new { causa = x, informeID = informeID.ToString() }).ToList();
                        rd.Database.Tables[3].SetDataSource(causaBasica);

                        var causaInmediata = incidente.causaInmediata.Select(x => new { causa = x, informeID = informeID.ToString() }).ToList();
                        rd.Database.Tables[4].SetDataSource(causaInmediata);

                        var causaRaiz = incidente.causaRaiz.Select(x => new { causa = x, informeID = informeID.ToString() }).ToList();
                        rd.Database.Tables[5].SetDataSource(causaRaiz);

                        var eventoDetonador = incidente.eventoDetonador.Select(x => new { evento = x, informeID = informeID.ToString() }).ToList();
                        rd.Database.Tables[6].SetDataSource(eventoDetonador);

                        rd.Database.Tables[7].SetDataSource(incidente.medidasControl);

                        var descripcion = new List<object> { new { informeID = informeID.ToString(), descripcion = incidente.descripcionAccidente } };

                        rd.Database.Tables[8].SetDataSource(descripcion);

                        rd.SetParameterValue("empresa", incidente.empresa);
                        rd.SetParameterValue("departamento", incidente.departamento);
                        rd.SetParameterValue("lugarAccidente", incidente.lugarAccidente ?? "");
                        rd.SetParameterValue("fechaAccidente", incidente.fechaAccidente);
                        rd.SetParameterValue("horaAccidente", incidente.horaAccidente);
                        rd.SetParameterValue("tipoAccidente", incidente.tipoAccidente);
                        rd.SetParameterValue("diaSemana", incidente.diaSemana);
                        rd.SetParameterValue("tipoLesion", incidente.tipoLesion);
                        rd.SetParameterValue("actividadRutinaria", incidente.actividadRutinaria ? "SI" : "NO");
                        rd.SetParameterValue("objetoCausante", incidente.agenteImplicado);
                        rd.SetParameterValue("trabajoPlaneado", incidente.trabajoPlaneado ? "SI" : "NO");
                        rd.SetParameterValue("trabajoRealizaba", incidente.trabajoRealizaba);
                        rd.SetParameterValue("tipoContacto", incidente.tipoContacto);
                        rd.SetParameterValue("protocoloTrabajo", incidente.protocoloTrabajo);
                        rd.SetParameterValue("nombreEmpleado", incidente.nombreEmpleado);
                        rd.SetParameterValue("edadEmpleado", incidente.edadEmpleado);
                        rd.SetParameterValue("puestoEmpleado", incidente.puestoEmpleado);
                        rd.SetParameterValue("experienciaEmpleado", incidente.experienciaEmpleado);
                        rd.SetParameterValue("aniosEmpresa", incidente.antiguedadEmpleado);
                        rd.SetParameterValue("turnoEmpleado", incidente.turnoEmpleado);
                        rd.SetParameterValue("horasTrabajadas", incidente.horasTrabajadasEmpleado);
                        rd.SetParameterValue("diasTrabajados", incidente.diasTrabajadosEmpleado);
                        rd.SetParameterValue("capacitado", incidente.capacitadoEmpleado ? "SI" : "NO");
                        rd.SetParameterValue("accidentesAnteriores", incidente.accidentesAnterioresEmpleado ? "SI" : "NO");
                        rd.SetParameterValue("supervisorEmpleado", incidente.supervisorCargoEmpleado);
                        rd.SetParameterValue("riesgo", incidente.descripcionRiesgo);
                        rd.SetParameterValue("tecnicaAplicada", incidente.tecnicaInvestigacion);
                        rd.SetParameterValue("instruccionEmpleado", incidente.instruccionTrabajo ?? "ND");
                        rd.SetParameterValue("porQueSeHizo", incidente.porqueSehizo ?? "ND");

                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.InformePreliminarFormatoRIA:
                    {
                        setMedidasReporte("HC");

                        rd = new rptInformePreliminarFormatoRIA();

                        int informeID = int.Parse(Request.QueryString["informeID"]);

                        var resultado = SeguridadIncidentesServices.getSeguridadIncidenteService().ObtenerInformeParaReporte(informeID);

                        var incidente = resultado["informacion"] as FormatoRIADTO;
                        Session["InformePreliminarReporte"] = incidente;

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("INFORME PRELIMINAR", "Seguridad"));

                        var descripcion = new List<object> { new { informeID = informeID.ToString(), descripcion = incidente.descripcionAccidente } };

                        rd.Database.Tables[1].SetDataSource(descripcion);

                        rd.SetParameterValue("empresa", incidente.empresa);
                        rd.SetParameterValue("departamento", incidente.departamento);
                        rd.SetParameterValue("lugarAccidente", incidente.lugarAccidente ?? "");
                        rd.SetParameterValue("fechaAccidente", incidente.fechaAccidente);
                        rd.SetParameterValue("horaAccidente", incidente.horaAccidente);
                        rd.SetParameterValue("tipoAccidente", incidente.tipoAccidente);
                        rd.SetParameterValue("diaSemana", incidente.diaSemana);
                        rd.SetParameterValue("tipoLesion", incidente.tipoLesion);
                        rd.SetParameterValue("actividadRutinaria", incidente.actividadRutinaria ? "SI" : "NO");
                        rd.SetParameterValue("objetoCausante", incidente.agenteImplicado ?? "");
                        rd.SetParameterValue("trabajoPlaneado", incidente.trabajoPlaneado ? "SI" : "NO");
                        rd.SetParameterValue("trabajoRealizaba", incidente.trabajoRealizaba);
                        rd.SetParameterValue("tipoContacto", incidente.tipoContacto ?? "");
                        rd.SetParameterValue("protocoloTrabajo", incidente.protocoloTrabajo);
                        rd.SetParameterValue("nombreEmpleado", incidente.nombreEmpleado);
                        rd.SetParameterValue("edadEmpleado", incidente.edadEmpleado);
                        rd.SetParameterValue("puestoEmpleado", incidente.puestoEmpleado);
                        rd.SetParameterValue("experienciaEmpleado", incidente.experienciaEmpleado);
                        rd.SetParameterValue("aniosEmpresa", incidente.antiguedadEmpleado);
                        rd.SetParameterValue("turnoEmpleado", incidente.turnoEmpleado);
                        rd.SetParameterValue("horasTrabajadas", incidente.horasTrabajadasEmpleado);
                        rd.SetParameterValue("diasTrabajados", incidente.diasTrabajadosEmpleado);
                        rd.SetParameterValue("capacitado", incidente.capacitadoEmpleado ? "SI" : "NO");
                        rd.SetParameterValue("accidentesAnteriores", incidente.accidentesAnterioresEmpleado ? "SI" : "NO");
                        rd.SetParameterValue("supervisorEmpleado", incidente.supervisorCargoEmpleado);
                        rd.SetParameterValue("accionInmediata", incidente.accionInmediata);
                        rd.SetParameterValue("riesgo", incidente.descripcionRiesgo);

                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.RN_MaquinariaTiempoVs:
                    {
                        setMedidasReporte("HO");
                        rd = new TiempoRequeridoVsUtilizado();
                        string areasCuenta = Request.QueryString["areasCuentas"];
                        List<int> idsAreasCuenta = new List<int>();
                        string centrosCosto = Request.QueryString["centrosCosto"];
                        List<int> idsCentrosCosto = new List<int>();
                        DateTime periodoInicio = Convert.ToDateTime(Request.QueryString["periodoInicio"]);
                        DateTime periodoFinal = Convert.ToDateTime(Request.QueryString["periodoFinal"]);

                        var items = areasCuenta.Split(',').ToList();
                        foreach (var item in items)
                        {
                            idsAreasCuenta.Add(Convert.ToInt32(item));
                        }
                        items = centrosCosto.Split(',').ToList();
                        foreach (var item in items)
                        {
                            idsCentrosCosto.Add(Convert.ToInt32(item));
                        }

                        var respuesta = RN_MaquinariaFactory.getRN_MaquinariaServices().GetInfoReporteTiempoRequeridoVsUtilizado(idsAreasCuenta, idsCentrosCosto, periodoInicio, periodoFinal);
                        var infoReporte = (List<RN_Maquinaria_TiempoRequeridoVsUtilizadoDTO>)respuesta["items"];

                        DataTable tablaEncabezado = new DataTable();

                        tablaEncabezado.Columns.Add("logo", System.Type.GetType("System.Byte[]"));
                        tablaEncabezado.Columns.Add("nombreEmpresa", System.Type.GetType("System.String"));
                        tablaEncabezado.Columns.Add("nombreReporte", System.Type.GetType("System.String"));
                        tablaEncabezado.Columns.Add("area", System.Type.GetType("System.String"));

                        var data = encabezadoFactoryServices.getEncabezadoServices().getEncabezadoDatos();
                        string path = data.logo;
                        byte[] imgdata = File.ReadAllBytes(MapPath(path));
                        string empresa = data.nombreEmpresa;
                        string nombreReporte = "Tiempo requerido vs utilizado";
                        string area = DateTime.Now.ToLongDateString();
                        tablaEncabezado.Rows.Add(imgdata, empresa, nombreReporte, area);

                        rd.Database.Tables[0].SetDataSource(infoReporte);
                        rd.Database.Tables[1].SetDataSource(tablaEncabezado);
                        Session.Add("reporte", rd);
                    }
                    break;
                case ReportesEnum.ReporteResumenTabuladorActivoFijo:
                    {
                        rd = new rptResumenDepTab();

                        string maquinaActiva = Request.QueryString["maquinaActiva"];
                        string cuenta = Request.QueryString["cuenta"];
                        string noEco = Request.QueryString["noEconomico"];
                        string tipoMovimiento = Request.QueryString["tipoMovimiento"];

                        int maqAct;
                        int? maqActiva = Int32.TryParse(maquinaActiva, out maqAct) ? (int?)Int32.Parse(maquinaActiva) : null;

                        int cuenta_temp;
                        int? cta = Int32.TryParse(cuenta, out cuenta_temp) ? (int?)Int32.Parse(cuenta) : null;

                        int tipoMov_temp;
                        int? tipoMov = Int32.TryParse(tipoMovimiento, out tipoMov_temp) ? (int?)Int32.Parse(tipoMovimiento) : null;

                        //var respuesta = affs.getActivoFijoServices().GetDepMaquinas(maqActiva, cta.Value, noEco, tipoMov);

                        var infoReporte = (ActivoFijoDepMaquinaResumenDTO)Session["resumenDepreciacion"];

                        //var infoReporte = (ActivoFijoDepMaquinaResumenDTO)respuesta["items"];

                        DataTable tablaEncabezado = new DataTable();

                        tablaEncabezado.Columns.Add("logo", System.Type.GetType("System.Byte[]"));
                        tablaEncabezado.Columns.Add("nombreEmpresa", System.Type.GetType("System.String"));
                        tablaEncabezado.Columns.Add("nombreReporte", System.Type.GetType("System.String"));
                        tablaEncabezado.Columns.Add("area", System.Type.GetType("System.String"));

                        //
                        var dia = DateTime.Now.Day;
                        int semana = 1;
                        int contador = 0;

                        for (int i = 0; i <= dia; i++)
                        {
                            if (contador == 7)
                            {
                                semana += 1;
                                contador = 0;
                            }
                            else
                            {
                                contador++;
                            }
                        }
                        //

                        var data = encabezadoFactoryServices.getEncabezadoServices().getEncabezadoDatos();
                        string path = data.logo;
                        byte[] imgdata = File.ReadAllBytes(MapPath(path));
                        string empresa = data.nombreEmpresa;
                        string nombreReporte = "Semana número " + semana + ", cuenta: " + cuenta;
                        string area = DateTime.Now.ToLongDateString();
                        tablaEncabezado.Rows.Add(imgdata, empresa, nombreReporte, area);

                        rd.Database.Tables[0].SetDataSource(tablaEncabezado);

                        List<object> tabla = new List<object>();

                        foreach (var activo in infoReporte.Depreciaciones)
                        {
                            tabla.Add(new
                            {
                                CC = activo.CC,
                                NoEconomico = activo.NoEconomico,
                                AreaCuenta = activo.AreaCuenta,
                                Descripcion = activo.Descripcion,
                                DepreciacionSemanal = activo.DepreciacionSemanal,
                                DepreciacionMensual = activo.DepreciacionMensual,
                                FechaInicioDepreciacion = activo.FechaInicioDepreciacion
                            });
                        }

                        rd.Database.Tables[1].SetDataSource(tabla);
                        rd.SetParameterValue("SumaSemanal", infoReporte.SumaSemanal);
                        rd.SetParameterValue("SumaMensual", infoReporte.SumaMensual);

                        Session.Add("reporte", rd);
                    }
                    break;
                case ReportesEnum.ReporteIncidentesGlobalSeguridad:
                    {
                        setMedidasReporte("VC");
                        TipoReporteGlobalEnum tipoReporte = (TipoReporteGlobalEnum)int.Parse(Request.QueryString["tipoReporte"]);

                        rd = new rptGlobalNuevo();

                        var reporteGlobalDTO = SeguridadIncidentesServices.getSeguridadIncidenteService().ObtenerDatosReporteGlobal(tipoReporte);

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("REPORTE SEMANAL DE ACCIDENTES", "Seguridad"));
                        rd.Database.Tables[1].SetDataSource(reporteGlobalDTO.tasaIncidentesAnual);
                        rd.Database.Tables[2].SetDataSource(reporteGlobalDTO.incidentesPorMesTRIFR);

                        var listaIncidenciasPresentadasGlobal = reporteGlobalDTO.incidenciasPresentadasGlobal.Select(x => new
                        {
                            centroCosto = x.centroCosto,
                            FATAL = x.cantidadFatal,
                            LTI = x.cantidadLTA,
                            MDI = x.cantidadATR,
                            MTI = x.cantidadATM,
                            FAI = x.cantidadAPA,
                            PD = x.cantidadDAMEQ,
                            NM = x.cantidadNM,
                            OI = 0,
                            EI = 0,
                            total = x.cantidadFatal + x.cantidadLTA + x.cantidadATR + x.cantidadATM + x.cantidadAPA + x.cantidadDAMEQ + x.cantidadNM,
                            hh = x.cantidadHH,
                            lesionesRegistrables = x.LesionesRegistrables,
                            lesionesIncapacitantes = x.LesionesIncapacitantes,
                            lesionesTotales = x.LesionesTotales,
                            lesionesDanios = x.LesionesDanios,
                            severidad = x.severidad
                        }).OrderByDescending(x => x.lesionesRegistrables);

                        rd.Database.Tables[3].SetDataSource(listaIncidenciasPresentadasGlobal);

                        var listaIncidenciasPresentadas = reporteGlobalDTO.incidenciasPresentadas.Select(x => new
                        {
                            centroCosto = x.centroCosto,
                            FATAL = x.cantidadFatal,
                            LTI = x.cantidadLTA,
                            MDI = x.cantidadATR,
                            MTI = x.cantidadATM,
                            FAI = x.cantidadAPA,
                            PD = x.cantidadDAMEQ,
                            NM = x.cantidadNM,
                            OI = 0,
                            EI = 0,
                            total = x.cantidadFatal + x.cantidadLTA + x.cantidadATR + x.cantidadATM + x.cantidadAPA + x.cantidadDAMEQ + x.cantidadNM,
                            hh = x.cantidadHH,
                            lesionesRegistrables = x.LesionesRegistrables,
                            lesionesIncapacitantes = x.LesionesIncapacitantes,
                            lesionesTotales = x.LesionesTotales,
                            lesionesDanios = x.LesionesDanios,
                            severidad = x.severidad
                        }).OrderByDescending(x => x.lesionesDanios);

                        rd.Database.Tables[4].SetDataSource(listaIncidenciasPresentadas);

                        rd.SetParameterValue("tituloPeriodoSemanal", reporteGlobalDTO.tituloPeriodo);
                        rd.SetParameterValue("rangoPeriodo", reporteGlobalDTO.rangoPeriodo);
                        rd.SetParameterValue("tituloPeriodoGlobal", "GLOBAL " + DateTime.Now.Year);

                        Session.Add("reporte", rd);
                    }
                    break;
                case ReportesEnum.ReporteComponentList:
                    {
                        setMedidasReporte("HO");
                        rd = new rptComponentList();

                        var componentesCL = (List<ReporteComponentListDTO>)Session["rptComponentList"];
                        var almacenesCL = componentesCL.Where(x => x.estatus == 1).GroupBy(x => x.locacion).Select(x => new
                        {
                            almacen = x.Key,
                            total = x.Count()
                        }).OrderByDescending(x => x.total); ;
                        var CRCCL = componentesCL.Where(x => x.estatus == 2 || x.estatus > 3).GroupBy(x => x.locacion).Select(x => new
                        {
                            crc = x.Key,
                            total = x.Count()
                        }).OrderByDescending(x => x.total); ;
                        var maquinaCL = componentesCL.Where(x => x.estatus == 0).Count();
                        var intercambioCL = componentesCL.Where(x => x.estatus == 3 && x.locacion == "INTERCAMBIO").Count();
                        var desechoCL = componentesCL.Where(x => x.estatus == 3 && x.locacion == "DESECHO").Count();

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Reporte de Componentes", "Maquinaria"));
                        rd.Database.Tables[1].SetDataSource(componentesCL);
                        rd.Database.Tables[2].SetDataSource(almacenesCL);
                        rd.Database.Tables[3].SetDataSource(CRCCL);
                        rd.SetParameterValue("maquina", maquinaCL);
                        rd.SetParameterValue("intercambio", intercambioCL);
                        rd.SetParameterValue("desecho", desechoCL);

                        Session.Add("reporte", rd);
                    }
                    break;
                case ReportesEnum.ReporteInventarioComponentes:
                    {
                        setMedidasReporte("HO");
                        rd = new rptInventarioOverhaul();

                        var componentesCL = (List<ReporteComponentListDTO>)Session["rptInventarioComponentes"];
                        var almacenesCL = componentesCL.Where(x => x.estatus == 1).GroupBy(x => x.locacion).Select(x => new
                        {
                            almacen = x.Key,
                            total = x.Count()
                        }).OrderByDescending(x => x.total); ;

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Reporte de Inventario de Componentes", "Maquinaria"));
                        rd.Database.Tables[1].SetDataSource(almacenesCL);
                        rd.Database.Tables[2].SetDataSource(componentesCL);

                        Session.Add("reporte", rd);
                    }
                    break;
                case ReportesEnum.ReporteTiemposCRCAdmin:
                    {
                        setMedidasReporte("HO");
                        rd = new rptTiemposReparacionAdministrativo();
                        var datosTiempoRep = (List<TiemposReparacionDTO>)Session["rptTiemposReparacion"];

                        var promedioCRCTiempos = datosTiempoRep.Where(x => x.fechaTerminado != "").GroupBy(x => x.proveedor).Select(x => new
                        {
                            crc = x.Key,
                            promedio = ((decimal)x.Select(y => y.diasReparacion).Sum()) / ((decimal)x.Count())
                        }).OrderBy(x => x.crc); ;


                        rd.Database.Tables[0].SetDataSource(getInfoEnca("DIRECCIÓN DE MAQUINARIA DE EQUIPO", "Reporte de Tiempos Proceso de Reparación"));
                        rd.Database.Tables[1].SetDataSource(datosTiempoRep);
                        rd.Database.Tables[2].SetDataSource(promedioCRCTiempos);
                        rd.SetParameterValue("fecha", DateTime.Today);
                        Session.Add("reporte", rd);
                        //Session["rptTiemposReparacion"] = null;
                        break;
                    }
                case ReportesEnum.CapturaCheque:
                    {
                        string pNumCheque = Request.QueryString["pNumCheque"];
                        string pMes = Request.QueryString["pMes"];
                        string pYear = Request.QueryString["pYear"];
                        string pTipo = Request.QueryString["pTipo"];
                        if (pTipo == "1")
                            printCheque(Convert.ToInt32(pNumCheque), (Convert.ToInt32(pMes)), (Convert.ToInt32(pYear)));
                        else
                            printChequeReporte(Convert.ToInt32(pNumCheque), (Convert.ToInt32(pMes)), (Convert.ToInt32(pYear)));
                        break;
                    }
                case ReportesEnum.ReporteComReparacion:
                    {
                        setMedidasReporte("HO");
                        rd = new rptComponenteReparacion();
                        var componentesCL = (List<rptComponenteReparacionDTO>)Session["rptComponentesReparcion"];
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("COMPONENTES EN REPARACIÓN", "Maquinaria"));
                        rd.Database.Tables[1].SetDataSource(componentesCL);
                        rd.SetParameterValue("suma", "" + componentesCL.Sum(z => z.costo == "" || z.costo == null ? 0 : decimal.Parse(z.costo)));
                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.rptNecesidadesPrimarias:
                    {
                        setMedidasReporte("HC");
                        rd = new rptNecesidadesPrimarias();

                        var deteccionPrimariaID = Convert.ToInt32(Request.QueryString["deteccionPrimariaID"].ToString());
                        var deteccionPrimariaReporte = capacitacionFactoryService.GetCapacitacionService().getDeteccionPrimariaReporte(deteccionPrimariaID);

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Detección de Necesidades Primarias de Capacitación", ""));
                        rd.Database.Tables[1].SetDataSource(deteccionPrimariaReporte.listaNecesidadesDetectadas);

                        rd.SetParameterValue("proyectoObra", deteccionPrimariaReporte.proyectoObra);
                        rd.SetParameterValue("area", deteccionPrimariaReporte.area);
                        rd.SetParameterValue("fecha", deteccionPrimariaReporte.fecha);

                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.rptRecorrido:
                    {
                        string listaCorreos = Request.QueryString["listaCorreos"];
                        if (listaCorreos == null)
                        {
                            setMedidasReporte("HC");
                            rd = new rptRecorrido();

                            var recorridoID = Convert.ToInt32(Request.QueryString["recorridoID"].ToString());
                            var flagEnviarCorreoReporteRecorrido = Convert.ToInt32(Request.QueryString["enviarCorreo"].ToString());

                            Session["recorridoID"] = recorridoID;
                            Session["flagEnviarCorreoReporteRecorrido"] = flagEnviarCorreoReporteRecorrido;

                            var recorridoReporte = capacitacionFactoryService.GetCapacitacionService().getRecorridoReporte(recorridoID);

                            rd.Database.Tables[0].SetDataSource(getInfoEnca("REPORTE DE RECORRIDO SEMANAL", ""));
                            rd.Database.Tables[1].SetDataSource(recorridoReporte.listaHallazgos);

                            rd.SetParameterValue("proyectoObra", recorridoReporte.proyectoObra);
                            rd.SetParameterValue("area", recorridoReporte.area);
                            rd.SetParameterValue("fecha", recorridoReporte.fecha);
                            rd.SetParameterValue("realizador", recorridoReporte.realizador);

                            Session.Add("reporte", rd);
                            break;
                        }
                        else
                        {

                            setMedidasReporte("HC");
                            rd = new rptRecorrido();

                            List<int> listaUsuarios = new List<int>();
                            var splicorr = listaCorreos.Split(',');
                            var recorridoID = Convert.ToInt32(Request.QueryString["recorridoID"].ToString());
                            foreach (var item in splicorr)
                            {
                                listaUsuarios.Add(Convert.ToInt32(item));
                            }

                            var flagEnviarCorreoReporteRecorrido = Convert.ToInt32(Request.QueryString["enviarCorreoRecorrido"].ToString());

                            Session["recorridoID"] = recorridoID;
                            Session["flagEnviarCorreoReporteRecorrido"] = flagEnviarCorreoReporteRecorrido;
                            Session["listaCorreos"] = listaUsuarios;

                            var recorridoReporte = capacitacionFactoryService.GetCapacitacionService().getRecorridoReporte(recorridoID);

                            rd.Database.Tables[0].SetDataSource(getInfoEnca("REPORTE DE RECORRIDO SEMANAL", ""));
                            rd.Database.Tables[1].SetDataSource(recorridoReporte.listaHallazgos);

                            rd.SetParameterValue("proyectoObra", recorridoReporte.proyectoObra);
                            rd.SetParameterValue("area", recorridoReporte.area);
                            rd.SetParameterValue("fecha", recorridoReporte.fecha);
                            rd.SetParameterValue("realizador", recorridoReporte.realizador);

                            Session.Add("reporte", rd);
                            break;
                        }



                    }
                case ReportesEnum.rptColaboradorCapacitacion:
                    {
                        setMedidasReporte("HC");
                        rd = new rptColaboradorCapacitacion();

                        var colaboradorCapacitacionID = Convert.ToInt32(Request.QueryString["colaboradorCapacitacionID"].ToString());
                        var colaboradorCapacitacionReporte = capacitacionFactoryService.GetCapacitacionService().getColaboradorCapacitacionReporte(colaboradorCapacitacionID);

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("", ""));

                        rd.SetParameterValue("departamento", colaboradorCapacitacionReporte.departamento);
                        rd.SetParameterValue("proyecto", colaboradorCapacitacionReporte.proyecto);
                        rd.SetParameterValue("clave", colaboradorCapacitacionReporte.clave);
                        rd.SetParameterValue("nombre", colaboradorCapacitacionReporte.nombre);
                        rd.SetParameterValue("puesto", colaboradorCapacitacionReporte.puesto);
                        rd.SetParameterValue("equipo", colaboradorCapacitacionReporte.equipo ?? "");
                        rd.SetParameterValue("inicio", colaboradorCapacitacionReporte.inicio);
                        rd.SetParameterValue("termino", colaboradorCapacitacionReporte.termino);
                        rd.SetParameterValue("adiestrador", colaboradorCapacitacionReporte.adiestrador);
                        rd.SetParameterValue("instructor", colaboradorCapacitacionReporte.instructor);
                        rd.SetParameterValue("seguridad", colaboradorCapacitacionReporte.seguridad);
                    http://localhost:3676/Reportes/Vista.aspx.cs
                        rd.SetParameterValue("capitalHumano", colaboradorCapacitacionReporte.capitalHumano);
                        rd.SetParameterValue("sobrestante", colaboradorCapacitacionReporte.sobrestante);
                        rd.SetParameterValue("gerenteObra", colaboradorCapacitacionReporte.gerenteObra);

                        Session.Add("reporte", rd);
                        break;
                    }

                case ReportesEnum.rptHorasHombreCapacitacion:
                    {
                        setMedidasReporte("HC");
                        rd = new rptHorasHombreCapacitacion();

                        var dtParametros = (HorasHombreDTO)Session["objHorasHombreCapacitacion"];
                        var dtSet = (List<HorasHombreReporteDTO>)Session["lstHorasHombreCapacitacion"];


                        rd.Database.Tables[0].SetDataSource(getInfoEnca("", ""));
                        rd.Database.Tables[1].SetDataSource(dtSet);
                        //PARAMETROS
                        rd.SetParameterValue("promedioHRSCapacitaciones", dtParametros.promedioHRSCapacitaciones);
                        rd.SetParameterValue("promedioHRSTrabajadas", dtParametros.promedioHRSTrabajadas);


                        Session.Add("reporte", rd);
                        break;
                    }

                case ReportesEnum.rptAlmacenComponentes:
                    {
                        setMedidasReporte("HC");
                        rd = new rptAlmacenComponentes();

                        var dtSet = (List<RptAlmacenComponentesDTO>)Session["reporte_almacen"];
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("", ""));
                        rd.Database.Tables[1].SetDataSource(dtSet);
                        //PARAMETROS

                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.rptBitacoraResguardos:
                    {
                        setMedidasReporte("HC");
                        rd = new rptBitacoraResguardo();

                        var dtSet = (List<rptResguardoDTO>)Session["rptBitacoraResguardos"];
                        rd.Database.Tables[0].SetDataSource(dtSet);
                        //PARAMETROS

                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.rptInventarioFisico:
                    {
                        setMedidasReporte("HC");
                        rd = new rptInventarioFisico();

                        var almacen = (int)Session["reporteInventarioFisicoAlmacen"];
                        var fecha = Convert.ToDateTime(Session["reporteInventarioFisicoFecha"]);
                        var existentes = (bool)Session["reporteInventarioFisicoExistentes"];

                        var datos = almacenFactory.getAlmService().cargarExistenciasAlmacenReporte(almacen, fecha, existentes);

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("", ""));
                        rd.Database.Tables[1].SetDataSource(datos.Item2);

                        rd.SetParameterValue("fecha", fecha.ToShortDateString());
                        rd.SetParameterValue("almacen", string.Format(@"Almacén:({0}): {1}", almacen, datos.Item1));

                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.rptObtenerExistenciasInventario:
                    {
                        setMedidasReporte("HC");
                        rd = new rptExistenciasvInventario();
                        var almacen = (List<obtenerExistenciasDTO>)Session["rptObtener"];

                        var almacenStr = almacen.Select(x => new
                        {
                            abono = Decimal.Parse(x.abono).ToString("C6"),
                            cargos = Decimal.Parse(x.cargos).ToString("C6"),
                            categoria = x.categoria,
                            diferencia = x.diferencia.ToString("F6"),
                            fisica = x.fisica.ToString("F6"),
                            insumo = x.insumo,
                            promedioOPrecio = x.promedioOPrecio.ToString("C6"),
                            teorica = x.teorica.ToString("F6"),
                            ubicacion = x.ubicacion
                        });

                        int totalNumero = almacen.Count();
                        int exactitudNumero = almacen.Where(x => x.diferencia == 0).Count();
                        int difNumero = totalNumero - exactitudNumero;
                        decimal exactitudPorcentaje = totalNumero != 0 ? ((decimal)exactitudNumero * (decimal)100) / (decimal)totalNumero : 0;
                        decimal difPorcentaje = totalNumero != 0 ? ((decimal)difNumero * (decimal)100) / (decimal)totalNumero : 0;

                        decimal difAbono = almacen.Where(x => x.diferencia != 0).Sum(x => Decimal.Parse(x.abono));
                        decimal difCargo = almacen.Where(x => x.diferencia != 0).Sum(x => Decimal.Parse(x.cargos));
                        decimal difTotal = difAbono + difCargo;

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("", ""));
                        rd.Database.Tables[1].SetDataSource(almacenStr);

                        rd.SetParameterValue("difNumero", difNumero.ToString("F"));
                        rd.SetParameterValue("difPorcentaje", difPorcentaje.ToString("F2") + " %");
                        rd.SetParameterValue("exactitudNumero", exactitudNumero.ToString("F"));
                        rd.SetParameterValue("exactitudPorcentaje", exactitudPorcentaje.ToString("F2") + " %");
                        rd.SetParameterValue("totalNumero", totalNumero.ToString("F"));
                        rd.SetParameterValue("totalPorcentaje", "100.00 %");
                        rd.SetParameterValue("difAbono", difAbono.ToString("C6"));
                        rd.SetParameterValue("difCargo", difCargo.ToString("C6"));
                        rd.SetParameterValue("difTotal", difTotal.ToString("C6"));

                        Session.Add("reporte", rd);
                        break;
                    }

                case ReportesEnum.rptValuacionInventarioFisico:
                    {
                        setMedidasReporte("HC");
                        rd = new rptValuacionInventarioFisico();

                        var cc = (string)Session["reporteValuacionInventarioFisicoCC"];
                        var almacen = (int)Session["reporteValuacionInventarioFisicoAlmacen"];
                        var fecha = Convert.ToDateTime(Session["reporteValuacionInventarioFisicoFecha"]);
                        var insumoInicial = (int)Session["reporteValuacionInventarioFisicoInsumIni"];
                        var insumoFin = (int)Session["reporteValuacionInventarioFisicoInsumFin"];
                        var soloConDiferencia = (bool)Session["reporteValuacionInventarioFisicoDiferencia"];

                        var datos = almacenFactory.getAlmService().cargarInventarioFisico(cc, almacen, fecha, insumoInicial, insumoFin, soloConDiferencia);
                        var almacenStr = almacenFactory.getAlmService().CargarDescripcionAlmacen(almacen);
                        var ccDesc = almacenFactory.getAlmService().CargarDescripcionCC(cc);

                        var inventarioFisico = (List<ValuacionInventarioFisicoDTO>)datos["datos"];
                        var inventarioFisicoFinal = inventarioFisico.Select(x => new
                        {
                            insumo = x.insumo + " : " + x.insumoDesc,
                            cantidad = x.cantidad.ToString("F6"),
                            costoPromedio = x.costoPromedio.ToString("C6"),
                            total = x.total.ToString("C6"),
                            unidad = x.unidad
                        });
                        var totalAlmacen = inventarioFisico.Sum(x => x.total).ToString("C6");

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("", ""));
                        rd.Database.Tables[1].SetDataSource(inventarioFisicoFinal);

                        rd.SetParameterValue("cc", "(" + cc + "): " + ccDesc["descripcion"]);
                        rd.SetParameterValue("fecha", fecha.ToShortDateString());
                        rd.SetParameterValue("almacen", almacenStr["descripcion"]);
                        rd.SetParameterValue("insumoInicial", insumoInicial);
                        rd.SetParameterValue("insumoFin", insumoFin);
                        rd.SetParameterValue("totalAlmacen", totalAlmacen);
                        rd.SetParameterValue("totalCC", totalAlmacen);


                        Session.Add("reporte", rd);
                        break;
                    }

                case ReportesEnum.rptPrenominaTotales:
                    {
                        setMedidasReporte("NOMODAL");
                        var id = Request.QueryString["fId"].ParseInt();

                        var prenomina = nominafs.getNominaService().GetPrenominaByID(id);
                        var centro_costos = nominafs.getNominaService().GetCatalogoCC(prenomina.CC);

                        var autorizantes = nominafs.getNominaService().GetPrenominaAutorizantesByID(id);
                        var capturo = usuarioFactoryServices.getUsuarioService().getNombreUsuario(prenomina.usuarioCapturaID);
                        var fechaStr = nominafs.getNominaService().GetPeriodoNomina(prenomina.year, prenomina.periodo, prenomina.tipoNomina);

                        switch (vSesiones.sesionEmpresaActual)
                        {
                            case (int)EmpresaEnum.Peru:
                                rd = new rptPrenominaTotales();
                                var detallesPeru = nominafs.getNominaService().GetPrenominDetallesPeruByID(id);
                                rd.Database.Tables[0].SetDataSource(getInfoEnca("", ""));
                                rd.Database.Tables[1].SetDataSource(autorizantes.OrderBy(x => x.orden).Select(a => new
                                {
                                    aprobadorNombre = a.aprobadorNombre,
                                    aprobadorPuesto = a.aprobadorPuesto,
                                    tipo = a.tipo ?? "",
                                    fecha = a.fecha ?? DateTime.Now,
                                    firma = a.firma ?? "S/F",
                                    comentario = a.comentario ?? string.Empty,
                                    estatus = EnumExtensions.GetDescription((authEstadoEnum)a.estatus)
                                }).ToList());
                                rd.Database.Tables[2].SetDataSource(detallesPeru.Select(d => new
                                {
                                    puestoID = d.nombre_empleado,
                                    puesto = d.puesto,
                                    monto = d.total_pagar,
                                    periodicidad = EnumExtensions.GetDescription((Tipo_Nomina2Enum)prenomina.tipoNomina),
                                    tipoNomina = prenomina.tipoNomina == 1 ? "SEMANAL" : prenomina.tipoNomina == 4 ? "QUINCENAL" : "MENSUAL",
                                    totalIncidencias = (0).ToString(),
                                    horasExtras = (d.horas_extra_60 + d.horas_extra_100).ToString("N"),
                                    diasExtras = (0).ToString("N"),
                                    diasNormales = (d.jornada_semanal).ToString("N"),
                                    diasVacaciones = (0).ToString("N"),
                                    diasFestivos = d.feriados.ToString("N"),
                                    bonosProduccion = (0).ToString("C"),
                                    primaVacacional = (0).ToString("C"),
                                }).ToList());
                                rd.Database.Tables[3].SetDataSource(new List<object>() { new  { 
                                    cc = prenomina.CC.Trim(),
                                    fechaInicio = prenomina.periodo,
                                    fechaFin = prenomina.year,
                                    fechaCaptura = prenomina.fechaCaptura.ToShortDateString(),
                                    estatus = EnumExtensions.GetDescription((authEstadoEnum)prenomina.estatus),
                                    usuarioCapturo = capturo
                                }});

                                rd.SetParameterValue("periodo", (prenomina.tipoNomina == 1 ? "Semana " : "Quincena ") + "# " + prenomina.periodo.ToString() + " " + fechaStr);
                                rd.SetParameterValue("centro_costos", "[" + centro_costos.cc + "] " + centro_costos.ccDescripcion);
                                break;
                            default:
                                var detalles = nominafs.getNominaService().GetPrenominDetallesaByID(id);
                                if (prenomina.tipoNomina == 10)
                                {
                                    if (centro_costos.clasificacionCcId == 1) rd = new rptAguinaldoTotalesSemanal();
                                    else rd = new rptAguinaldoTotalesQuincenal();

                                    rd.Database.Tables[0].SetDataSource(getInfoEnca("", ""));
                                    rd.Database.Tables[1].SetDataSource(autorizantes.OrderBy(x => x.orden).Select(a => new
                                    {
                                        aprobadorNombre = a.aprobadorNombre,
                                        aprobadorPuesto = a.aprobadorPuesto,
                                        tipo = a.tipo ?? "",
                                        fecha = a.fecha ?? DateTime.Now,
                                        firma = a.firma ?? "S/F",
                                        comentario = a.comentario ?? string.Empty,
                                        estatus = EnumExtensions.GetDescription((authEstadoEnum)a.estatus)
                                    }).ToList());
                                    rd.Database.Tables[2].SetDataSource(detalles.Select(d => new
                                    {
                                        puestoID = d.empleadoNombre,
                                        puesto = d.puesto,
                                        monto = d.totalPagar + d.importeDiasVacaciones + d.importeIncapacidad,
                                        periodicidad = EnumExtensions.GetDescription((Tipo_Nomina2Enum)prenomina.tipoNomina),
                                        tipoNomina = prenomina.periodo == 1 ? "SEMANAL" : prenomina.periodo == 4 ? "QUINCENAL" : "MENSUAL",
                                        totalIncidencias = (d.dias + d.diasVacaciones).ToString(),
                                        horasExtras = d.primaVacacional.ToString("C"),
                                        diasExtras = d.nominaBase.ToString("C"),
                                        diasNormales = d.dias.ToString("N"),
                                        diasVacaciones = d.diasVacaciones.ToString("N"),
                                        diasFestivos = d.diaFestivo.ToString("N"),
                                        bonosProduccion = d.pensionAlimenticia.ToString("C"),
                                        primaVacacional = d.primaVacacional.ToString("C")
                                    }).ToList());
                                    rd.Database.Tables[3].SetDataSource(new List<object>() { new  { 
                                        cc = prenomina.CC.Trim(),
                                        fechaInicio = prenomina.periodo,
                                        fechaFin = prenomina.year,
                                        fechaCaptura = prenomina.fechaCaptura.ToShortDateString(),
                                        estatus = EnumExtensions.GetDescription((authEstadoEnum)prenomina.estatus),
                                        usuarioCapturo = capturo
                                    }});

                                    rd.SetParameterValue("periodo", "Aguinaldo " + (prenomina.periodo == 1 ? "Semanal " : "Quincenal ") + prenomina.year);
                                    rd.SetParameterValue("centro_costos", "[" + centro_costos.cc + "] " + centro_costos.ccDescripcion);
                                    rd.SetParameterValue("tipoDocumento", "RESUMEN DE AGUINALDO");
                                }
                                else if (prenomina.tipoNomina == 13 || prenomina.tipoNomina == 14)
                                {
                                    rd = new rptPrenominaTotales();

                                    rd.Database.Tables[0].SetDataSource(getInfoEnca("", ""));
                                    rd.Database.Tables[1].SetDataSource(autorizantes.OrderBy(x => x.orden).Select(a => new
                                    {
                                        aprobadorNombre = a.aprobadorNombre,
                                        aprobadorPuesto = a.aprobadorPuesto,
                                        tipo = a.tipo ?? "",
                                        fecha = a.fecha ?? DateTime.Now,
                                        firma = a.firma ?? "S/F",
                                        comentario = a.comentario ?? string.Empty,
                                        estatus = EnumExtensions.GetDescription((authEstadoEnum)a.estatus)
                                    }).ToList());
                                    rd.Database.Tables[2].SetDataSource(detalles.Select(d => new
                                    {
                                        puestoID = d.empleadoNombre,
                                        puesto = d.puesto,
                                        monto = d.totalRealPagar + d.importeDiasVacaciones + d.importeIncapacidad,
                                        periodicidad = EnumExtensions.GetDescription((Tipo_Nomina2Enum)prenomina.tipoNomina),
                                        tipoNomina = prenomina.tipoNomina == 1 ? "SEMANAL" : prenomina.tipoNomina == 4 ? "QUINCENAL" : "MENSUAL",
                                        totalIncidencias = (d.dias + d.diasVacaciones).ToString(),
                                        horasExtras = d.hrExtra.ToString("N"),
                                        diasExtras = d.diaHrExtra.ToString("N"),
                                        diasNormales = d.dias.ToString("N"),
                                        diasVacaciones = d.diasVacaciones.ToString("N"),
                                        diasFestivos = d.diaFestivo.ToString("N"),
                                        bonosProduccion = d.bonoProduccion.ToString("C"),
                                        primaVacacional = d.primaVacacional.ToString("C")
                                    }).ToList());
                                    rd.Database.Tables[3].SetDataSource(new List<object>() { new  { 
                                        cc = prenomina.CC.Trim(),
                                        fechaInicio = prenomina.periodo,
                                        fechaFin = prenomina.year,
                                        fechaCaptura = prenomina.fechaCaptura.ToShortDateString(),
                                        estatus = EnumExtensions.GetDescription((authEstadoEnum)prenomina.estatus),
                                        usuarioCapturo = capturo
                                    }});

                                    rd.SetParameterValue("periodo", (prenomina.tipoNomina == 1 ? "Liquidación Semana " : "Liquidación Quincena ") + "# " + prenomina.periodo.ToString() + " " + fechaStr);
                                    rd.SetParameterValue("centro_costos", "[" + centro_costos.cc + "] " + centro_costos.ccDescripcion);
                                    rd.SetParameterValue("tipoDocumento", "RESUMEN DE LIQUIDACIÓN");
                                }
                                else
                                {
                                    rd = new rptPrenominaTotales();

                                    rd.Database.Tables[0].SetDataSource(getInfoEnca("", ""));
                                    rd.Database.Tables[1].SetDataSource(autorizantes.OrderBy(x => x.orden).Select(a => new
                                    {
                                        aprobadorNombre = a.aprobadorNombre,
                                        aprobadorPuesto = a.aprobadorPuesto,
                                        tipo = a.tipo ?? "",
                                        fecha = a.fecha ?? DateTime.Now,
                                        firma = a.firma ?? "S/F",
                                        comentario = a.comentario ?? string.Empty,
                                        estatus = EnumExtensions.GetDescription((authEstadoEnum)a.estatus)
                                    }).ToList());
                                    rd.Database.Tables[2].SetDataSource(detalles.Select(d => new
                                    {
                                        puestoID = d.empleadoNombre,
                                        puesto = d.puesto,
                                        monto = d.totalRealPagar + d.importeDiasVacaciones + d.importeIncapacidad,
                                        periodicidad = EnumExtensions.GetDescription((Tipo_Nomina2Enum)prenomina.tipoNomina),
                                        tipoNomina = prenomina.tipoNomina == 1 ? "SEMANAL" : prenomina.tipoNomina == 4 ? "QUINCENAL" : "MENSUAL",
                                        totalIncidencias = (d.dias + d.diasVacaciones).ToString(),
                                        horasExtras = d.hrExtra.ToString("N"),
                                        diasExtras = d.diaHrExtra.ToString("N"),
                                        diasNormales = d.dias.ToString("N"),
                                        diasVacaciones = d.diasVacaciones.ToString("N"),
                                        diasFestivos = d.diaFestivo.ToString("N"),
                                        bonosProduccion = d.bonoProduccion.ToString("C"),
                                        primaVacacional = d.primaVacacional.ToString("C")
                                    }).ToList());
                                    rd.Database.Tables[3].SetDataSource(new List<object>() { new  { 
                                        cc = prenomina.CC.Trim(),
                                        fechaInicio = prenomina.periodo,
                                        fechaFin = prenomina.year,
                                        fechaCaptura = prenomina.fechaCaptura.ToShortDateString(),
                                        estatus = EnumExtensions.GetDescription((authEstadoEnum)prenomina.estatus),
                                        usuarioCapturo = capturo
                                    }});

                                    rd.SetParameterValue("periodo", (prenomina.tipoNomina == 1 ? "Semana " : "Quincena ") + "# " + prenomina.periodo.ToString() + " " + fechaStr);
                                    rd.SetParameterValue("centro_costos", "[" + centro_costos.cc + "] " + centro_costos.ccDescripcion);
                                    rd.SetParameterValue("tipoDocumento", "RESUMEN DE NÓMINA");
                                }
                                break;
                        }



                        Session.Add("reporte", rd);

                        break;
                    }
                case ReportesEnum.rptCaratula:
                    {
                        var isCRModal = Convert.ToBoolean(Request.QueryString["isCRModal"]);
                        setMedidasReporte(isCRModal ? "HO" : "HorizontalCarta_NoModal");
                        rd = new rptCaratula();
                        var datosTiempoRep = (List<ReporteCaratulaDTO>)Session["rptCaratula"];
                        var tipoCambio = datosTiempoRep.FirstOrDefault().tipoCambio;

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("reporte", "reporte caratula"));
                        rd.Database.Tables[1].SetDataSource(datosTiempoRep);
                        rd.SetParameterValue("tipoCambio", tipoCambio);
                        Session.Add("reporte", rd);
                        //Session["rptTiemposReparacion"] = null;

                        break;

                    }

                case ReportesEnum.rptSolicitudChequeNomina:
                    {
                        setMedidasReporte("HC");
                        rd = new rptSolicitudChequeNomina();
                        var periodo = Request.QueryString["periodo"].ParseInt();
                        var anio = Request.QueryString["anio"].ParseInt();
                        var tipoNomina = Request.QueryString["tipoNomina"].ParseInt();

                        var prenominas = nominafs.getNominaService().GetPrenominasPeriodo(periodo, anio, tipoNomina).Select(x =>
                        {
                            var detalles = nominafs.getNominaService().GetPrenominDetallesaByID(x.id);
                            var obra = ccfs.getCCService().GetCC(x.CC);
                            var catalogoCC = nominafs.getNominaService().GetCatalogoCC(x.CC);
                            return new
                            {
                                obra = obra.descripcion,
                                sumaNomina = detalles.Sum(y => y.totalRealPagar),
                                valesDespensa = detalles.Sum(y => y.valesDespensa),
                                deposito = detalles.Sum(y => y.totalDeposito),
                                descuentos = detalles.Sum(y => y.descuento),
                                prestamos = detalles.Sum(y => y.prestamo),
                                famsa = detalles.Sum(y => y.descuentoFamsa),
                                fonacot = detalles.Sum(y => y.fonacot),
                                sindicato = detalles.Sum(y => y.sindicato),
                                pensionAlimenticia = detalles.Sum(y => y.pensionAlimenticia),
                                fondoAhorroEmpleado = detalles.Sum(y => y.fondoAhorroComplemento + y.fondoAhorroNomina),
                                fondoAhorroEmpresa = detalles.Sum(y => y.fondoAhorroComplemento + y.fondoAhorroNomina),
                                infonavit = detalles.Sum(y => y.infonavit),
                                noEmpleados = detalles.Count(),
                                cc = x.CC,
                                reqGlobal = "",
                                axa = detalles.Sum(y => y.totalRealPagar),
                                apoyo = 0,
                                aplicaDespositoSindicato = catalogoCC.depositoSindicato ? 1 : 0
                            };
                        }).ToList();

                        var fechaStr = nominafs.getNominaService().GetPeriodoNomina(anio, periodo, tipoNomina);

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("", ""));
                        rd.Database.Tables[1].SetDataSource(prenominas);

                        rd.SetParameterValue("concepto", periodo);
                        //rd.SetParameterValue("conceptoDesc", fechaStr);
                        //rd.SetParameterValue("periodo", );
                        //rd.SetParameterValue("periodo", );
                        //rd.SetParameterValue("periodo", );
                        //rd.SetParameterValue("periodo", );
                        //rd.SetParameterValue("periodo", );
                        //rd.SetParameterValue("periodo", );
                        //rd.SetParameterValue("periodo", );

                        Session.Add("reporte", rd);

                        break;
                    }
                case ReportesEnum.rptOrdenBackLog:
                    {
                        setMedidasReporte("HC");
                        rd = new rptOrdenBackLog();
                        int idBL = Request.QueryString["idBL"].ParseInt();

                        var objBL = blFS.GetBackLogs().GetDatosBL(idBL);
                        var objPartes = blFS.GetBackLogs().GetPartesRptOrdebBL(idBL);

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("", ""));
                        rd.Database.Tables[1].SetDataSource(getEvidenciaOrdenBL(idBL, 5));
                        rd.Database.Tables[2].SetDataSource(objPartes);
                        rd.Database.Tables[3].SetDataSource(getEvidenciaOrdenBLLista(idBL, 5));

                        rd.SetParameterValue("noEconomico", objBL.noEconomico);
                        rd.SetParameterValue("modelo", objBL.modelo);
                        rd.SetParameterValue("horometro", objBL.horometro);

                        string dd = string.Empty, mm = string.Empty, yyyy = string.Empty, fechaInspeccion = string.Empty;
                        if (objBL.fechaInspeccion.Year > 2020)
                        {
                            if (objBL.fechaInspeccion.Day > 0 && objBL.fechaInspeccion.Day <= 9)
                                dd = "0" + objBL.fechaInspeccion.Day.ToString();
                            else
                                dd = objBL.fechaInspeccion.Day.ToString();

                            if (objBL.fechaInspeccion.Month > 0 && objBL.fechaInspeccion.Month <= 9)
                                mm = "0" + objBL.fechaInspeccion.Month.ToString();
                            else
                                mm = objBL.fechaInspeccion.Month.ToString();

                            fechaInspeccion = string.Format("{0}/{1}/{2}", dd, mm, objBL.fechaInspeccion.Year.ToString());
                        }

                        rd.SetParameterValue("fechaElaboracionOrden", fechaInspeccion);
                        rd.SetParameterValue("folio", objBL.folioBL);
                        rd.SetParameterValue("fechaActual", DateTime.Now);
                        rd.SetParameterValue("descripcionBL", objBL.descripcion);
                        rd.SetParameterValue("responsable", objBL.responsable);

                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.rptCaratulaCC:
                    {
                        var isCRModal = Convert.ToBoolean(Request.QueryString["isCRModal"]);
                        var CentroDeCosto = Convert.ToString(Request.QueryString["CentroDeCosto"]);
                        setMedidasReporte(isCRModal ? "HO" : "VC");
                        rd = new rptCaratulaCC();
                        var datosTiempoRep = (List<ReporteCaratulaCCDTO>)Session["rptCaratula"];
                        var tipoCambio = datosTiempoRep.FirstOrDefault().tipoCambio;
                        var tipoMoneda = datosTiempoRep.FirstOrDefault().tipoMoneda;

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("reporte", "reporte caratula"));
                        rd.Database.Tables[1].SetDataSource(datosTiempoRep);
                        rd.SetParameterValue("tipoCambio", tipoCambio);
                        rd.SetParameterValue("CentroDeCosto", CentroDeCosto);
                        rd.SetParameterValue("tipoMoneda", tipoMoneda);
                        Session.Add("reporte", rd);
                        //Session["rptTiemposReparacion"] = null;

                        break;
                    }
                case ReportesEnum.rptCaratulaCCSinObra:
                    {
                        var isCRModal = Convert.ToBoolean(Request.QueryString["isCRModal"]);
                        var CentroDeCosto = Convert.ToString(Request.QueryString["CentroDeCosto"]);
                        setMedidasReporte(isCRModal ? "HO" : "VC");
                        rd = new rptCaratulaSinObra();
                        var datosTiempoRep = (List<ReporteCaratulaCCDTO>)Session["rptCaratula"];
                        var tipoCambio = datosTiempoRep.FirstOrDefault().tipoCambio;
                        var tipoMoneda = datosTiempoRep.FirstOrDefault().tipoMoneda;

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("reporte", "reporte caratula"));
                        rd.Database.Tables[1].SetDataSource(datosTiempoRep);
                        rd.SetParameterValue("tipoCambio", tipoCambio);
                        rd.SetParameterValue("CentroDeCosto", CentroDeCosto);
                        rd.SetParameterValue("tipoMoneda", tipoMoneda);
                        Session.Add("reporte", rd);
                        //Session["rptTiemposReparacion"] = null;

                        break;
                    }
                case ReportesEnum.rptActoCondicion:
                    {
                        setMedidasReporte("VC");
                        rd = new rptActoConficion();
                        var rptActoCondicion = (Core.DTO.Administracion.Seguridad.ActoCondicion.reporteActoCondicionDTO)Session["rptActoCondicion"]; //Core.DTO.RecursosHumanos.ActoCondicion.
                        List<Core.DTO.Administracion.Seguridad.ActoCondicion.reporteActoCondicionDTO> lst = new List<Core.DTO.Administracion.Seguridad.ActoCondicion.reporteActoCondicionDTO>();
                        lst.Add(rptActoCondicion);

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("reporte", "reporte caratula"));
                        rd.Database.Tables[1].SetDataSource(lst);

                        Session.Add("reporte", rd);

                        break;
                    }
                case ReportesEnum.rptNotificacionActoCondicion:
                    {
                        Session.Remove("rptNotificacionActoCondicion");

                        setMedidasReporte("VC");
                        rd = new rptActoConficion();
                        var rptActoCondicion = (Core.DTO.Administracion.Seguridad.ActoCondicion.reporteActoCondicionDTO)Session["rptActoCondicion"];
                        List<Core.DTO.Administracion.Seguridad.ActoCondicion.reporteActoCondicionDTO> lst = new List<Core.DTO.Administracion.Seguridad.ActoCondicion.reporteActoCondicionDTO>();
                        lst.Add(rptActoCondicion);

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("reporte", "reporte caratula"));
                        rd.Database.Tables[1].SetDataSource(lst);

                        MemoryStream ms = new MemoryStream();
                        var s = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                        s.Seek(0, SeekOrigin.Begin);
                        s.CopyTo(ms);

                        var reportesActosCondiciones = new List<MultiplesDTO>();
                        reportesActosCondiciones.Add(new MultiplesDTO
                        {
                            reporte = ms.ToArray(),
                            nombre = "Reporte riesgo"
                        });

                        if (Request.QueryString["idActo"] != null)
                        {
                            setMedidasReporte("VC");
                            rd = new rptActa();
                            var idActo = Convert.ToInt32(Request.QueryString["idActo"]);
                            var resultadoActa = actoCondicionFS.GetActoCondicionService().DescargarActa(idActo);
                            if (!(bool)resultadoActa["success"])
                            {
                                Session["rptNotificacionActoCondicionError"] = resultadoActa;
                            }
                            else
                            {
                                var acta = actoCondicionFS.GetActoCondicionService().DescargarActa(idActo)["items"] as ActaAdministrativaDTO;
                                rd.Database.Tables[0].SetDataSource(new List<ActaAdministrativaDTO> { acta });

                                MemoryStream ms2 = new MemoryStream();
                                var s2 = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                                s2.Seek(0, SeekOrigin.Begin);
                                s2.CopyTo(ms2);

                                reportesActosCondiciones.Add(new MultiplesDTO
                                {
                                    reporte = ms2.ToArray(),
                                    nombre = "Reporte acta"
                                });
                            }
                        }

                        Session["rptNotificacionActoCondicion"] = reportesActosCondiciones;
                    }
                    break;
                case ReportesEnum.rptActa:
                    {
                        setMedidasReporte("VC");
                        rd = new rptActa();
                        var idActo = Convert.ToInt32(Request.QueryString["idActo"]);
                        int esCH = Convert.ToInt32(Request.QueryString["esCH"]);
                        if (esCH <= 0)
                        {
                            var acta = actoCondicionFS.GetActoCondicionService().DescargarActa(idActo)["items"] as ActaAdministrativaDTO;
                            rd.Database.Tables[0].SetDataSource(new List<ActaAdministrativaDTO> { acta });
                            Session.Add("reporte", rd);
                        }
                        else if (esCH == 1)
                        {
                            string ciudad = Request.QueryString["ciudad"].ToString();
                            string articulos = Request.QueryString["articulos"].ToString();
                            var acta = actoCondicionCHFS.GetActoCondicionCHService().DescargarActa(idActo, ciudad, articulos)["items"] as Core.DTO.RecursosHumanos.ActoCondicion.Acta.ActaAdministrativaDTO;
                            rd.Database.Tables[0].SetDataSource(new List<Core.DTO.RecursosHumanos.ActoCondicion.Acta.ActaAdministrativaDTO> { acta });
                            Session.Add("reporte", rd);
                        }
                    }
                    break;
                case ReportesEnum.rptDocumentosEmpleados:
                    {
                        setMedidasReporte("HC");

                        rd = new rptDocumentosEmpleados();

                        #region SE OBTIENE LOS DATOS DEL EMPLEADO PARA MOSTRAR EN LOS DOCUMENTOS
                        int claveEmpleado = Request.QueryString["claveEmpleado"].ParseInt();
                        List<dynamic> objDatosEmpleado = ReclutamientoFS.getReclutamientosService().GetDatosEmpleadoDocumentos(claveEmpleado);

                        Dictionary<string, object> dataAlta = ReclutamientoFS.getReclutamientosService().GetDatosActualizarEmpleado(claveEmpleado, false);
                        List<DatosActualizarEmpleadoDTO> datosAlta = dataAlta["lstDatos"] as List<DatosActualizarEmpleadoDTO>;
                        List<DatosActualizarEmpleadoDTO> datosGrales = dataAlta["lstGenerales"] as List<DatosActualizarEmpleadoDTO>;

                        List<TabuladoresDTO> lstTabuladores = ReclutamientoFS.getReclutamientosService().GetTabuladores(new TabuladoresDTO { clave_empleado = claveEmpleado.ToString() });
                        TabuladoresDTO objTabulador = lstTabuladores.OrderByDescending(e => e.id).FirstOrDefault();

                        List<FamiliaresDTO> lstFamiliares = ReclutamientoFS.getReclutamientosService().GetFamiliares(claveEmpleado);

                        string[] lstParentescos = new string[12];
                        lstParentescos[1] = "Padre";
                        lstParentescos[2] = "Madre";
                        lstParentescos[3] = "Conyuge";
                        lstParentescos[4] = "Hijo";
                        lstParentescos[5] = "Hermano";
                        lstParentescos[11] = "Otro";

                        UniformesDTO objUniforme = ReclutamientoFS.getReclutamientosService().GetUniformes(claveEmpleado);

                        if (objUniforme == null)
                        {
                            objUniforme = new Core.DTO.RecursosHumanos.Reclutamientos.UniformesDTO()
                            {
                                calzado = "",
                                pantalon = "",
                                camisa = "",
                                overol = "",
                            };
                        }

                        Dictionary<string, object> dataContrato = ReclutamientoFS.getReclutamientosService().GetContratoReporte(claveEmpleado);
                        int? tipoContratoUnidades = dataContrato["tipoContratoUnidades"] as int?;
                        int? unidades = dataContrato["unidades"] as int?;
                        string contratoDesc = dataContrato["contratoDesc"] as string;
                        DateTime? fechaContrato = dataContrato["fechaContrato"] as DateTime?;
                        DateTime? fechaContratoVence = null;
                        #endregion

                        int edad = (DateTime.Now - datosAlta[0].fecha_nac).Days / 365;
                        List<Core.DTO.Principal.Generales.ComboDTO> cuidades = ReclutamientoFS.getReclutamientosService().FillCboMunicipios(1, Convert.ToInt32(datosGrales[0].estado_dom)).ToList();
                        string cuidad = cuidades.Where(e => e.Value == datosGrales[0].ciudad_dom).FirstOrDefault().Text;

                        //CHECAR SI TIENE PADRE O MADRE DADO DE ALTA
                        var objPadre = lstFamiliares.FirstOrDefault(e => e.parentesco == 1);
                        var objMadre = lstFamiliares.FirstOrDefault(e => e.parentesco == 2);
                        var objConyuge = lstFamiliares.FirstOrDefault(e => e.parentesco == 3);
                        var lstHijos = lstFamiliares.Where(e => e.parentesco == 4).ToList();

                        string lstEdadesHijos = "";

                        foreach (var item in lstHijos)
                        {
                            if (item.fecha_de_nacimiento.HasValue)
                            {
                                int edadFam = DateTime.Now.Year - item.fecha_de_nacimiento.Value.Year;
                                if ((item.fecha_de_nacimiento.Value.Month > DateTime.Now.Month) || (item.fecha_de_nacimiento.Value.Month == DateTime.Now.Month && item.fecha_de_nacimiento.Value.Day > DateTime.Now.Day))
                                    edadFam--;


                                lstEdadesHijos += edadFam.ToString() + ", ";
                            }
                        }

                        if (lstHijos.Count() > 0 && lstEdadesHijos.Length > 2)
                        {
                            if (!string.IsNullOrEmpty(lstEdadesHijos))
                            {
                                lstEdadesHijos = lstEdadesHijos.Remove(lstEdadesHijos.Length - 2);
                            }
                        }

                        //SE OBTIENE LA INFORMACION DEL REGISTRO PATRONAL
                        var lstRegPat = ReclutamientoFS.getReclutamientosService().GetRelRegPatronalesReporte()["items"] as List<RelRegPatronalesDTO>;
                        var objRegPat = lstRegPat.FirstOrDefault(e => e.clave_reg_pat == datosAlta[0].id_regpat);

                        if (tipoContratoUnidades != 3 && tipoContratoUnidades != 4)
                        {

                            if (tipoContratoUnidades == 1)
                            {
                                fechaContratoVence = fechaContrato.Value.AddDays(unidades.Value);

                            }
                            else
                            {
                                fechaContratoVence = fechaContrato.Value.AddMonths(unidades.Value);

                            }

                        }
                        else
                        {
                            if (fechaContrato == null)
                            {
                                fechaContrato = datosAlta[0].fecha_antiguedad;
                            }
                        }

                        List<string> nombres = new List<string>() { };
                        nombres.AddRange(datosAlta[0].nombre.Split(' '));
                        //datosAlta[0].nombre.Substring(0, 1) + datosAlta[0].nombre.Substring(1).ToLower()
                        string nombreCompletoLower = "";

                        foreach (var item in nombres)
                        {
                            if (!string.IsNullOrEmpty(item))
                            {
                                nombreCompletoLower += item.Substring(0, 1) + item.Substring(1).ToLower() + " ";
                            }
                        }

                        #region CONTENIDO DOCUMENTOS POR EMPRESA

                        string nombreEmpresaAcutal = "";
                        string nombreCoordinador = "";
                        string nombreCoordinadorCAPS = "";
                        string nombreEmpleado = nombreCompletoLower
                                                                    + (datosAlta[0].ape_paterno.Substring(0, 1) + datosAlta[0].ape_paterno.Substring(1).ToLower())
                                                                    + " " + (datosAlta[0].ape_materno != null && datosAlta[0].ape_materno.Length > 1 ? datosAlta[0].ape_materno.Substring(0, 1) + datosAlta[0].ape_materno.Substring(1).ToLower() :
                                                                            datosAlta[0].ape_materno);

                        string descAnexoC = "";
                        string declaracionPreguntaA = "";
                        string declaracionPreguntaD = "";
                        string confidencialidadEmpresaA = "";
                        string confidencialidadPrimera = "";
                        string confidencialidadSexta = "";
                        string confidencialidadFooter = "";
                        string beneficiarioEmpresa = "";
                        string beneficiarioCuerpo1 = "";
                        string beneficiarioCuerpo2 = "";

                        if (vSesiones.sesionEmpresaActual == 3)//COLOMBIA
                        {
                            nombreEmpresaAcutal = "CONSTRUPLAN SUCURSAL COLOMBIA";
                            nombreCoordinador = "Sr(a). Juan Paulo Rodríguez";
                            nombreCoordinadorCAPS = "JUAN PAULO RODRÍGUEZ";

                            nombreEmpleado = "Sr(a). " + nombreEmpleado;

                            #region GENERALES

                            objDatosEmpleado[0].curp = datosGrales[0].cedula_cuidadania;
                            objDatosEmpleado[0].rfc = "";

                            #endregion

                            #region ANEXOS
                            descAnexoC = @"Si bien en el marco del derecho Laboral colombiano, no se exige que el empleador deba entregar un recibo o desprendible de nomina al empleado, de conformidad a la costumbre laboral, y a las prácticas sanas del mismo, se le entregará al empleado el desprendible de nómina en donde consta los valores debidamente liquidados conforme a la ley. 

Allí deberán figurar los ingresos obtenidos por el trabajador por distintos conceptos, y los descuentos que se le han realizado al trabajador.

EL trabajador deberá tener acceso a la información detallada de los conceptos y deducciones de pago. Los recibos o desprendibles de nómina, deberán entregarse al trabajador en forma impresa o por cualquier otro medio.
                        ";

                            #endregion

                            #region DECLARACION ETICA

                            declaracionPreguntaA = @"¿Es Usted una persona expuesta públicamente De acuerdo con el Decreto 1674 de 2016?";
                            declaracionPreguntaD = @"¿Tienes familiares inmediatos que laboren en cualquiera de las empresas , o de su casa matriz y/o empresas filiales o CONSTRUPLAN SUCURSAL COLOMBIA?";

                            #endregion

                            #region CONVENIO DE CONFIDENCIALIDAD
                            confidencialidadEmpresaA = @"Que por escritura pública no. 1122 de la notaría 35 de Bogotá D.C., del 23 de julio de 2019 inscrita el 25 de julio de 2019 bajo el No. 05160126 del libro VI, se protocolizaron copias auténticas de la fundación de la sociedad, sociedad anónima de capital variable., domiciliada en México de sus estatutos y de la resolución que acordó el establecimiento en Colombia de una sucursal.";

                            confidencialidadPrimera = @"LA EMPRESA y EL EMPLEADO, para los efectos del presente convenio, de confidencialidad tiene, aceptan que deberán acatar el  objeto de definir, mantener y garantizar las obligaciones de confidencialidad y reserva absoluta que asume el empleado,  en relación con la información que la SOCIEDAD CONSTRUPLAN COLOMBIA le suministra, con ocasión del apoyo que aquella le brinda a ésta última, para las gestiones relacionadas con la ejecución del contrato celebrado entre las partes,  garantizando la más estricta confidencialidad respecto de dicha información, y a advertir de dicho deber de confidencialidad y secreto a cualquier persona que por su relación con él, deba tener acceso a dicha información para el correcto cumplimiento de sus obligaciones.";
                            confidencialidadSexta = @"Las partes, renuncian formalmente a cualquier otro fuero o jurisdicción que pudiera corresponderles y se someten a la competencia y jurisdicción de la jurisdicción establecida en la república de Colombia.";
                            confidencialidadFooter = @"Leído en todos sus términos las partes lo aceptan, ratifican y firman en la ciudad de Bogotá D.C. a los " + (fechaContrato != null ? fechaContrato.Value.ToString("dd 'Dias Del Mes De' MMMM 'del año' yyyy", new System.Globalization.CultureInfo("es-ES")).ToUpper() : fechaContrato.Value.ToString("dd 'Dias Del Mes De' MMMM 'del año' yyyy", new System.Globalization.CultureInfo("es-ES")).ToUpper() + ".");
                            #endregion

                            #region DESIGNACION BENEFICIARIO
                            beneficiarioEmpresa = @"CONSTRUPLAN SUCURSAL  COLOMBIA
Y/O LA EMPRESA QUE SE RESPONSABLE DE SU FUENTE DE TRABAJO.
JUNTA LOCAL DE CONCILIACION Y ARBITRAJE
Y/O AUTORIDAD LABORAL COMPETENTE PRESENTE. 
";

                            beneficiarioCuerpo1 = string.Format(@"Por medio del presente escrito, manifiesto en calidad de empleado y/o colaborador de la empresa  en mi carácter de trabajador laborando al servicio de la empresa  CONSTRUPLAN SUCURSAL COLOMBIA, en la que vengo desempeñando el cargo de {0}, para los efectos legales a que haya lugar, manifiesto lo siguiente: 

En el Decreto 1703 de 2022, suministro,  para que sean tenidos en cuenta por CONSTRUPLAN SUCURSAL COLOMBIA o la empresa que sea responsable de su fuente de trabajo al momento que se requiere en documento, los soportes que acreditan la calidad de beneficiario de mi grupo familiar,  tales como registros civiles de nacimiento y/o de matrimonio de las siguientes persona(s):",
                            datosAlta[0].descripcion ?? " ");

                            beneficiarioCuerpo2 = @"De igual manera me responsabilizo, de reportar las novedades que se presenten en mi grupo familiar y que constituyan causal de extinción del derecho del beneficiario, tales como fallecimientos, discapacidad, pérdida de la calidad de estudiante, independencia económica, cumplimiento de la edad máxima legal establecida y demás que puedan afectar la calidad del afiliado beneficiario. ";
                            #endregion
                        }
                        else if (vSesiones.sesionEmpresaActual == 6)//PERU
                        {
                            nombreEmpresaAcutal = "GRUPO CONSTRUCCIONES PLANIFICADAS SA DE CV SUCURSAL PERÚ";
                            nombreCoordinador = "Sr(a). Juan Paulo Rodríguez";
                            nombreCoordinadorCAPS = "JUAN PAULO RODRÍGUEZ";

                            nombreEmpleado = "Sr(a). " + nombreEmpleado;

                            objDatosEmpleado[0].curp = datosGrales[0].num_dni;
                            objDatosEmpleado[0].rfc = "";
                            datosAlta[0].nss = datosGrales[0].num_dni;


                            #region ANEXOS
                            descAnexoC = @"Para efectos de cumplir con la fracción 3 del artículo 99 de la nueva Ley de ISR, la cual señala que es
obligación de los patrones expedir y entregar comprobantes fiscales a las personas que reciban pagos
por prestación de un servicio personal subordinado, por salarios y demás prestaciones.
EL trabajador deberá tener acceso a la información detallada de los conceptos y deducciones de pago.
Los recibos de pago deberán entregarse al trabajador en forma impresa o por cualquier otro medio, sin
perjuicio de que el patrón lo deba entregar en documento impreso cuando el trabajador así lo requiera,
articulo 101 de la LFT.
Los recibos impresos deberán contener firma autógrafa del trabajador para su validez; los recibos de
pago contenidos en comprobantes fiscales digitales por Internet (CFDI) pueden sustituir a los recibos
impresos; el contenido de un CFDI hará prueba si se verifica en el portal de Internet del Servicio de
Administración Tributaria, en caso de ser validado se estará a lo dispuesto en la fracción I del artículo
836-D de esta Ley.
";

                            #endregion

                            #region DECLARACION ETICA

                            declaracionPreguntaA = @"¿Formas parte del Consejo de Administración o Directivo o de algún órgano de gobierno de empresas, instituciones o asociaciones ajenas a la empresa";
                            declaracionPreguntaD = @"¿Tienes familiares inmediatos que laboren en cualquiera de las empresas del grupo , o de su casa matriz y/o empresas filiales?";

                            #endregion

                            #region CONVENIO DE CONFIDENCIALIDAD
                            confidencialidadEmpresaA = @"Que por escritura pública no. 1122 de la notaría 35 de Bogotá D.C., del 23 de julio de 2019 inscrita el 25 de julio de 2019 bajo el No. 05160126 del libro VI, se protocolizaron copias auténticas de la fundación de la sociedad , sociedad anónima de capital variable., domiciliada en México de sus estatutos y de la resolución que acordó el establecimiento en Colombia de una sucursal.";

                            confidencialidadPrimera = @"LA EMPRESA y EL EMPLEADO, para los efectos del presente convenio, de confidencialidad tiene, aceptan que deberán acatar el  objeto de definir, mantener y garantizar las obligaciones de confidencialidad y reserva absoluta que asume el empleado,  en relación con la información que la SOCIEDAD  le suministra, con ocasión del apoyo que aquella le brinda a ésta última, para las gestiones relacionadas con la ejecución del contrato celebrado entre las partes,  garantizando la más estricta confidencialidad respecto de dicha información, y a advertir de dicho deber de confidencialidad y secreto a cualquier persona que por su relación con él, deba tener acceso a dicha información para el correcto cumplimiento de sus obligaciones.";
                            confidencialidadSexta = @"Las partes, renuncian formalmente a cualquier otro fuero o jurisdicción que pudiera corresponderles y se someten a la competencia y jurisdicción de la jurisdicción establecida en la república de Colombia.";
                            confidencialidadFooter = @"Leído en todos sus términos las partes lo aceptan, ratifican y firman en la ciudad de Bogotá D.C. a los " + (fechaContrato != null ? fechaContrato.Value.ToString("dd 'Dias Del Mes De' MMMM 'del año' yyyy", new System.Globalization.CultureInfo("es-ES")).ToUpper() : fechaContrato.Value.ToString("dd 'Dias Del Mes De' MMMM 'del año' yyyy", new System.Globalization.CultureInfo("es-ES")).ToUpper() + ".");
                            #endregion

                            #region DESIGNACION BENEFICIARIO
                            beneficiarioEmpresa = datosAlta[0].descripcionRegPat ?? " ";

                            beneficiarioCuerpo1 = @"De acuerdo con lo establecido en el DL N° 688 - Ley de Consolidación de Beneficios Sociales, suscribo la presente Declaración Jurada con la finalidad de nombrar a mis beneficiarios para las pólizas de Seguro que correspondan en virtud de mi vínculo laboral con el 

Cónyuge o conviviente y descendientes:";

                            beneficiarioCuerpo2 = @" ";
                            #endregion
                        }
                        else if (vSesiones.sesionEmpresaActual == 8)//GCPLAN
                        {
                            nombreEmpresaAcutal = "GCPLAN S. C., (GCPLAN)";
                            nombreCoordinador = "C. Edgar Ovidio Rodriguez Bacaciari";
                            nombreCoordinadorCAPS = "EDGAR OVIDIO RODRIGUEZ BACACIARI";
                            nombreEmpleado = "C. " + nombreEmpleado;

                            #region ANEXOS
                            descAnexoC = @"Para efectos de cumplir con la fracción 3 del artículo 99 de la nueva Ley de ISR, la cual señala que es
obligación de los patrones expedir y entregar comprobantes fiscales a las personas que reciban pagos
por prestación de un servicio personal subordinado, por salarios y demás prestaciones.
EL trabajador deberá tener acceso a la información detallada de los conceptos y deducciones de pago.
Los recibos de pago deberán entregarse al trabajador en forma impresa o por cualquier otro medio, sin
perjuicio de que el patrón lo deba entregar en documento impreso cuando el trabajador así lo requiera,
articulo 101 de la LFT.
Los recibos impresos deberán contener firma autógrafa del trabajador para su validez; los recibos de
pago contenidos en comprobantes fiscales digitales por Internet (CFDI) pueden sustituir a los recibos
impresos; el contenido de un CFDI hará prueba si se verifica en el portal de Internet del Servicio de
Administración Tributaria, en caso de ser validado se estará a lo dispuesto en la fracción I del artículo
836-D de esta Ley.
";

                            #endregion

                            #region DECLARACION ETICA

                            declaracionPreguntaA = @"¿Formas parte del Consejo de Administración o Directivo o de algún órgano de gobierno de empresas, instituciones o asociaciones ajenas a Grupo
Gcplan S.C., (GCPLAN)?";
                            declaracionPreguntaD = @"¿Tienes familiares inmediatos que laboren en cualquiera de las empresas del grupo encabezado por Gcplan S.C., (GCPLAN), o de su casa matriz y/o empresas filiales?";

                            #endregion

                            #region CONVENIO DE CONFIDENCIALIDAD
                            confidencialidadEmpresaA = @"Es una sociedad anónima de capital variable constituida y existente de conformidad con las leyes de los Estados Unidos Mexicanos, según consta en la Escritura Pública No. 1,734 de fecha  02 de Diciembre del 2019 otorgada ante la fe del Lic. David Magaña Robledo, Notario Público No. 16 con ejercicio y residencia en esta ciudad y que tiene capacidad legal suficiente para celebrar el presente contrato y obligar a la sociedad en virtud del mismo, con domicilio en Periférico Poniente No. 770 Col. Emiliano Zapata, C.P. 83280.";

                            confidencialidadPrimera = @"LA EMPRESA y EL EMPLEADO, para los efectos del presente convenio, reconocen expresamente y se hacen sabedores de las disposiciones legales contenidas en los artículos 134, fracción XIII y 47, fracción IX de la ley Federal del Trabajo y artículos 176 y 177 del Código Penal del Estado de Sonora.";
                            confidencialidadSexta = @"Las partes, renuncian formalmente a cualquier otro fuero o jurisdicción que pudiera corresponderles y se someten a la competencia y jurisdicción de los Juzgados y Tribunales de la ciudad de Hermosillo, Sonora.";
                            confidencialidadFooter = @"Leído en todos sus términos las partes lo aceptan, ratifican y firman en la ciudad de Hermosillo, Sonora, a los " + (fechaContrato != null ? fechaContrato.Value.ToString("dd 'Dias Del Mes De' MMMM 'del año' yyyy", new System.Globalization.CultureInfo("es-ES")).ToUpper() : fechaContrato.Value.ToString("dd 'Dias Del Mes De' MMMM 'del año' yyyy", new System.Globalization.CultureInfo("es-ES")).ToUpper() + ".");
                            #endregion

                            #region DESIGNACION BENEFICIARIO

                            beneficiarioEmpresa = datosAlta[0].descripcionRegPat ?? " ";

                            beneficiarioCuerpo1 = string.Format(@"Por este conducto, en mi carácter de trabajador laborando al servicio de la empresa Gcplan S.C., desempeñando el cargo de {0}, Curp, {1} NSS {2} para los efectos legales a que haya lugar, manifiesto lo siguiente: 

En términos de lo dispuesto en los artículos 115, 500, 501, 502 y demás relativos y aplicables de la Ley Federal del Trabajo, a efecto de que se evite el trámite del procedimiento de designación de beneficiarios que establece la Ley Federal del Trabajo en los preceptos indicados, estoy designando como BENEFICIARIO a la(s) persona(s) siguientes: ",
                            datosAlta[0].descripcion ?? " ", objDatosEmpleado[0].curp ?? " ", objDatosEmpleado[0].nss ?? " ");

                            beneficiarioCuerpo2 = "";
                            #endregion
                        }
                        else
                        {
                            nombreEmpresaAcutal = "SOL-INDUSTRIALES  S. A. de C. V., ";
                            nombreCoordinador = "C. Edgar Ovidio Rodriguez Bacaciari";
                            nombreCoordinadorCAPS = "EDGAR OVIDIO RODRIGUEZ BACACIARI";
                            nombreEmpleado = "C. " + nombreEmpleado;

                            #region ANEXOS
                            descAnexoC = @"Para efectos de cumplir con la fracción 3 del artículo 99 de la nueva Ley de ISR, la cual señala que es
obligación de los patrones expedir y entregar comprobantes fiscales a las personas que reciban pagos
por prestación de un servicio personal subordinado, por salarios y demás prestaciones.
EL trabajador deberá tener acceso a la información detallada de los conceptos y deducciones de pago.
Los recibos de pago deberán entregarse al trabajador en forma impresa o por cualquier otro medio, sin
perjuicio de que el patrón lo deba entregar en documento impreso cuando el trabajador así lo requiera,
articulo 101 de la LFT.
Los recibos impresos deberán contener firma autógrafa del trabajador para su validez; los recibos de
pago contenidos en comprobantes fiscales digitales por Internet (CFDI) pueden sustituir a los recibos
impresos; el contenido de un CFDI hará prueba si se verifica en el portal de Internet del Servicio de
Administración Tributaria, en caso de ser validado se estará a lo dispuesto en la fracción I del artículo
836-D de esta Ley.
";

                            #endregion

                            #region DECLARACION ETICA

                            declaracionPreguntaA = @"¿Formas parte del Consejo de Administración o Directivo o de algún órgano de gobierno de empresas, instituciones o asociaciones ajenas a la empresa ?";
                            declaracionPreguntaD = @"¿Tienes familiares inmediatos que laboren en cualquiera de las empresas del grupo encabezado por sol-industriales o de su casa matriz y/o empresas filiales?";

                            #endregion

                            #region CONVENIO DE CONFIDENCIALIDAD
                            confidencialidadEmpresaA = @"Es una sociedad anónima de capital variable constituida y existente de conformidad con las leyes de los Estados Unidos Mexicanos, según consta en la Escritura Pública No. 1,734 de fecha  02 de Diciembre del 2019 otorgada ante la fe del Lic. David Magaña Robledo, Notario Público No. 16 con ejercicio y residencia en esta ciudad y que tiene capacidad legal suficiente para celebrar el presente contrato y obligar a la sociedad en virtud del mismo, con domicilio en Periférico Poniente No. 770 Col. Emiliano Zapata, C.P. 83280.";

                            confidencialidadPrimera = @"LA EMPRESA y EL EMPLEADO, para los efectos del presente convenio, reconocen expresamente y se hacen sabedores de las disposiciones legales contenidas en los artículos 134, fracción XIII y 47, fracción IX de la ley Federal del Trabajo y artículos 176 y 177 del Código Penal del Estado de Sonora.";
                            confidencialidadSexta = @"Las partes, renuncian formalmente a cualquier otro fuero o jurisdicción que pudiera corresponderles y se someten a la competencia y jurisdicción de los Juzgados y Tribunales de la ciudad de Hermosillo, Sonora.";
                            confidencialidadFooter = @"Leído en todos sus términos las partes lo aceptan, ratifican y firman en la ciudad de Hermosillo, Sonora, a los " + (fechaContrato != null ? fechaContrato.Value.ToString("dd 'Dias Del Mes De' MMMM 'del año' yyyy", new System.Globalization.CultureInfo("es-ES")).ToUpper() : fechaContrato.Value.ToString("dd 'Dias Del Mes De' MMMM 'del año' yyyy", new System.Globalization.CultureInfo("es-ES")).ToUpper() + ".");
                            #endregion

                            #region DESIGNACION BENEFICIARIO

                            beneficiarioEmpresa = datosAlta[0].descripcionRegPat ?? " ";

                            beneficiarioCuerpo1 = string.Format(@"Por este conducto, en mi carácter de trabajador laborando al servicio de la empresa SOL-INDUSTRIALES S.A DE CV., desempeñando el cargo de {0}, Curp, {1} NSS {2} para los efectos legales a que haya lugar, manifiesto lo siguiente: 

En términos de lo dispuesto en los artículos 115, 500, 501, 502 y demás relativos y aplicables de la Ley Federal del Trabajo, a efecto de que se evite el trámite del procedimiento de designación de beneficiarios que establece la Ley Federal del Trabajo en los preceptos indicados, estoy designando como BENEFICIARIO a la(s) persona(s) siguientes: ",
                            datosAlta[0].descripcion ?? " ", objDatosEmpleado[0].curp ?? " ", objDatosEmpleado[0].nss ?? " ");

                            beneficiarioCuerpo2 = "";
                            #endregion
                        }

                        #endregion

                        #region SE INDICA QUE DOCUMENTOS POR EMPRESA
                        int tipoDocumento1 = Request.QueryString["tiDoc1"].ParseInt();
                        int tipoDocumento2 = Request.QueryString["tiDoc2"].ParseInt();
                        int tipoDocumento3 = Request.QueryString["tiDoc3"].ParseInt();
                        int tipoDocumento4 = Request.QueryString["tiDoc4"].ParseInt();
                        int tipoDocumento5 = Request.QueryString["tiDoc5"].ParseInt();
                        int tipoDocumento6 = Request.QueryString["tiDoc6"].ParseInt();
                        int tipoDocumento7 = Request.QueryString["tiDoc7"].ParseInt();
                        int tipoDocumento8 = Request.QueryString["tiDoc8"].ParseInt();
                        int tipoDocumento9 = Request.QueryString["tiDoc9"].ParseInt();
                        int tipoDocumento10 = Request.QueryString["tiDoc10"].ParseInt();
                        int tipoDocumento11 = Request.QueryString["tiDoc11"].ParseInt();

                        rd.SetParameterValue("CONTRATO_COLECTIVO", (int)tipoDocumento1);
                        rd.SetParameterValue("CREDENCIAL", (int)tipoDocumento3);
                        rd.SetParameterValue("CONTRATO_RENUNCIA", (int)tipoDocumento5);
                        rd.SetParameterValue("TERMINNO_CONTRATO", (int)tipoDocumento7);

                        if (vSesiones.sesionEmpresaActual == 6) //PERU
                        {
                            rd.SetParameterValue("DESIGNA_BENEFICIARIOS", 0);
                            rd.SetParameterValue("DESIGNA_BENEFICIARIOS_PERU", (int)tipoDocumento2);

                            rd.SetParameterValue("CONFIDENCIALIDAD", 0);
                            rd.SetParameterValue("CONFIDENCIALIDAD_PERU", (int)tipoDocumento9);

                            rd.SetParameterValue("AVISO_PRIVACIDAD", 0);
                            rd.SetParameterValue("AVISO_PRIVACIDAD_PERU", (int)tipoDocumento10);

                            rd.SetParameterValue("DECLARACION_DOM", (int)tipoDocumento11);

                            rd.SetParameterValue("SOLICITUD_NOMINA", 0);
                            rd.SetParameterValue("SOLICITUD_NOMINA_PERU", (int)tipoDocumento4);

                            rd.SetParameterValue("ETICA_CONFLICTO", 0);
                            rd.SetParameterValue("ETICA_CONFLICTO_PERU", (int)tipoDocumento8);

                            rd.SetParameterValue("AUTORIZACION_INGRESO", 0);
                            rd.SetParameterValue("AUTORIZACION_INGRESO_PERU", (int)tipoDocumento6);
                            rd.SetParameterValue("AUTORIZACION_INGRESO_COL", 0);

                        }
                        else if (vSesiones.sesionEmpresaActual == 3)//COLOMBIA
                        {


                            rd.SetParameterValue("DESIGNA_BENEFICIARIOS", (int)tipoDocumento2);
                            rd.SetParameterValue("DESIGNA_BENEFICIARIOS_PERU", 0);

                            rd.SetParameterValue("CONFIDENCIALIDAD", (int)tipoDocumento9);
                            rd.SetParameterValue("CONFIDENCIALIDAD_PERU", 0);

                            rd.SetParameterValue("AVISO_PRIVACIDAD", (int)tipoDocumento10);
                            rd.SetParameterValue("AVISO_PRIVACIDAD_PERU", 0);

                            rd.SetParameterValue("DECLARACION_DOM", 0);

                            rd.SetParameterValue("SOLICITUD_NOMINA", (int)tipoDocumento4);
                            rd.SetParameterValue("SOLICITUD_NOMINA_PERU", 0);

                            rd.SetParameterValue("ETICA_CONFLICTO", (int)tipoDocumento8);
                            rd.SetParameterValue("ETICA_CONFLICTO_PERU", 0);

                            rd.SetParameterValue("AUTORIZACION_INGRESO_COL", (int)tipoDocumento6);
                            rd.SetParameterValue("AUTORIZACION_INGRESO", 0);
                            rd.SetParameterValue("AUTORIZACION_INGRESO_PERU", 0);
                        }
                        else //RESTO EMPRESAS
                        {
                            rd.SetParameterValue("DESIGNA_BENEFICIARIOS", (int)tipoDocumento2);
                            rd.SetParameterValue("DESIGNA_BENEFICIARIOS_PERU", 0);

                            rd.SetParameterValue("CONFIDENCIALIDAD", (int)tipoDocumento9);
                            rd.SetParameterValue("CONFIDENCIALIDAD_PERU", 0);

                            rd.SetParameterValue("AVISO_PRIVACIDAD", (int)tipoDocumento10);
                            rd.SetParameterValue("AVISO_PRIVACIDAD_PERU", 0);

                            rd.SetParameterValue("DECLARACION_DOM", 0);

                            rd.SetParameterValue("SOLICITUD_NOMINA", (int)tipoDocumento4);
                            rd.SetParameterValue("SOLICITUD_NOMINA_PERU", 0);

                            rd.SetParameterValue("ETICA_CONFLICTO", (int)tipoDocumento8);
                            rd.SetParameterValue("ETICA_CONFLICTO_PERU", 0);

                            rd.SetParameterValue("AUTORIZACION_INGRESO", (int)tipoDocumento6);
                            rd.SetParameterValue("AUTORIZACION_INGRESO_PERU", 0);
                            rd.SetParameterValue("AUTORIZACION_INGRESO_COL", 0);
                        }


                        var estado = ReclutamientoFS.getReclutamientosService().GetEstadoByID(Convert.ToInt32(datosGrales[0].estado_dom));

                        #endregion

                        rd.SetParameterValue("salario", objTabulador.salario_base);
                        rd.SetParameterValue("tipoNomina", datosAlta[0].tipo_nomina == 1 ? "SEMANAL" : "QUINCENAL");
                        rd.SetParameterValue("correoElectronico", datosGrales[0].email ?? " ");
                        rd.SetParameterValue("puesto", datosAlta[0].descripcion ?? " ");
                        rd.SetParameterValue("CURP", objDatosEmpleado[0].curp ?? " ");
                        rd.SetParameterValue("NSS", objDatosEmpleado[0].nss ?? " ");
                        rd.SetParameterValue("nombreBeneficiario", objDatosEmpleado[0].nombre_ben ?? " ");
                        rd.SetParameterValue("nombreCompletoBen", string.IsNullOrEmpty(datosGrales[0].nombre_ben) ? " " : datosGrales[0].paterno_ben + " " + datosGrales[0].materno_ben + " " + datosGrales[0].nombre_ben);
                        rd.SetParameterValue("parentescoBeneficiario", datosGrales[0].strParentesco_ben ?? " ");
                        rd.SetParameterValue("acreditaA", string.IsNullOrEmpty(objDatosEmpleado[0].nombreCompleto) ? " " : objDatosEmpleado[0].nombreCompleto);
                        rd.SetParameterValue("nombreCompleto", string.IsNullOrEmpty(datosAlta[0].nombre) ? " " : datosAlta[0].ape_paterno + " " + datosAlta[0].ape_materno + " " + datosAlta[0].nombre);
                        rd.SetParameterValue("noEmpleado", objDatosEmpleado[0].clave_empleado);
                        rd.SetParameterValue("noIMSS", objDatosEmpleado[0].nss ?? "");
                        rd.SetParameterValue("RFC", objDatosEmpleado[0].rfc ?? "");
                        rd.SetParameterValue("vigencia", " ");
                        rd.SetParameterValue("tipoSangre", datosGrales[0].strTipo_sangre ?? " ");
                        rd.SetParameterValue("nombreCasoAccidente", objDatosEmpleado[0].en_accidente_nombre ?? " ");
                        rd.SetParameterValue("telefonoCasoAccidente", objDatosEmpleado[0].en_accidente_telefono ?? " ");
                        rd.SetParameterValue("direccionCasoAccidente", objDatosEmpleado[0].en_accidente_direccion ?? " ");
                        rd.SetParameterValue("edad", edad);
                        rd.SetParameterValue("sexo", datosAlta[0].sexo == "F" ? "FEMENINO" : "MASCULINO");
                        rd.SetParameterValue("estado_civil", datosGrales[0].estado_civil ?? " ");
                        rd.SetParameterValue("domicilio", datosGrales[0].domicilio + " # " + datosGrales[0].numero_exterior + " " + datosGrales[0].colonia + " " + cuidad + " " + estado.descripcion); //(Core.Enum.RecursosHumanos.Reclutamientos.EstadoEnum)Convert.ToInt32(datosGrales[0].estado_dom));
                        rd.SetParameterValue("fechaContratoInicio", fechaContratoVence != null ? " comprendidos entre el día " + fechaContrato.Value.ToString("dd \\de MMMM \\del yyyy", new System.Globalization.CultureInfo("es-ES")) + " al " : " desde el día " + fechaContrato.Value.ToString("dd \\de MMMM \\del yyyy", new System.Globalization.CultureInfo("es-ES")));
                        rd.SetParameterValue("fechaContratoFin", fechaContratoVence == null ? "" : fechaContratoVence.Value.ToString("dd \\de MMMM \\del yyyy", new System.Globalization.CultureInfo("es-ES")));
                        rd.SetParameterValue("contratoDesc", contratoDesc ?? " ");
                        rd.SetParameterValue("fechaContratoFooter", fechaContrato != null ? fechaContrato.Value.ToString("dd 'Dias DEL MES DE' MMMM \\de yyyy", new System.Globalization.CultureInfo("es-ES")).ToUpper() : fechaContrato.Value.ToString("dd 'Dias DEL MES DE' MMMM \\de yyyy", new System.Globalization.CultureInfo("es-ES")).ToUpper());
                        rd.SetParameterValue("fechaIngreso", datosAlta[0].fecha_antiguedad.ToShortDateString());
                        rd.SetParameterValue("leyendaPago", datosAlta[0].tipo_nomina == 1 ? "Sabado" : "15 y 30");
                        rd.SetParameterValue("descripcionRegPat", datosAlta[0].descripcionRegPat ?? " ");
                        rd.SetParameterValue("claveEmpleado", datosAlta[0].clave_empleado ?? " ");
                        rd.SetParameterValue("ape_paterno", datosAlta[0].ape_paterno ?? " ");
                        rd.SetParameterValue("ape_materno", datosAlta[0].ape_materno ?? " ");
                        rd.SetParameterValue("nombre", datosAlta[0].nombre ?? " ");
                        rd.SetParameterValue("colonia", datosGrales[0].colonia ?? " ");
                        rd.SetParameterValue("direccion2", datosGrales[0].domicilio + " # " + datosGrales[0].numero_exterior);
                        rd.SetParameterValue("ciudad", datosAlta[0].str_ciudad_dom ?? " "); //ES ID
                        rd.SetParameterValue("estado", datosGrales[0].str_estado_dom ?? " ");//ID
                        rd.SetParameterValue("codigoPostal", datosGrales[0].codigo_postal ?? " ");
                        rd.SetParameterValue("localidad", datosAlta[0].localidad_nacimiento ?? " ");//ID talves
                        rd.SetParameterValue("estado_nac", datosAlta[0].str_estado_nac ?? " ");//ID
                        rd.SetParameterValue("fecha_nac", datosAlta[0].fecha_nac.ToShortDateString());
                        rd.SetParameterValue("noss", datosAlta[0].nss ?? "");
                        rd.SetParameterValue("noine", datosGrales[0].num_cred_elector ?? " ");
                        rd.SetParameterValue("ben_fecha_nac", datosGrales[0].fecha_nac_ben != null ? datosGrales[0].fecha_nac_ben.Value.ToString("dd/MM/yyyy") : " ");
                        rd.SetParameterValue("umf", datosAlta[0].strUnidad_medica); //ID
                        rd.SetParameterValue("nombre_papa", objPadre != null ? (objPadre.apellido_paterno + " " + objPadre.apellido_materno + " " + objPadre.nombre) : " ");
                        rd.SetParameterValue("nombre_mama", objMadre != null ? (objMadre.apellido_paterno + " " + objMadre.apellido_materno + " " + objMadre.nombre) : " ");
                        rd.SetParameterValue("tramitaTarjeta", datosAlta[0].solicita_tarjeta == "S" ? "SI" : "NO");
                        rd.SetParameterValue("banco", datosAlta[0].strBanco ?? " "); // ID TALVES
                        rd.SetParameterValue("noTarjeta", datosAlta[0].num_cta_pago ?? " "); // ID TALVES
                        rd.SetParameterValue("ingreso", (int)objDatosEmpleado[0].recontratado != 1 ? "X" : " ");
                        rd.SetParameterValue("reingreso", (int)objDatosEmpleado[0].recontratado == 1 ? "X" : " ");
                        rd.SetParameterValue("calzado", objUniforme.calzado ?? " ");
                        rd.SetParameterValue("camisa", objUniforme.camisa ?? " ");
                        rd.SetParameterValue("pantalon", objUniforme.pantalon ?? " ");
                        rd.SetParameterValue("overol", objUniforme.overol ?? " ");
                        rd.SetParameterValue("telefono", datosGrales[0].tel_casa ?? " ");
                        rd.SetParameterValue("celular", datosGrales[0].tel_cel ?? " ");
                        rd.SetParameterValue("alergias", !string.IsNullOrEmpty(datosGrales[0].alergias) ? datosGrales[0].alergias : "NO");
                        rd.SetParameterValue("tipoVivienda", datosGrales[0].strTipo_casa ?? " "); // ID TALVES                        
                        rd.SetParameterValue("cc", datosAlta[0].cc_contable + " - " + datosAlta[0].nombreCC ?? " ");
                        rd.SetParameterValue("jefe_inmediato", datosAlta[0].nombreJefeInmediato ?? " ");
                        rd.SetParameterValue("salario_base", objTabulador.salario_base.ToString("C", CultureInfo.CreateSpecificCulture("es-MX")));
                        rd.SetParameterValue("complemento", objTabulador.complemento.ToString("C", CultureInfo.CreateSpecificCulture("es-MX")));
                        rd.SetParameterValue("total", (objTabulador.salario_base + objTabulador.complemento + objTabulador.bono_de_zona).ToString("C", CultureInfo.CreateSpecificCulture("es-MX")));
                        rd.SetParameterValue("puestoJefeInmediato", datosAlta[0].puestoJefeInmediato ?? " ");
                        rd.SetParameterValue("autoriza", datosAlta[0].nombreAutoriza ?? " ");
                        rd.SetParameterValue("puestoAutoriza", datosAlta[0].puestoAutoriza ?? " ");
                        rd.SetParameterValue("nombreCompletoLower", nombreCompletoLower
                                                                    + (datosAlta[0].ape_paterno.Substring(0, 1) + datosAlta[0].ape_paterno.Substring(1).ToLower())
                                                                    + " " + (datosAlta[0].ape_materno != null && datosAlta[0].ape_materno.Length > 1 ? datosAlta[0].ape_materno.Substring(0, 1) + datosAlta[0].ape_materno.Substring(1).ToLower() :
                                                                            datosAlta[0].ape_materno)
                                                                     );
                        rd.SetParameterValue("bono", objTabulador.bono_de_zona.ToString("C", CultureInfo.CreateSpecificCulture("es-MX")));
                        rd.SetParameterValue("lugarRegPat", objRegPat.cuidadDesc + ", " + objRegPat.estadoDesc);
                        rd.SetParameterValue("descAnexoC", descAnexoC);
                        rd.SetParameterValue("declaracionPreguntaA", declaracionPreguntaA);
                        rd.SetParameterValue("nombreEmpresaActual", nombreEmpresaAcutal);
                        rd.SetParameterValue("declaracionPreguntaD", declaracionPreguntaD);
                        rd.SetParameterValue("nombreCordinador", nombreCoordinador);
                        rd.SetParameterValue("confidencialidadEmpresaA", confidencialidadEmpresaA);
                        rd.SetParameterValue("confidencialidadPrimera", confidencialidadPrimera);
                        rd.SetParameterValue("confidencialidadSexta", confidencialidadSexta);
                        rd.SetParameterValue("confidencialidadNombreEmp", nombreEmpleado);
                        rd.SetParameterValue("confidencialidadFooter", confidencialidadFooter);
                        rd.SetParameterValue("beneficiarioEmpresa", beneficiarioEmpresa);
                        rd.SetParameterValue("beneficiarioCuerpo1", beneficiarioCuerpo1);
                        rd.SetParameterValue("beneficiarioCuerpo2", beneficiarioCuerpo2);
                        rd.SetParameterValue("descDepartamento", datosAlta[0].desc_depto);
                        rd.SetParameterValue("curpBeneficiario", vSesiones.sesionEmpresaActual == 6 ? datosGrales[0].ben_num_dni ?? "" : "");
                        rd.SetParameterValue("representanteRegistroPatronal", !string.IsNullOrEmpty(objRegPat.nombre_representante) ? objRegPat.nombre_representante : "");
                        rd.SetParameterValue("domicilioRegistroPatronal", objRegPat.direccion + ", " + objRegPat.colonia + ", " + objRegPat.cuidadDesc + ", " + objRegPat.estadoDesc);
                        rd.SetParameterValue("nombre_conyuge", objConyuge != null ? (objConyuge.apellido_paterno + " " + objConyuge.apellido_materno + " " + objConyuge.nombre) : " ");
                        rd.SetParameterValue("num_hijos", lstHijos.Count().ToString());
                        rd.SetParameterValue("listEdades", lstEdadesHijos);
                        rd.SetParameterValue("cuspp", datosAlta[0].cuspp ?? "");
                        rd.SetParameterValue("PERU_departamento", datosGrales[0].PERU_descDepartamento_dom);
                        rd.SetParameterValue("PERU_departamentoNAC", datosAlta[0].PERU_descDepartamento);
                        rd.SetParameterValue("fechaHoy", DateTime.Now.ToString("dd/MM/yyyy"));
                        rd.SetParameterValue("fechaNacBen", datosGrales[0].fecha_nac_ben != null ? datosGrales[0].fecha_nac_ben.Value.ToString("dd/MM/yyyy") : " ");
                        rd.SetParameterValue("dom_ben", !string.IsNullOrEmpty(datosGrales[0].domicilio_ben) ? datosGrales[0].domicilio_ben : " ");

                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.rptESTATUS_DIARIO_MAQUINARIA:
                    {
                        setMedidasReporte("HC");
                        rd = new rptEstatusDiarioMaquinaria_Agrupado();
                        var cc = Request.QueryString["cc"];
                        var fecha = Convert.ToDateTime(Request.QueryString["fecha"]);
                        var datos = serviceEstatusDiario.getDatosDiarios().getEstatus_Diario(fecha, cc);
                        var lstObj = new List<tblM_CatMaquina_EstatusDiario>();
                        var ccNombre = centroCostosFactoryServices.getCentroCostosService().getNombreAreaCuent(cc);
                        var obj = new tblM_CatMaquina_EstatusDiario();
                        obj.cc = "AC" + cc + " - " + ccNombre;
                        obj.fecha = datos.obj.fecha;
                        obj.usuario = datos.obj.usuario;
                        obj.cantActivos = datos.obj.cantActivos;
                        obj.cantInactivos = datos.obj.cantInactivos;
                        obj.porActivos = datos.obj.porActivos;
                        obj.porInactivos = datos.obj.porInactivos;

                        lstObj.Add(obj);
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("REPORTE ESTATUS DIARIO DE MAQUINARIA", ""));
                        rd.Database.Tables[1].SetDataSource(lstObj.Select(a => new
                        {
                            cc = a.cc,
                            fecha = a.fecha.ToShortDateString(),
                            usuario = a.usuario,
                            cantActivos = a.cantActivos,
                            cantInactivos = a.cantInactivos,
                            porActivos = a.porActivos + "%",
                            porInactivos = a.porInactivos + "%"
                        }).ToList());
                        rd.Database.Tables[2].SetDataSource(datos.det.Select(a => new
                        {
                            cantidad = 1,
                            noEconomico = a.noEconomico ?? "",
                            descripcion = a.descripcion ?? "",
                            modelo = a.modelo ?? "",
                            activo = a.activo ? "SI" : "",
                            inactivo = !a.activo ? "SI" : "",
                            vactivo = a.activo ? 1 : 0,
                            vinactivo = !a.activo ? 1 : 0,
                            causa = a.causa ?? "",
                            fecha_inicial = a.fecha_inicial != null ? ((DateTime)a.fecha_inicial).ToString("dd/MM/yyyy HH:mm") : "---",
                            fecha_proyectada = a.fecha_proyectada != null ? ((DateTime)a.fecha_proyectada).ToString("dd/MM/yyyy HH:mm") : "---",
                            fecha_real = a.fecha_real != null ? ((DateTime)a.fecha_real).ToString("dd/MM/yyyy HH:mm") : "---",
                            tiempo_respuesta = a.tiempo_respuesta,
                            acciones = a.acciones ?? ""
                        }).ToList());
                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.rptDatosTendenciaBL:
                    {
                        setMedidasReporte("HC");
                        rd = new rptDatosTendenciaBL();

                        string imagenBase64 = (string)Session["img"];
                        byte[] imagenBytes = Convert.FromBase64String(imagenBase64.Split(',')[1]);
                        List<GenerarReporteGraficaDTO> objTendencia = new List<GenerarReporteGraficaDTO>();
                        objTendencia.Add(new GenerarReporteGraficaDTO
                        {
                            graficaTendencia = imagenBytes
                        });

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("", ""));
                        rd.Database.Tables[1].SetDataSource(objTendencia);


                        List<string> lstTablaDatosBLActuales = (List<string>)Session["lstTablaDatosBLActuales"];
                        List<string> lstTablaDatosBLPorc = (List<string>)Session["lstTablaDatosBLPorc"];
                        List<string> lstTablaDatosBLTiempoPromedio = (List<string>)Session["lstTablaDatosBLTiempoPromedio"];
                        List<string> lstTendenciaBLRegistrados = (List<string>)Session["lstTendenciaBLRegistrados"];
                        List<string> lstTendenciaBLCerrados = (List<string>)Session["lstTendenciaBLCerrados"];
                        List<string> lstTendenciaBLAcumulados = (List<string>)Session["lstTendenciaBLAcumulados"];

                        #region SE ASIGNA LOS VALORES A LAS TABLAS
                        rd.SetParameterValue("arrTablaDatosBLActuales0", lstTablaDatosBLActuales[0]);
                        rd.SetParameterValue("arrTablaDatosBLActuales1", lstTablaDatosBLActuales[1]);
                        rd.SetParameterValue("arrTablaDatosBLActuales2", lstTablaDatosBLActuales[2]);
                        rd.SetParameterValue("arrTablaDatosBLActuales3", lstTablaDatosBLActuales[3]);
                        rd.SetParameterValue("arrTablaDatosBLActuales4", lstTablaDatosBLActuales[4]);
                        rd.SetParameterValue("arrTablaDatosBLActuales5", lstTablaDatosBLActuales[5]);
                        rd.SetParameterValue("arrTablaDatosBLActuales6", lstTablaDatosBLActuales[6]);
                        rd.SetParameterValue("arrTablaDatosBLActuales7", lstTablaDatosBLActuales[7]);

                        rd.SetParameterValue("arrTablaDatosBLPorc0", lstTablaDatosBLPorc[0]);
                        rd.SetParameterValue("arrTablaDatosBLPorc1", lstTablaDatosBLPorc[1]);
                        rd.SetParameterValue("arrTablaDatosBLPorc2", lstTablaDatosBLPorc[2]);
                        rd.SetParameterValue("arrTablaDatosBLPorc3", lstTablaDatosBLPorc[3]);
                        rd.SetParameterValue("arrTablaDatosBLPorc4", lstTablaDatosBLPorc[4]);
                        rd.SetParameterValue("arrTablaDatosBLPorc5", lstTablaDatosBLPorc[5]);
                        rd.SetParameterValue("arrTablaDatosBLPorc6", lstTablaDatosBLPorc[6]);

                        rd.SetParameterValue("arrTablaDatosBLTiempoPromedio0", lstTablaDatosBLTiempoPromedio[0]);
                        rd.SetParameterValue("arrTablaDatosBLTiempoPromedio1", lstTablaDatosBLTiempoPromedio[1]);
                        rd.SetParameterValue("arrTablaDatosBLTiempoPromedio2", lstTablaDatosBLTiempoPromedio[2]);
                        rd.SetParameterValue("arrTablaDatosBLTiempoPromedio3", lstTablaDatosBLTiempoPromedio[3]);
                        rd.SetParameterValue("arrTablaDatosBLTiempoPromedio4", lstTablaDatosBLTiempoPromedio[4]);
                        rd.SetParameterValue("arrTablaDatosBLTiempoPromedio5", lstTablaDatosBLTiempoPromedio[5]);
                        rd.SetParameterValue("arrTablaDatosBLTiempoPromedio6", lstTablaDatosBLTiempoPromedio[6]);
                        rd.SetParameterValue("arrTablaDatosBLTiempoPromedio7", lstTablaDatosBLTiempoPromedio[7]);

                        rd.SetParameterValue("arrTendenciaBLRegistrados0", lstTendenciaBLRegistrados[0]);
                        rd.SetParameterValue("arrTendenciaBLRegistrados1", lstTendenciaBLRegistrados[1]);
                        rd.SetParameterValue("arrTendenciaBLRegistrados2", lstTendenciaBLRegistrados[2]);
                        rd.SetParameterValue("arrTendenciaBLRegistrados3", lstTendenciaBLRegistrados[3]);
                        rd.SetParameterValue("arrTendenciaBLRegistrados4", lstTendenciaBLRegistrados[4]);
                        rd.SetParameterValue("arrTendenciaBLRegistrados5", lstTendenciaBLRegistrados[5]);
                        rd.SetParameterValue("arrTendenciaBLRegistrados6", lstTendenciaBLRegistrados[6]);
                        rd.SetParameterValue("arrTendenciaBLRegistrados7", lstTendenciaBLRegistrados[7]);
                        rd.SetParameterValue("arrTendenciaBLRegistrados8", lstTendenciaBLRegistrados[8]);
                        rd.SetParameterValue("arrTendenciaBLRegistrados9", lstTendenciaBLRegistrados[9]);
                        rd.SetParameterValue("arrTendenciaBLRegistrados10", lstTendenciaBLRegistrados[10]);
                        rd.SetParameterValue("arrTendenciaBLRegistrados11", lstTendenciaBLRegistrados[11]);

                        rd.SetParameterValue("arrTendenciaBLCerrados0", lstTendenciaBLCerrados[0]);
                        rd.SetParameterValue("arrTendenciaBLCerrados1", lstTendenciaBLCerrados[1]);
                        rd.SetParameterValue("arrTendenciaBLCerrados2", lstTendenciaBLCerrados[2]);
                        rd.SetParameterValue("arrTendenciaBLCerrados3", lstTendenciaBLCerrados[3]);
                        rd.SetParameterValue("arrTendenciaBLCerrados4", lstTendenciaBLCerrados[4]);
                        rd.SetParameterValue("arrTendenciaBLCerrados5", lstTendenciaBLCerrados[5]);
                        rd.SetParameterValue("arrTendenciaBLCerrados6", lstTendenciaBLCerrados[6]);
                        rd.SetParameterValue("arrTendenciaBLCerrados7", lstTendenciaBLCerrados[7]);
                        rd.SetParameterValue("arrTendenciaBLCerrados8", lstTendenciaBLCerrados[8]);
                        rd.SetParameterValue("arrTendenciaBLCerrados9", lstTendenciaBLCerrados[9]);
                        rd.SetParameterValue("arrTendenciaBLCerrados10", lstTendenciaBLCerrados[10]);
                        rd.SetParameterValue("arrTendenciaBLCerrados11", lstTendenciaBLCerrados[11]);

                        rd.SetParameterValue("arrTendenciaBLAcumulados0", lstTendenciaBLAcumulados[0]);
                        rd.SetParameterValue("arrTendenciaBLAcumulados1", lstTendenciaBLAcumulados[1]);
                        rd.SetParameterValue("arrTendenciaBLAcumulados2", lstTendenciaBLAcumulados[2]);
                        rd.SetParameterValue("arrTendenciaBLAcumulados3", lstTendenciaBLAcumulados[3]);
                        rd.SetParameterValue("arrTendenciaBLAcumulados4", lstTendenciaBLAcumulados[4]);
                        rd.SetParameterValue("arrTendenciaBLAcumulados5", lstTendenciaBLAcumulados[5]);
                        rd.SetParameterValue("arrTendenciaBLAcumulados6", lstTendenciaBLAcumulados[6]);
                        rd.SetParameterValue("arrTendenciaBLAcumulados7", lstTendenciaBLAcumulados[7]);
                        rd.SetParameterValue("arrTendenciaBLAcumulados8", lstTendenciaBLAcumulados[8]);
                        rd.SetParameterValue("arrTendenciaBLAcumulados9", lstTendenciaBLAcumulados[9]);
                        rd.SetParameterValue("arrTendenciaBLAcumulados10", lstTendenciaBLAcumulados[10]);
                        rd.SetParameterValue("arrTendenciaBLAcumulados11", lstTendenciaBLAcumulados[11]);
                        #endregion

                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.rptEstadoResultados:
                    {
                        setMedidasReporte("VC");

                        var informacionCondiguracion = Session["rptEstadoResultados"] as EstadoResultadoConfiguracionDTO;

                        var informacionReporte = new List<EstadoFinancieroMensualDTO>();
                        var informacionReporte2 = new List<EstadoFinancieroConsolidado2DTO>();
                        var informacionReporte3 = new List<EstadoFinancieroConsolidado3DTO>();
                        var informacionReporte4 = new List<EstadoFinancieroConsolidado4DTO>();

                        var totalizList = new List<string>() { "TOTAL AVANCE", "UTILIDAD (PERDIDA) BRUTA", "UTILIDAD (PERDIDA) DE OPERACIÓN", "UTILIDAD (PERDIDA) DESPUÉS FINANC",
                        "UTILIDAD (PERDIDA) NETA CONTABLE","UTILIDAD DESPUÉS DE IMPUESTOS", "TOTAL DE INGRESOS", "UTILIDAD (PERDIDA) DESPUES FINANC", "UTILIDAD DESPUES DE IMPUESTOS"};

                        switch (informacionCondiguracion.listaEmpresas.Count)
                        {
                            case 1:
                                {
                                    #region CASE 1
                                    rd = new rptEstadoFinancieroMensualDTO();



                                    foreach (var item in informacionCondiguracion.listaDatos)
                                    {
                                        var info = new EstadoFinancieroMensualDTO();
                                        info.concepto = item["concepto"] as string;
                                        if (info.concepto.StartsWith("<"))
                                        {
                                            Match regMatch = Regex.Match(info.concepto, ">.+<");
                                            info.concepto = regMatch.Value.Replace("<", string.Empty).Replace(">", string.Empty);
                                        }
                                        info.montoMes = (decimal)item["columna1"];
                                        info.porcentaje = (decimal)item["columna2"];
                                        info.montoMesAnterior = (decimal)item["columna3"];
                                        info.porcentajeMesAnterior = (decimal)item["columna4"];
                                        info.variaciones = (decimal)item["columna5"];
                                        info.montoAcumulado = (decimal)item["columna6"];
                                        info.porcentajeAcumulado = (decimal)item["columna7"];
                                        info.montoAcumuladoAnterior = (decimal)item["columna8"];
                                        info.porcentajeAcumuladoAnterior = (decimal)item["columna9"];
                                        info.variacionesAcumulado = (decimal)item["columna10"];

                                        if (totalizList.Contains(info.concepto))
                                        {
                                            info.esTotalizador = true;
                                        }
                                        else
                                        {
                                            info.esTotalizador = false;
                                        }


                                        informacionReporte.Add(info);
                                    }

                                    rd.Database.Tables[0].SetDataSource(getInfoEnca("reporte", ""));
                                    rd.Database.Tables[1].SetDataSource(informacionReporte);

                                    rd.SetParameterValue("fechaConsulta", informacionCondiguracion.fecha.ToString("MMMM yyyy"));
                                    rd.SetParameterValue("fechaAnterior", informacionCondiguracion.fecha.AddYears(-1).ToString("MMMM yyyy"));
                                    rd.SetParameterValue("fechaAcumulado", informacionCondiguracion.fecha.ToString("MMMM yyyy"));
                                    rd.SetParameterValue("fechaAcumuladoAnterior", informacionCondiguracion.fecha.AddYears(-1).ToString("MMMM yyyy"));

                                    Session.Add("reporte", rd);
                                    #endregion
                                }
                                break;

                            case 2:
                                {
                                    #region CASE 2

                                    rd = new rptEstadoFinancieroConsolidado2doDTO();

                                    foreach (var item in informacionCondiguracion.listaDatos)
                                    {
                                        var info = new EstadoFinancieroConsolidado2DTO();
                                        info.concepto = item["concepto"] as string;
                                        if (info.concepto.StartsWith("<"))
                                        {
                                            Match regMatch = Regex.Match(info.concepto, ">.+<");
                                            info.concepto = regMatch.Value.Replace("<", string.Empty).Replace(">", string.Empty);
                                        }
                                        info.montoEmp1 = (decimal)item["columna1"];
                                        info.porcentajeEmp1 = (decimal)item["columna2"];
                                        info.montoEmp2 = (decimal)item["columna3"];
                                        info.porcentajeEmp2 = (decimal)item["columna4"];
                                        info.montoConsolidado = (decimal)item["columna5"];
                                        info.porcentajeConsolidado = (decimal)item["columna6"];
                                        info.montoMes = (decimal)item["columna7"];
                                        info.porcentajeMes = (decimal)item["columna8"];

                                        if (totalizList.Contains(info.concepto))
                                        {
                                            info.esTotalizador = true;
                                        }
                                        else
                                        {
                                            info.esTotalizador = false;
                                        }


                                        informacionReporte2.Add(info);
                                    }

                                    rd.Database.Tables[1].SetDataSource(getInfoEnca("reporte", ""));
                                    rd.Database.Tables[0].SetDataSource(informacionReporte2);

                                    rd.SetParameterValue("empresa1", informacionCondiguracion.listaEmpresas[0].GetDescription());
                                    rd.SetParameterValue("empresa2", informacionCondiguracion.listaEmpresas[1].GetDescription());
                                    rd.SetParameterValue("mes1", informacionCondiguracion.fecha.ToString("MMMM yyyy"));

                                    Session.Add("reporte", rd);
                                    #endregion
                                }
                                break;

                            case 3:
                                {
                                    #region CASE 3
                                    rd = new rptEstadoFinancieroConsolidado3DTO();

                                    foreach (var item in informacionCondiguracion.listaDatos)
                                    {
                                        var info = new EstadoFinancieroConsolidado3DTO();
                                        info.concepto = item["concepto"] as string;
                                        if (info.concepto.StartsWith("<"))
                                        {
                                            Match regMatch = Regex.Match(info.concepto, ">.+<");
                                            info.concepto = regMatch.Value.Replace("<", string.Empty).Replace(">", string.Empty);
                                        }
                                        info.montoEmp1 = (decimal)item["columna1"];
                                        info.porcentajeEmp1 = (decimal)item["columna2"];
                                        info.montoEmp2 = (decimal)item["columna3"];
                                        info.porcentajeEmp2 = (decimal)item["columna4"];
                                        info.montoEmp3 = (decimal)item["columna5"];
                                        info.porcentajeEmp3 = (decimal)item["columna6"];
                                        info.montoConsolidado = (decimal)item["columna7"];
                                        info.porcentajeConsolidado = (decimal)item["columna8"];
                                        info.montoMes = (decimal)item["columna9"];
                                        info.porcentajeMes = (decimal)item["columna10"];

                                        if (totalizList.Contains(info.concepto))
                                        {
                                            info.esTotalizador = true;
                                        }
                                        else
                                        {
                                            info.esTotalizador = false;
                                        }


                                        informacionReporte3.Add(info);
                                    }

                                    rd.Database.Tables[0].SetDataSource(getInfoEnca("reporte", ""));
                                    rd.Database.Tables[1].SetDataSource(informacionReporte3);

                                    rd.SetParameterValue("empresa1", informacionCondiguracion.listaEmpresas[0].GetDescription());
                                    rd.SetParameterValue("empresa2", informacionCondiguracion.listaEmpresas[1].GetDescription());
                                    rd.SetParameterValue("empresa3", informacionCondiguracion.listaEmpresas[2].GetDescription());
                                    rd.SetParameterValue("mes1", informacionCondiguracion.fecha.ToString("MMMM yyyy"));

                                    Session.Add("reporte", rd);
                                    #endregion
                                }
                                break;
                            case 4:
                                {
                                    #region CASE 4
                                    rd = new rptEstadoFinancieroConsolidado4DTO();

                                    foreach (var item in informacionCondiguracion.listaDatos)
                                    {
                                        var info = new EstadoFinancieroConsolidado4DTO();
                                        info.concepto = item["concepto"] as string;
                                        if (info.concepto.StartsWith("<"))
                                        {
                                            Match regMatch = Regex.Match(info.concepto, ">.+<");
                                            info.concepto = regMatch.Value.Replace("<", string.Empty).Replace(">", string.Empty);
                                        }
                                        info.montoEmp1 = (decimal)item["columna1"];
                                        info.porcentajeEmp1 = (decimal)item["columna2"];
                                        info.montoEmp2 = (decimal)item["columna3"];
                                        info.porcentajeEmp2 = (decimal)item["columna4"];
                                        info.montoEmp3 = (decimal)item["columna5"];
                                        info.porcentajeEmp3 = (decimal)item["columna6"];
                                        info.montoEmp4 = (decimal)item["columna7"];
                                        info.porcentajeEmp4 = (decimal)item["columna8"];
                                        info.montoConsolidado = (decimal)item["columna9"];
                                        info.porcentajeConsolidado = (decimal)item["columna10"];
                                        info.montoMes = (decimal)item["columna11"];
                                        info.porcentajeMes = (decimal)item["columna12"];

                                        if (totalizList.Contains(info.concepto))
                                        {
                                            info.esTotalizador = true;
                                        }
                                        else
                                        {
                                            info.esTotalizador = false;
                                        }


                                        informacionReporte4.Add(info);
                                    }

                                    rd.Database.Tables[1].SetDataSource(getInfoEnca("reporte", ""));
                                    rd.Database.Tables[0].SetDataSource(informacionReporte4);

                                    rd.SetParameterValue("empresa1", informacionCondiguracion.listaEmpresas[0].GetDescription());
                                    rd.SetParameterValue("empresa2", informacionCondiguracion.listaEmpresas[1].GetDescription());
                                    rd.SetParameterValue("empresa3", informacionCondiguracion.listaEmpresas[2].GetDescription());
                                    rd.SetParameterValue("empresa4", informacionCondiguracion.listaEmpresas[3].GetDescription());
                                    rd.SetParameterValue("mes1", informacionCondiguracion.fecha.ToString("MMMM yyyy"));

                                    Session.Add("reporte", rd);
                                    #endregion
                                }
                                break;
                            default:
                                break;
                        }
                        break;
                    }
                case ReportesEnum.estadoPosicionFinanciero:
                    setMedidasReporte("VC");

                    #region SE OBTIENE VARIBLES DE SESION
                    List<EmpresaEnum> listaEmpresas = new List<EmpresaEnum>();
                    List<string> listaCC = new List<string>();
                    string fechaAnioMes = string.Empty;
                    DateTime fechaAnioMesDT;

                    if (listaEmpresas != null)
                        listaEmpresas = Session["listaEmpresas"] as List<EmpresaEnum>;

                    if (listaCC != null)
                        listaCC = Session["listaCC"] as List<string>;

                    fechaAnioMes = Session["fechaAnioMes"].ToString();
                    fechaAnioMesDT = Convert.ToDateTime(fechaAnioMes);

                    #endregion

                    EstadosFinancierosService estadosFinancierosService = new EstadosFinancierosService(new EstadosFinancierosDAO());
                    var estadoFinancieroActivo = estadosFinancierosService.CalcularBalanceGeneral(listaEmpresas, fechaAnioMesDT, listaCC, Core.Enum.Contabilidad.EstadoFinanciero.TipoBalanceEnum.ACTIVO)["data"] as List<BalanceDTO>;
                    var estadoFinancieroPasivo = estadosFinancierosService.CalcularBalanceGeneral(listaEmpresas, fechaAnioMesDT, listaCC, Core.Enum.Contabilidad.EstadoFinanciero.TipoBalanceEnum.PASIVO)["data"] as List<BalanceDTO>;

                    rd = new rptEstadoPosicionFinancieroDTO();

                    var activo1 = estadoFinancieroActivo.Select(x => new
                    {
                        concepto = x.concepto,
                        corte = x.corte,
                        corteAnterior = x.corteAnterior,
                        variacion = x.variacion,
                        dolares = x.dolares,
                        renglonSubTitulo = x.renglonSubTitulo,
                        renglonGrupo = x.renglonGrupo,
                        renglonEnlace = x.renglonEnlace,
                        sumarTotal = x.sumarTotal
                    }).ToList();

                    var pasivo1 = estadoFinancieroPasivo.Select(x => new
                    {
                        concepto = x.concepto,
                        corte = x.corte,
                        corteAnterior = x.corteAnterior,
                        variacion = x.variacion,
                        dolares = x.dolares,
                        renglonSubTitulo = x.renglonSubTitulo,
                        renglonGrupo = x.renglonGrupo,
                        renglonEnlace = x.renglonEnlace,
                        sumarTotal = x.sumarTotal
                    }).ToList();


                    rd.Database.Tables[0].SetDataSource(getInfoEnca("reporte", ""));
                    rd.Database.Tables[1].SetDataSource(activo1);
                    rd.Database.Tables[2].SetDataSource(pasivo1);

                    rd.SetParameterValue("mes1", fechaAnioMesDT.ToString("MMMM yyyy"));
                    //var resultado = 
                    Session.Add("reporte", rd);
                    break;

                case ReportesEnum.historialClinico:
                    {
                        //http://localhost:3676/Reportes/Vista.aspx?idReporte=244
                        setMedidasReporte("VC");

                        SaludOcupacionalService saludOcupacionalService = new SaludOcupacionalService(new SaludOcupacionalDAO());
                #endregion

                        rd = new rptHistorialClinico();

                        int idHC = Convert.ToInt32(Request.QueryString["id"]);

                        var historialData = saludOcupacionalService.GetReportDataHistorialClinico(idHC);
                        List<HistorialClinicoStrDTO> historialDataLst = new List<HistorialClinicoStrDTO>();
                        historialDataLst.Add(historialData["objHC"] as HistorialClinicoStrDTO);

                        #region IMAGENES

                        var imagenesHC = historialData["imagesHC"] as List<ArchivoDTO>;

                        List<ArchivoDTO> imgPerfil = new List<ArchivoDTO>();
                        List<ArchivoDTO> imgAudiometria = new List<ArchivoDTO>();
                        List<ArchivoDTO> imgElectrocardiograma = new List<ArchivoDTO>();
                        List<ArchivoDTO> imgEspirometria = new List<ArchivoDTO>();
                        List<ArchivoDTO> imgDocumentosAdjuntos = new List<ArchivoDTO>();
                        List<ArchivoDTO> imgRadiografia = new List<ArchivoDTO>();
                        List<ArchivoDTO> imgLaboratorio = new List<ArchivoDTO>();

                        if (imagenesHC != null)
                        {
                            if (imagenesHC.Where(e => e.tipoArchivo == (int)TipoArchivoEnum.imagenPersona) != null)
                            {
                                imgPerfil = imagenesHC.Where(e => e.tipoArchivo == (int)TipoArchivoEnum.imagenPersona).ToList();
                            }

                            imgAudiometria = imagenesHC.Where(e => e.tipoArchivo == (int)TipoArchivoEnum.audiometria).ToList();
                            imgElectrocardiograma = imagenesHC.Where(e => e.tipoArchivo == (int)TipoArchivoEnum.electrocardiograma).ToList();
                            imgEspirometria = imagenesHC.Where(e => e.tipoArchivo == (int)TipoArchivoEnum.espirometria).ToList();
                            imgDocumentosAdjuntos = imagenesHC.Where(e => e.tipoArchivo == (int)TipoArchivoEnum.documentosAdjuntos).ToList();
                            imgRadiografia = imagenesHC.Where(e => e.tipoArchivo == (int)TipoArchivoEnum.radiografia).ToList();
                            imgLaboratorio = imagenesHC.Where(e => e.tipoArchivo == (int)TipoArchivoEnum.laboratorio).ToList();
                        }

                        byte[] image = null;

                        #region Perfil
                        if (imgPerfil != null)
                        {
                            if (imgPerfil.Count() > 0)
                            {
                                foreach (var img in imgPerfil)
                                {
                                    image = File.ReadAllBytes(img.rutaArchivo);
                                    //imagenEvidencia = GlobalUtils.FixedSize(File.ReadAllBytes(x.comentario), 100, 100);
                                }
                            }
                        }

                        var perfilObj = new
                        {
                            imgPerfil = image
                        };
                        #endregion

                        #region Audiometria
                        List<byte[]> audiometriaLst = new List<byte[]>() { };
                        if (imgAudiometria != null)
                        {
                            if (imgAudiometria.Count() > 0)
                            {
                                foreach (var img in imgAudiometria)
                                {
                                    image = File.ReadAllBytes(img.rutaArchivo);
                                    audiometriaLst.Add(image);
                                }
                            }
                        }
                        #endregion

                        #region Electrocardiograma
                        List<byte[]> electroLst = new List<byte[]>() { };
                        if (imgElectrocardiograma != null)
                        {
                            if (imgElectrocardiograma.Count() > 0)
                            {
                                foreach (var img in imgElectrocardiograma)
                                {
                                    image = File.ReadAllBytes(img.rutaArchivo);
                                    electroLst.Add(image);
                                }
                            }
                        }

                        #endregion

                        #region Espirometria
                        List<byte[]> espirometriaLst = new List<byte[]>() { };
                        if (imgEspirometria != null)
                        {
                            if (imgEspirometria.Count() > 0)
                            {
                                foreach (var img in imgEspirometria)
                                {
                                    image = File.ReadAllBytes(img.rutaArchivo);
                                    espirometriaLst.Add(image);
                                }
                            }
                        }
                        #endregion

                        #region Documentos
                        List<byte[]> docusLst = new List<byte[]>() { };
                        if (imgDocumentosAdjuntos != null)
                        {
                            if (imgDocumentosAdjuntos.Count() > 0)
                            {
                                foreach (var img in imgDocumentosAdjuntos)
                                {
                                    image = File.ReadAllBytes(img.rutaArchivo);
                                    docusLst.Add(image);
                                }
                            }
                        }
                        #endregion

                        #region Radiografias
                        List<byte[]> radiografiaLst = new List<byte[]>() { };
                        if (imgRadiografia != null)
                        {
                            if (imgRadiografia.Count() > 0)
                            {
                                foreach (var img in imgRadiografia)
                                {
                                    image = File.ReadAllBytes(img.rutaArchivo);
                                    radiografiaLst.Add(image);
                                }
                            }
                        }

                        #endregion

                        #region Laboratorio
                        List<byte[]> laboratorioLst = new List<byte[]>() { };

                        if (imgLaboratorio != null)
                        {
                            if (imgLaboratorio.Count() > 0)
                            {
                                foreach (var img in imgLaboratorio)
                                {
                                    image = File.ReadAllBytes(img.rutaArchivo);
                                    laboratorioLst.Add(image);
                                }
                            }
                        }

                        #endregion

                        //imagenEvidencia = GlobalUtils.FixedSize(File.ReadAllBytes(x.comentario), 100, 100)


                        var audioObj = audiometriaLst.Select(e => new { img = e });//asdf
                        var electroObj = electroLst.Select(e => new { img = e });
                        var espiroObj = espirometriaLst.Select(e => new { img = e });
                        var docusObj = docusLst.Select(e => new { img = e });
                        var readioObj = radiografiaLst.Select(e => new { img = e });
                        var labObj = laboratorioLst.Select(e => new { img = e });//asdf

                        #endregion

                        rd.Database.Tables[0].SetDataSource(audioObj);
                        rd.Database.Tables[1].SetDataSource(electroObj);
                        rd.Database.Tables[2].SetDataSource(espiroObj);
                        rd.Database.Tables[3].SetDataSource(historialDataLst);
                        rd.Database.Tables[4].SetDataSource(new[] { perfilObj });
                        rd.Database.Tables[5].SetDataSource(docusObj);
                        rd.Database.Tables[6].SetDataSource(readioObj);
                        rd.Database.Tables[7].SetDataSource(labObj);
                        rd.Database.Tables[8].SetDataSource(getInfoEnca("reporte", ""));

                        Session.Add("reporte", rd);

                    }
                    break;

                #region MEDICO
                case ReportesEnum.SOCertificado:
                    {
                        setMedidasReporte("VC");

                        SaludOcupacionalService saludOcupacionalService = new SaludOcupacionalService(new SaludOcupacionalDAO());

                        rd = new rptCertificado();

                        List<CertificadoDTO> certs = new List<CertificadoDTO>() { Session["certificadoEmpleado"] as CertificadoDTO };

                        rd.Database.Tables[0].SetDataSource(certs);
                        rd.Database.Tables[1].SetDataSource(getInfoEnca("reporte", ""));

                        Session.Add("reporte", rd);

                    }
                    break;
                case ReportesEnum.atencionMedica:
                    {
                        setMedidasReporte("HC");

                        SaludOcupacionalService saludOcupacionalService = new SaludOcupacionalService(new SaludOcupacionalDAO());
                        var atencionMedica_id = Convert.ToInt32(Request.QueryString["atencionMedica_id"]);
                        var atencionMedicaReporte = saludOcupacionalService.GetAtencionMedicaReporte(atencionMedica_id);

                        rd = new rptAtencionMedica();

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Atención Médica", ""));
                        rd.Database.Tables[1].SetDataSource(atencionMedicaReporte.revisiones);

                        rd.SetParameterValue("nombreEmpleado", atencionMedicaReporte.nombreEmpleado);
                        rd.SetParameterValue("fechaIngreso", atencionMedicaReporte.fechaIngreso);
                        rd.SetParameterValue("puesto", atencionMedicaReporte.puesto);
                        rd.SetParameterValue("edad", atencionMedicaReporte.edad);
                        rd.SetParameterValue("supervisor", atencionMedicaReporte.supervisor);
                        rd.SetParameterValue("fechaAtencionMedica", atencionMedicaReporte.fechaAtencionMedica);
                        rd.SetParameterValue("area", atencionMedicaReporte.area);
                        rd.SetParameterValue("tipo", atencionMedicaReporte.tipo);

                        Session.Add("reporte", rd);
                    }
                    break;
                case ReportesEnum.rptMatrizDeRiesgo:
                    setMedidasReporte("VC");
                    rd = new rptMatrizDeRiesgo();

                    try
                    {
                        var idMatrizDeRiesgo = Convert.ToInt32(Request.QueryString["idMatrizDeRiesgo"]);
                        var filtrarCerrado = Convert.ToBoolean(Request.QueryString["filterCerrado"]);
                        var filtrarAbiero = Convert.ToBoolean(Request.QueryString["filterAbierto"]);
                        var filtrarProceso = Convert.ToBoolean(Request.QueryString["filterProceso"]);

                        List<int> lstFilter = new List<int>() { };

                        if (filtrarCerrado)
                        {
                            lstFilter.Add(0);
                        }
                        if (filtrarAbiero)
                        {
                            lstFilter.Add(1);
                        }
                        if (filtrarProceso)
                        {
                            lstFilter.Add(2);
                        }

                        var objMatrizDeRiesgo = getMatrizDeRiesgoFactoryService.getMatrizDeRiesgoService().obtenerMatrizesDeRiesgoxID(idMatrizDeRiesgo, lstFilter);

                        //rd.Database.Tables[0].SetDataSource("");
                        var Encabezadod = getInfoEncaCplan2("sol-industriales", "Control Obra");

                        List<MatrizPrinDTO> matrizDesc = new List<MatrizPrinDTO>();
                        matrizDesc.Add(objMatrizDeRiesgo);

                        List<tblCO_MR_ImpractosSobreObjetivosDelProyecto> matrizVals = objMatrizDeRiesgo.lstImpacto.ToList();
                        List<string> matrizRespuestaDesc = objMatrizDeRiesgo.lstMatrizDeRiesgo.Select(e => e.desctipoDeRespuesta).ToList() ?? new List<string>();
                        var respuestasLst = getMatrizDeRiesgoFactoryService.getMatrizDeRiesgoService().lstMrTiposDeRespuestas();

                        List<TipoRespuestaDTO> matrizRespuestas = respuestasLst.Where(e => matrizRespuestaDesc.Contains(e.descripcion)).ToList() ?? new List<TipoRespuestaDTO>();
                        List<ReporteMatriz> matrizColorValues = new List<ReporteMatriz>();

                        string[] matriz1 = new string[25];
                        int inpBaja = matrizVals[0].baja;
                        int inpBajaFin = matrizVals[0].bajaFin;
                        int inpMedia = matrizVals[1].baja;
                        int inpMediaFin = matrizVals[1].bajaFin;
                        int inpAlta = matrizVals[2].baja;
                        int inpAltaFin = matrizVals[2].bajaFin;

                        decimal porcenBajaFin = (decimal)inpBajaFin / inpAltaFin * 100;
                        decimal porcenMedia = (decimal)inpMedia / inpAltaFin * 100;
                        decimal porcenMediaFin = (decimal)inpMediaFin / inpAltaFin * 100;
                        decimal porcenAlta = (decimal)inpAlta / inpAltaFin * 100;


                        int ii = 0;
                        for (int i = 0; i < 5; i++)
                        {
                            for (int j = 0; j < 5; j++)
                            {
                                int suma = (5 - i) * (1 + j);
                                if (inpBaja <= suma && suma <= inpBajaFin)
                                {
                                    matriz1[ii] = "g";


                                }
                                else if (inpMedia <= suma && suma <= inpMediaFin)
                                {
                                    matriz1[ii] = "y";

                                }
                                else if (inpAlta <= suma && suma <= inpAltaFin)
                                {
                                    matriz1[ii] = "r";

                                }
                                else
                                {
                                    matriz1[ii] = "w";
                                }

                                ii++;
                            }
                        }

                        matrizColorValues.Add(new ReporteMatriz
                        {

                            Vals1 = matriz1[0],
                            Vals2 = matriz1[1],
                            Vals3 = matriz1[2],
                            Vals4 = matriz1[3],
                            Vals5 = matriz1[4],
                            Vals6 = matriz1[5],
                            Vals7 = matriz1[6],
                            Vals8 = matriz1[7],
                            Vals9 = matriz1[8],
                            Vals10 = matriz1[9],
                            Vals11 = matriz1[10],
                            Vals12 = matriz1[11],
                            Vals13 = matriz1[12],
                            Vals14 = matriz1[13],
                            Vals15 = matriz1[14],
                            Vals16 = matriz1[15],
                            Vals17 = matriz1[16],
                            Vals18 = matriz1[17],
                            Vals19 = matriz1[18],
                            Vals20 = matriz1[19],
                            Vals21 = matriz1[20],
                            Vals22 = matriz1[21],
                            Vals23 = matriz1[22],
                            Vals24 = matriz1[23],
                            Vals25 = matriz1[24],

                        });

                        if (objMatrizDeRiesgo.lstMatrizDeRiesgo != null)
                        {
                            foreach (var item in objMatrizDeRiesgo.lstMatrizDeRiesgo)
                            {
                                item.costoTiempoCalidad = item.costoTiempoCalidad == "1" ? "Costo" : item.costoTiempoCalidad == "2" ? "Tiempo" : "Calidad";
                                item.abiertoProcesoCerrado = item.abiertoProcesoCerrado == "1" ? "Abierto" : item.abiertoProcesoCerrado == "2" ? "Proceso" : "Cerrado";
                            }

                        }


                        rd.Database.Tables[0].SetDataSource(objMatrizDeRiesgo.lstMatrizDeRiesgo);
                        //rd.Database.Tables[0].SetDataSource(objMatrizDeRiesgo.lstMatrizDeRiesgo);
                        rd.Database.Tables[1].SetDataSource(Encabezadod);
                        rd.Database.Tables[2].SetDataSource(matrizVals);
                        rd.Database.Tables[3].SetDataSource(matrizColorValues);
                        rd.Database.Tables[5].SetDataSource(matrizRespuestas);
                        rd.Database.Tables[4].SetDataSource(matrizDesc);

                        //rd.Database.Tables[0].SetDataSource(objMatrizDeRiesgo.lstMatrizDeRiesgo);
                        ////rd.Database.Tables[0].SetDataSource(objMatrizDeRiesgo.lstMatrizDeRiesgo);
                        //rd.Database.Tables[1].SetDataSource(Encabezadod);

                        rd.SetParameterValue("proyecto", objMatrizDeRiesgo.nombreDelProyecto);
                        rd.SetParameterValue("fechaElaboracion", objMatrizDeRiesgo.fechaElaboracion.ToShortDateString());
                        rd.SetParameterValue("inpBaja", inpBaja);
                        rd.SetParameterValue("inpBajaFin", inpBajaFin);
                        rd.SetParameterValue("inpMedia", inpMedia);
                        rd.SetParameterValue("inpMediaFin", inpMediaFin);
                        rd.SetParameterValue("inpAlta", inpAlta);
                        rd.SetParameterValue("inpAltaFin", inpAltaFin);
                        rd.SetParameterValue("porcenBajaFin", porcenBajaFin);
                        rd.SetParameterValue("porcenMedia", porcenMedia);
                        rd.SetParameterValue("porcenMediaFin", porcenMediaFin);
                        rd.SetParameterValue("porcenAlta", porcenAlta);
                    }
                    catch (Exception ex)
                    {

                        throw;
                    }

                    Session.Add("reporte", rd);
                    break;
                case ReportesEnum.rptSolicitudCheque1:
                    try
                    {
                        setMedidasReporte("HC");


                        var year = Int32.Parse(Request.QueryString["year"]);
                        var periodo = Int32.Parse(Request.QueryString["periodo"]);
                        var tipoNomina = Int32.Parse(Request.QueryString["tipoNomina"]);
                        var banco = Int32.Parse(Request.QueryString["banco"]);
                        var data = nominaFactoryService.getNominaService().GetSolicitudChequeReporte(year, periodo, tipoNomina, banco);

                        if (tipoNomina == 10) rd = new rptSolicitudChequeAguinaldo();
                        else rd = new rptSolicitudCheque();

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("", ""));
                        rd.Database.Tables[1].SetDataSource(data.tabla);

                        rd.SetParameterValue("cuenta", data.cuenta);
                        rd.SetParameterValue("concepto", data.concepto);
                        rd.SetParameterValue("importe", data.importe);
                        rd.SetParameterValue("cuentaBanco", data.cuentaBanco);
                        rd.SetParameterValue("totalCantidadEmpleados", data.totalCantidadEmpleados);
                        rd.SetParameterValue("totalNomina", data.totalNomina);
                        rd.SetParameterValue("fondoAhorro", data.fondoAhorro);
                        rd.SetParameterValue("depositoOneCard", data.depositoOneCard);
                        rd.SetParameterValue("solicita1", data.solicita1);
                        rd.SetParameterValue("solicita2", data.solicita2);
                        rd.SetParameterValue("autoriza", data.autoriza);
                        rd.SetParameterValue("vobo", data.vobo);
                        rd.SetParameterValue("cuentaOcsi", data.cuentaOCSI);
                        rd.SetParameterValue("firmaSolicita1", data.firmaSolicita1);
                        rd.SetParameterValue("firmaSolicita2", data.firmaSolicita2);
                        rd.SetParameterValue("firmaAutoriza", data.firmaAutoriza);
                        rd.SetParameterValue("firmaVobo", data.firmaVobo);
                        rd.SetParameterValue("nombreEmpresa", data.nombreEmpresa);
                        rd.SetParameterValue("tipoBanco", data.tipoBanco);

                        Session.Add("reporte", rd);
                    }
                    catch (Exception)
                    {

                    }

                    break;
                case ReportesEnum.rptSolicitudCheque2:
                    try
                    {
                        setMedidasReporte("HC");

                        var year = Int32.Parse(Request.QueryString["year"]);
                        var periodo = Int32.Parse(Request.QueryString["periodo"]);
                        var tipoNomina = Int32.Parse(Request.QueryString["tipoNomina"]);
                        var banco = Int32.Parse(Request.QueryString["banco"]);
                        var data = nominaFactoryService.getNominaService().GetSolicitudChequeReporte(year, periodo, tipoNomina, banco);

                        if (tipoNomina == 10) rd = new rptSolicitudChequeAguinaldo();
                        else rd = new rptSolicitudCheque();

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("", ""));
                        rd.Database.Tables[1].SetDataSource(data.tabla);

                        rd.SetParameterValue("cuenta", data.cuenta);
                        rd.SetParameterValue("concepto", data.concepto);
                        rd.SetParameterValue("importe", data.importe);
                        rd.SetParameterValue("cuentaBanco", data.cuentaBanco);
                        rd.SetParameterValue("totalCantidadEmpleados", data.totalCantidadEmpleados);
                        rd.SetParameterValue("totalNomina", data.totalNomina);
                        rd.SetParameterValue("fondoAhorro", data.fondoAhorro);
                        rd.SetParameterValue("depositoOneCard", data.depositoOneCard);
                        rd.SetParameterValue("solicita1", data.solicita1);
                        rd.SetParameterValue("solicita2", data.solicita2);
                        rd.SetParameterValue("autoriza", data.autoriza);
                        rd.SetParameterValue("vobo", data.vobo);
                        rd.SetParameterValue("cuentaOcsi", data.cuentaOCSI);
                        rd.SetParameterValue("firmaSolicita1", data.firmaSolicita1);
                        rd.SetParameterValue("firmaSolicita2", data.firmaSolicita2);
                        rd.SetParameterValue("firmaAutoriza", data.firmaAutoriza);
                        rd.SetParameterValue("firmaVobo", data.firmaVobo);
                        rd.SetParameterValue("nombreEmpresa", data.nombreEmpresa);
                        rd.SetParameterValue("tipoBanco", data.tipoBanco);

                        Session.Add("reporte", rd);
                    }
                    catch (Exception)
                    {

                    }

                    break;
                case ReportesEnum.rptSolicitudCheque3:
                    try
                    {
                        setMedidasReporte("HC");

                        var year = Int32.Parse(Request.QueryString["year"]);
                        var periodo = Int32.Parse(Request.QueryString["periodo"]);
                        var tipoNomina = Int32.Parse(Request.QueryString["tipoNomina"]);
                        var banco = Int32.Parse(Request.QueryString["banco"]);
                        var data = nominaFactoryService.getNominaService().GetSolicitudChequeReporte(year, periodo, tipoNomina, banco);

                        if (tipoNomina == 10) rd = new rptSolicitudChequeAguinaldo();
                        else rd = new rptSolicitudCheque();

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("", ""));
                        rd.Database.Tables[1].SetDataSource(data.tabla);

                        rd.SetParameterValue("cuenta", data.cuenta);
                        rd.SetParameterValue("concepto", data.concepto);
                        rd.SetParameterValue("importe", data.importe);
                        rd.SetParameterValue("cuentaBanco", data.cuentaBanco);
                        rd.SetParameterValue("totalCantidadEmpleados", data.totalCantidadEmpleados);
                        rd.SetParameterValue("totalNomina", data.totalNomina);
                        rd.SetParameterValue("fondoAhorro", data.fondoAhorro);
                        rd.SetParameterValue("depositoOneCard", data.depositoOneCard);
                        rd.SetParameterValue("solicita1", data.solicita1);
                        rd.SetParameterValue("solicita2", data.solicita2);
                        rd.SetParameterValue("autoriza", data.autoriza);
                        rd.SetParameterValue("vobo", data.vobo);
                        rd.SetParameterValue("cuentaOcsi", data.cuentaOCSI);
                        rd.SetParameterValue("firmaSolicita1", data.firmaSolicita1);
                        rd.SetParameterValue("firmaSolicita2", data.firmaSolicita2);
                        rd.SetParameterValue("firmaAutoriza", data.firmaAutoriza);
                        rd.SetParameterValue("firmaVobo", data.firmaVobo);
                        rd.SetParameterValue("nombreEmpresa", data.nombreEmpresa);
                        rd.SetParameterValue("tipoBanco", data.tipoBanco);

                        Session.Add("reporte", rd);
                    }
                    catch (Exception)
                    {

                    }

                    break;
                case ReportesEnum.rptSolicitudCheque4:
                    try
                    {
                        setMedidasReporte("HC");

                        var year = Int32.Parse(Request.QueryString["year"]);
                        var periodo = Int32.Parse(Request.QueryString["periodo"]);
                        var tipoNomina = Int32.Parse(Request.QueryString["tipoNomina"]);
                        var banco = Int32.Parse(Request.QueryString["banco"]);
                        var data = nominaFactoryService.getNominaService().GetSolicitudChequeReporte(year, periodo, tipoNomina, banco);

                        if (tipoNomina == 10) rd = new rptSolicitudChequeAguinaldo();
                        else rd = new rptSolicitudCheque();

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("", ""));
                        rd.Database.Tables[1].SetDataSource(data.tabla);

                        rd.SetParameterValue("cuenta", data.cuenta);
                        rd.SetParameterValue("concepto", data.concepto);
                        rd.SetParameterValue("importe", data.importe);
                        rd.SetParameterValue("cuentaBanco", data.cuentaBanco);
                        rd.SetParameterValue("totalCantidadEmpleados", data.totalCantidadEmpleados);
                        rd.SetParameterValue("totalNomina", data.totalNomina);
                        rd.SetParameterValue("fondoAhorro", data.fondoAhorro);
                        rd.SetParameterValue("depositoOneCard", data.depositoOneCard);
                        rd.SetParameterValue("solicita1", data.solicita1);
                        rd.SetParameterValue("solicita2", data.solicita2);
                        rd.SetParameterValue("autoriza", data.autoriza);
                        rd.SetParameterValue("vobo", data.vobo);
                        rd.SetParameterValue("cuentaOcsi", data.cuentaOCSI);
                        rd.SetParameterValue("firmaSolicita1", data.firmaSolicita1);
                        rd.SetParameterValue("firmaSolicita2", data.firmaSolicita2);
                        rd.SetParameterValue("firmaAutoriza", data.firmaAutoriza);
                        rd.SetParameterValue("firmaVobo", data.firmaVobo);
                        rd.SetParameterValue("nombreEmpresa", data.nombreEmpresa);
                        rd.SetParameterValue("tipoBanco", data.tipoBanco);

                        Session.Add("reporte", rd);
                    }
                    catch (Exception)
                    {

                    }

                    break;
                #endregion

                #region EVALUACION DE SUBCONTRATISTAS

                case ReportesEnum.EvaluaciondeSubcontratista:
                    {
                        setMedidasReporte("VC");
                        rd = new rptEvaluacionPrincipal();

                        EvaluacionSubcontratistaService evaluacionSubcontratistaServicio = new EvaluacionSubcontratistaService(new EvaluacionSubcontratistaDAO());

                        var evaluacion_id = Convert.ToInt32(Request.QueryString["evaluacion_id"].ToString());
                        var data = evaluacionSubcontratistaServicio.GetReporteEvaluacionSubcontratista(evaluacion_id);

                        rd.Database.Tables[0].SetDataSource(data.listaRetroalimentacion);
                        rd.Database.Tables[1].SetDataSource(getInfoEncaEvaluacion("sol-industriales", DateTime.Now.ToString(), evaluacion_id));
                        rd.Database.Tables[2].SetDataSource(data.listaElementosRequerimientos);

                        #region Variables "textoCalificacionEvaluacion" y "colorCalificacionEvaluacion"
                        var textoCalificacionEvaluacion = "";
                        var calificacionEvaluacionNumero = Convert.ToDecimal(data.calificacionEvaluacion);
                        var colorCalificacionEvaluacion = 0;

                        if (calificacionEvaluacionNumero >= 0 && calificacionEvaluacionNumero <= 25)
                        {
                            textoCalificacionEvaluacion = "PÉSIMO";
                            colorCalificacionEvaluacion = 1;
                        }
                        else if (calificacionEvaluacionNumero >= 26 && calificacionEvaluacionNumero <= 50)
                        {
                            textoCalificacionEvaluacion = "MALO";
                            colorCalificacionEvaluacion = 2;
                        }
                        else if (calificacionEvaluacionNumero >= 51 && calificacionEvaluacionNumero <= 75)
                        {
                            textoCalificacionEvaluacion = "REGULAR";
                            colorCalificacionEvaluacion = 3;
                        }
                        else if (calificacionEvaluacionNumero >= 76 && calificacionEvaluacionNumero <= 90)
                        {
                            textoCalificacionEvaluacion = "ACEPTABLE";
                            colorCalificacionEvaluacion = 4;
                        }
                        else if (calificacionEvaluacionNumero >= 91 && calificacionEvaluacionNumero <= 100)
                        {
                            textoCalificacionEvaluacion = "EXCELENTE";
                            colorCalificacionEvaluacion = 5;
                        }

                        //Si se reprueban los elementos de Seguridad o Calidad el color de la calificación de la evaluación cambia a "pésimo".
                        if (data.listaElementosRequerimientos.Any(x => x.DivicionesORequerimiento.ToUpper().Contains("SEGURIDAD") || x.DivicionesORequerimiento.ToUpper().Contains("CALIDAD")))
                        {
                            if (data.listaElementosRequerimientos.FirstOrDefault(x => x.DivicionesORequerimiento.ToUpper().Contains("SEGURIDAD") || x.DivicionesORequerimiento.ToUpper().Contains("CALIDAD")).CalificacionNumero <= 75)
                            {
                                colorCalificacionEvaluacion = 1;
                            }
                        }
                        #endregion

                        var notaImportante = @"
                            <b>Nota Importante:</b> Si en cualquiera de los requerimientos evaluados en los elementos<br>
                            clave de <b>Seguridad</b> y <b>Calidad</b>, la calificación es <b>mala</b> o <b>pésima</b> aún cuando el promedio<br>
                            de la calificación final sea <b>regular</b> y/o <b>aceptable</b> la calificación final será <b>pésimo</b>.
                        ";

                        rd.SetParameterValue("fechaEvaluacion", data.fechaEvaluacion);
                        rd.SetParameterValue("periodoEvaluacion", data.periodoEvaluacion);
                        rd.SetParameterValue("rptPeriodoEjecucion", data.periodoEjecucion);
                        rd.SetParameterValue("nombreSubcontratista", data.subcontratistaNombre);
                        rd.SetParameterValue("noContrato", data.numeroContrato);
                        rd.SetParameterValue("ServicioContratado", data.servicioContratado);
                        rd.SetParameterValue("proyecto", data.proyectoNombre);
                        rd.SetParameterValue("evaluador", data.evaluadorNombre);
                        rd.SetParameterValue("textoCalificacionEvaluacion", textoCalificacionEvaluacion);
                        rd.SetParameterValue("total", data.calificacionEvaluacion);
                        rd.SetParameterValue("colorCalificacionEvaluacion", colorCalificacionEvaluacion);
                        rd.SetParameterValue("notaImportante", notaImportante);
                        rd.SetParameterValue("nombreSubcontratista2", data.subcontratistaNombre);
                        rd.SetParameterValue("proyecto2", data.proyectoNombre);
                        rd.SetParameterValue("fechaEvaluacion2", data.fechaEvaluacion);
                        rd.SetParameterValue("periodoEvaluacion2", data.periodoEvaluacion);
                        rd.SetParameterValue("reportePeriodo", data.periodoEjecucion);

                        Session.Add("reporte", rd);
                    }
                    break;



                #endregion

                #region VACACIONES

                case ReportesEnum.rptFechasVacaciones:
                    {
                        #region VACACIONES / AUSENCIAS

                        setMedidasReporte("VC");

                        var meses = new List<string>() { "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre" };

                        VacacionesService vacacionesService = new VacacionesService(new VacacionesDAO());

                        rd = new rptFechasVacaciones();

                        int idVac = Convert.ToInt32(Request.QueryString["idVac"]);
                        int tipoVacaciones = Convert.ToInt32(Request.QueryString["tipoVacaciones"]);
                        bool? esGestion = Convert.ToBoolean(Request.QueryString["esGestion"]);

                        var lstStrDias = new List<object>();

                        var objVacaciones = vacacionesService.GetVacacionesById(new VacacionesDTO() { id = idVac })["items"] as VacacionesDTO;

                        //var objResponsable = vacacionesService.GetResponsables(null, Convert.ToInt32(objVacaciones.claveEmpleado))["data"] as List<Core.DTO.RecursosHumanos.Vacaciones.ResponsableDTO>;

                        var dicSaldos = vacacionesService.GetFechasByClaveEmpleado(Convert.ToInt32(objVacaciones.claveEmpleado), tipoVacaciones, esGestion == true);
                        var diasIniciales = dicSaldos["diasIniciales"] as int?;
                        var lstDias = dicSaldos["items"] as List<tblRH_Vacaciones_Fechas>;
                        var lstSaldos = dicSaldos["lstSaldos"] as List<tblRH_Vacaciones_Saldos>;
                        var saldoDias = (diasIniciales ?? 0) - lstDias.Count();

                        var objSaldoPagadas = lstSaldos.FirstOrDefault(e => e.idVacacionesPagadas == objVacaciones.id);
                        var lstDiasVacacion = lstDias.Where(e => e.vacacionID == objVacaciones.id).ToList();

                        saldoDias = (objVacaciones.numDiasDisponiblesAlDiaCaptura ?? saldoDias) + lstDiasVacacion.Count();
                        //saldoDias = saldoDias + lstDiasVacacion.Count();

                        DateTime? fechaIngreso = vacacionesService.GetFechaIngreso(Convert.ToInt32(objVacaciones.claveEmpleado));

                        var today = DateTime.Now;

                        string diasDisfrutar = "";
                        DateTime? currentDate = null;

                        var min = lstDiasVacacion.Select(e => e.fecha).Min();
                        var max = lstDiasVacacion.Select(e => e.fecha).Max();

                        string descMotivo = "";

                        switch (objVacaciones.tipoVacaciones)
                        {
                            case 0:
                                descMotivo = "Permiso paternidad (PGS)";
                                break;
                            case 1:
                                descMotivo = "Permiso de matrimonio (PGS)";
                                break;
                            case 2:
                                descMotivo = "Permiso sindical (PGS)";
                                break;
                            case 3:
                                descMotivo = "Permiso por fallecimiento (PGS)";
                                break;
                            case 5:
                                descMotivo = "Permiso médico (PGS)";
                                break;
                            case 7:
                                descMotivo = "Vacaciones (VAC)";
                                break;
                            case 8:
                                descMotivo = "Permiso SIN goce de sueldo (PS)";
                                break;
                            case 9:
                                descMotivo = "Permiso de comision de trabajo (CT)";
                                break;
                            case 10:
                                descMotivo = ">Home office (PGS)";
                                break;
                            case 11:
                                descMotivo = ">Tiempo x tiempo (PGS)";
                                break;
                            case 13:
                                descMotivo = "Suspención (SUSP)";
                                break;
                            default:
                                descMotivo = "S/N";
                                break;
                        }

                        var objResponsableCC = objVacaciones.lstAutorizantes.FirstOrDefault(e => e.orden == Core.Enum.RecursosHumanos.Vacaciones.OrdenGestionEnum.RESPONSABLE_CC);
                        var objRespPagadas1 = objVacaciones.lstAutorizantes.FirstOrDefault(e => e.orden == Core.Enum.RecursosHumanos.Vacaciones.OrdenGestionEnum.AUTORIZANTE_PAGADAS_1);

                        var objStrVacaciones = new
                        {
                            nombreEmpleado = objVacaciones.nombreEmpleado,
                            claveEmpleado = objVacaciones.claveEmpleado,
                            ccEmpleado = objVacaciones.cc,
                            //periodoDesc = lstPeriodos.FirstOrDefault(e => e.id == objVacaciones.idPeriodo).periodoDesc,
                            fechaInicial = min != null ? min.Value.ToString("dd/MM/yyyy") : "",
                            fechaFinal = max != null ? max.Value.ToString("dd/MM/yyyy") : "",
                            nombreResponsable = objResponsableCC.nombreCompleto,
                            nombreResponsablePagadas = objRespPagadas1 != null ? objRespPagadas1.nombreCompleto : "  ",
                            //claveResponsable = objVacaciones.claveResponsable,
                            //claveResponsablePagadas = objVacaciones.claveResponsablePagadas ?? "",
                            //CHECAR AQUI RESPONSABLES
                            folio = (objVacaciones.cc == null ? "" : objVacaciones.cc) + "-" + (objVacaciones.claveEmpleado == null ? "" : objVacaciones.claveEmpleado) + "-" + (objVacaciones.consecutivo == null ? "" : objVacaciones.consecutivo.ToString().PadLeft(3, '0'))

                        };

                        string strDias = "";

                        foreach (var item in lstDiasVacacion)
                        {
                            #region NUEVA LISTA DIAS
                            strDias += "[" + item.fecha.Value.ToString("dd/MM/yyyy") + "] ";
                            #endregion

                            lstStrDias.Add(new
                            {

                                fecha = item.fecha.Value.ToString("dddd", new CultureInfo("es-ES")) + ", " + item.fecha.Value.Day + " de " + meses[item.fecha.Value.Month] +
                                " de " + item.fecha.Value.Year,
                                //fecha = item.fecha.Value.ToString("dd/MM/yyyy"),
                                //periodo = objStrVacaciones.periodoDesc

                            });



                            if (currentDate != null)
                            {
                                if (currentDate.Value.Month == item.fecha.Value.Month)
                                {
                                    diasDisfrutar += item.fecha.Value.Day.ToString() + ", ";

                                }
                                else
                                {

                                    diasDisfrutar += "de " + currentDate.Value.ToString("MMMM", new CultureInfo("es-ES")) + " ";
                                    if (currentDate.Value.Year != item.fecha.Value.Year)
                                    {
                                        diasDisfrutar += "del " + currentDate.Value.Year + " ";

                                    }
                                    diasDisfrutar += item.fecha.Value.Day.ToString() + ", ";

                                    if (item.fecha.Value == max)
                                    {
                                        diasDisfrutar += "de " + item.fecha.Value.ToString("MMMM", new CultureInfo("es-ES")) + " ";
                                        diasDisfrutar += "del " + item.fecha.Value.Year + " ";

                                    }
                                }
                            }
                            else
                            {
                                diasDisfrutar += item.fecha.Value.Day.ToString() + ", ";

                            }

                            currentDate = item.fecha.Value;

                        }

                        #region TOTAL DIAS
                        int diasDisponibles = 0;
                        string strDiasDisponibles = "";
                        bool esSaldoMuchos = false;

                        if (objVacaciones.tipoVacaciones == 7)
                        {
                            if (!objVacaciones.esPagadas)
                            {
                                if (min.Value.Month == max.Value.Month)
                                {
                                    diasDisfrutar += "de " + currentDate.Value.ToString("MMMM", new CultureInfo("es-ES")) + " ";

                                }

                                diasDisponibles = saldoDias - lstDiasVacacion.Count();
                                strDiasDisponibles = diasDisponibles.ToString();
                            }
                            else
                            {
                                strDias = (objSaldoPagadas.num_dias * -1) + " dias a Pagar";

                                diasDisponibles = saldoDias;
                                strDiasDisponibles = diasDisponibles.ToString();
                            }

                        }
                        else
                        {
                            int? diasTotales = vacacionesService.GetNumDiasPermisos(objVacaciones.tipoVacaciones.Value);

                            //true: Permisos con saldos finitos | false: permisos con saldos infinitos
                            if (objVacaciones.tipoVacaciones != 2 &&
                                objVacaciones.tipoVacaciones != 4 &&
                                objVacaciones.tipoVacaciones != 8 &&
                                objVacaciones.tipoVacaciones != 9 &&
                                objVacaciones.tipoVacaciones != 10 &&
                                objVacaciones.tipoVacaciones != 11)
                            {
                                diasDisponibles = diasTotales.Value - lstDias.Count();
                                strDiasDisponibles = diasDisponibles.ToString();

                                saldoDias = diasTotales.Value;
                            }
                            else
                            {
                                esSaldoMuchos = true;
                                strDiasDisponibles = "Muchos";

                            }

                            //if (min.Value.Month == max.Value.Month)
                            //{
                            //   //COMENTARIOS PERMISO

                            //}
                        }
                        #endregion

                        rd.Database.Tables[0].SetDataSource(new[] { objStrVacaciones });
                        rd.Database.Tables[1].SetDataSource(getInfoEnca("reporte", ""));
                        rd.Database.Tables[2].SetDataSource(lstStrDias);

                        rd.SetParameterValue("todayDate", objVacaciones.fechaCreacion.Value.ToString("dd/MM/yyyy"));
                        rd.SetParameterValue("fechaIngreso", fechaIngreso.Value.ToString("dd/MM/yyyy"));
                        rd.SetParameterValue("diasDisponibles", (esSaldoMuchos ? strDiasDisponibles : saldoDias.ToString()));
                        rd.SetParameterValue("diasDisfrutar", diasDisfrutar);
                        rd.SetParameterValue("numDiasDisfrutar", (objVacaciones.esPagadas ? (objSaldoPagadas.num_dias * -1).ToString() : lstDiasVacacion.Count().ToString()));
                        rd.SetParameterValue("descMotivo", descMotivo);
                        rd.SetParameterValue("justificacion", objVacaciones.justificacion ?? "  ");
                        rd.SetParameterValue("strDias", strDias);
                        rd.SetParameterValue("firmaElectJefeInmediato", " ");
                        rd.SetParameterValue("firmaElectResponsableCC", (objResponsableCC != null ? (objResponsableCC.firmaElect ?? " ") : " "));
                        rd.SetParameterValue("descPuesto", objVacaciones.descPuesto ?? " ");
                        rd.SetParameterValue("nombreJefeInmediato", objVacaciones.nombreJefeInmediato);
                        rd.SetParameterValue("nombreResponsableCC", objResponsableCC.nombreCompleto);
                        rd.SetParameterValue("ccDesc", objVacaciones.ccDesc.Trim());
                        rd.SetParameterValue("diasRestantes", (esSaldoMuchos ? strDiasDisponibles : diasDisponibles.ToString()));
                        rd.SetParameterValue("nombreCapturo", objVacaciones.nombreCapturo);
                        rd.SetParameterValue("estatusResponsable", (objResponsableCC.estatus == GestionEstatusEnum.AUTORIZADO ? "AUTORIZADO" : " "));
                        rd.SetParameterValue("tipoVacaciones", objVacaciones.tipoVacaciones);
                        rd.SetParameterValue("tituloReporte", (objVacaciones.tipoVacaciones == 7 ? "Control de vacaciones" : "Control de ausencias"));

                        Session.Add("reporte", rd);
                        #endregion
                    }
                    break;

                case ReportesEnum.rptJustificaciones:
                    {
                        #region JUSTIFICACIONES

                        setMedidasReporte("VC");

                        var meses = new List<string>() { "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre" };

                        VacacionesService vacacionesService = new VacacionesService(new VacacionesDAO());

                        rd = new rptFechasJustificaciones();

                        int idVac = Convert.ToInt32(Request.QueryString["idVac"]);

                        var objVacaciones = vacacionesService.GetRetardoById(new RetardosDTO() { id = idVac })["items"] as RetardosDTO;
                        DateTime? fechaIngreso = vacacionesService.GetFechaIngreso(Convert.ToInt32(objVacaciones.claveEmpleado));

                        var objResponsableCC = objVacaciones.lstAutorizantes.FirstOrDefault(e => e.orden == Core.Enum.RecursosHumanos.Vacaciones.OrdenGestionEnum.RESPONSABLE_CC);
                        var objRespPagadas1 = objVacaciones.lstAutorizantes.FirstOrDefault(e => e.orden == Core.Enum.RecursosHumanos.Vacaciones.OrdenGestionEnum.AUTORIZANTE_PAGADAS_1);

                        var objStrVacaciones = new
                        {
                            nombreEmpleado = objVacaciones.nombreEmpleado,
                            claveEmpleado = objVacaciones.claveEmpleado,
                            ccEmpleado = objVacaciones.cc,
                            nombreResponsable = objResponsableCC.nombreCompleto,
                            nombreResponsablePagadas = objRespPagadas1 != null ? objRespPagadas1.nombreCompleto : "  ",
                            folio = (objVacaciones.cc == null ? "" : objVacaciones.cc) + "-" + (objVacaciones.claveEmpleado == null ? "" : objVacaciones.claveEmpleado) + "-" + (objVacaciones.consecutivo == null ? "" : objVacaciones.consecutivo.ToString().PadLeft(3, '0'))
                        };

                        DateTime dateTiempoHorarioLower = new DateTime();
                        DateTime dateTiempoHorarioUpper = new DateTime();

                        if (objVacaciones.tipoRetardo == 1)
                        {
                            dateTiempoHorarioLower = DateTime.Today.Add(objVacaciones.horarioLower.Value);
                            dateTiempoHorarioUpper = DateTime.Today.Add(objVacaciones.horarioUpper.Value);
                        }

                        rd.Database.Tables[0].SetDataSource(new[] { objStrVacaciones });
                        rd.Database.Tables[1].SetDataSource(getInfoEnca("reporte", ""));

                        rd.SetParameterValue("todayDate", objVacaciones.fechaCreacion.Value.ToString("dd/MM/yyyy"));
                        rd.SetParameterValue("fechaIngreso", fechaIngreso.Value.ToString("dd/MM/yyyy"));
                        rd.SetParameterValue("descMotivo", objVacaciones.descMotivo);
                        rd.SetParameterValue("justificacion", objVacaciones.justificacion ?? "  ");
                        rd.SetParameterValue("strDias", " ");
                        rd.SetParameterValue("firmaElectJefeInmediato", " ");
                        rd.SetParameterValue("firmaElectResponsableCC", (objResponsableCC != null ? (objResponsableCC.firmaElect ?? " ") : " "));
                        rd.SetParameterValue("descPuesto", objVacaciones.descPuesto ?? " ");
                        rd.SetParameterValue("nombreJefeInmediato", objVacaciones.nombreJefeInmediato);
                        rd.SetParameterValue("nombreResponsableCC", objResponsableCC.nombreCompleto);
                        rd.SetParameterValue("ccDesc", objVacaciones.ccDesc.Trim());
                        rd.SetParameterValue("nombreCapturo", objVacaciones.nombreCapturo);
                        rd.SetParameterValue("estatusResponsable", (objResponsableCC.estatus == GestionEstatusEnum.AUTORIZADO ? "AUTORIZADO" : " "));
                        rd.SetParameterValue("tituloReporte", "Justificaciones");
                        rd.SetParameterValue("tipoJust", EnumHelper.GetDescription((TipoRetrasoEnum)objVacaciones.tipoRetardo.Value));
                        rd.SetParameterValue("dia", objVacaciones.diaTomado.ToString("dd/MM/yyyy"));
                        rd.SetParameterValue("horario",
                            (objVacaciones.tipoRetardo == 0 ?
                            EnumHelper.GetDescription((RetardoHorarioEnum)objVacaciones.horario.Value) :
                            ("De: " + dateTiempoHorarioLower.ToString("hh:mm tt") + " A: " + dateTiempoHorarioUpper.ToString("hh:mm tt"))));
                        rd.SetParameterValue("tiempoReq", ("Hrs: " + objVacaciones.tiempoRequeridoHrs) + " Min: " + objVacaciones.tiempoRequeridoMin);

                        Session.Add("reporte", rd);
                        #endregion
                    }
                    break;
                #endregion

                #region CTRLPPTALOFICINASCENTRALES

                case ReportesEnum.rptPlanMaestro:
                    {
                        setMedidasReporte("HC");
                        rd = new rptPlanMaestroOfi();
                        int idPlan = Convert.ToInt32(Request.QueryString["idReg"]);
                        int year = Convert.ToInt32(Request.QueryString["year"]);
                        int idCC = Convert.ToInt32(Request.QueryString["cc"]);

                        CtrlPresupuestalOficinasCentralesService ctrlPresupuestoService = new CtrlPresupuestalOficinasCentralesService(new CtrlPresupuestalOficinasCentralesDAO());

                        var lstSurtidito = ctrlPresupuestoService.GetCantAgrupacionesConceptos(new Core.DTO.Administracion.CtrlPptalOficinasCentrales.PlanMaestroDTO() { anio = year, idCC = idCC });

                        Core.DTO.Administracion.CtrlPptalOficinasCentrales.PlanMaestroDTO objPlanMaestro = ctrlPresupuestoService.GetRptPlanMaestro(idPlan)["lstPlanMaestro"] as Core.DTO.Administracion.CtrlPptalOficinasCentrales.PlanMaestroDTO;

                        var empresaActual = vSesiones.sesionEmpresaActual;
                        tblP_CC objCC = ctrlPresupuestoService.GetAreaCuentaByCC(idCC)["items"] as tblP_CC;
                        string areaCuentaCC = empresaActual == 1 ? objPlanMaestro.cc : objCC.areaCuenta + " " + objCC.descripcion;

                        List<string> lstAños = new List<string>() { objPlanMaestro.anio.ToString() };
                        var lstAgrupaciones = lstSurtidito["lstAgrupaciones"] as List<string>;

                        List<repRNAgrupacionDTO> lstDataAgrupaciones = objPlanMaestro.lstAgrupacionesRN.Select(e => new repRNAgrupacionDTO
                        {
                            id = e.id,
                            anio = e.anio,
                            idCC = e.idCC,
                            agrupacion = e.agrupacion,
                            descripcion = e.descripcion,
                        }).ToList();

                        bool esPMMatch = true;
                        decimal totalPM = 0;

                        foreach (var item in objPlanMaestro.lstConceptosRN)
                        {
                            item.esMatch = false;
                        }

                        foreach (var item in lstAgrupaciones)
                        {
                            string[] values = item.Split('|');
                            repRNAgrupacionDTO objDAgrupaciones = lstDataAgrupaciones.FirstOrDefault(e => e.id == Convert.ToInt32(values[0]));

                            objDAgrupaciones.total = Convert.ToDecimal(values[2].Replace("$", string.Empty).Replace(",", string.Empty));
                            objDAgrupaciones.esMatch = Convert.ToBoolean(values[3].Replace("$", string.Empty).Replace(",", string.Empty));

                            if (!objDAgrupaciones.esMatch)
                            {
                                esPMMatch = false;
                            }
                            totalPM += objDAgrupaciones.total;

                            objPlanMaestro.lstConceptosRN.Add(new RNConceptoDTO
                            {
                                id = 0,
                                idRNAgrupacion = objDAgrupaciones.id,
                                descAgrupacion = objDAgrupaciones.descripcion,
                                concepto = "Total",
                                cantidad = objDAgrupaciones.total,
                                esMatch = objDAgrupaciones.esMatch
                            });

                        }

                        List<RNConceptoDTO> lstDataConceptos = objPlanMaestro.lstConceptosRN.OrderBy(e => e.idRNAgrupacion).ToList();

                        rd.Database.Tables[1].SetDataSource(lstDataAgrupaciones.Select(e => new
                        {

                            id = e.id,
                            anio = e.anio,
                            idCC = e.idCC,
                            agrupacion = e.agrupacion,
                            descripcion = e.agrupacion,
                            total = e.total.ToString("C"),
                            esMatch = e.esMatch,

                        }));
                        rd.Database.Tables[2].SetDataSource(lstDataConceptos.Select(e => new
                        {
                            id = e.id,
                            idRNAgrupacion = e.idRNAgrupacion,
                            descAgrupacion = e.descAgrupacion,
                            concepto = e.concepto,
                            cantidad = e.cantidad.ToString("C"),
                            esMatch = e.esMatch

                        }));
                        rd.Database.Tables[3].SetDataSource(objPlanMaestro.lstMedicionesIndicadores.Select(e => new
                        {

                            id = e.id,
                            idPlanMaestro = e.idPlanMaestro,
                            indicador = e.indicador,
                            fuenteDatos = e.fuenteDatos,
                            idUsuarioResponsable = e.usuarioResponsable,
                            meta = e.meta

                        }));
                        rd.Database.Tables[4].SetDataSource(new[]{ new{
                            id = objPlanMaestro.id,
                            anio = objPlanMaestro.anio.ToString(),
                            idCC = objPlanMaestro.idCC,
                            cc = areaCuentaCC,
                            misionArea = objPlanMaestro.misionArea,
                            objEspecificoMedible = objPlanMaestro.objEspecificoMedible,
                            meta = objPlanMaestro.meta,
                            total = totalPM,
                            esMatch = esPMMatch,
                        }});
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("reporte", ""));

                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.rptPlanAccion:
                    {
                        setMedidasReporte("HC");
                        rd = new rptPlanAccion();
                        int idCC = Convert.ToInt32(Request.QueryString["idCC"]);
                        int idMes = Convert.ToInt32(Request.QueryString["idMes"]);
                        int idEmpresa = Convert.ToInt32(Request.QueryString["idEmpresa"]);

                        //var rptPlanAccion = (reporteActoCondicionDTO)Session["rptActoCondicion"];

                        string imagen1Base64 = (string)Session["graficaCumplimientoPresupuestoAcumulado"];
                        byte[] imagen1Bytes = Convert.FromBase64String(imagen1Base64.Split(',')[1]);

                        string imagen2Base64 = (string)Session["graficaCumplimientoPresupuestoMensual"];
                        byte[] imagen2Bytes = Convert.FromBase64String(imagen2Base64.Split(',')[1]);

                        string imagen3Base64 = (string)Session["graficaProyeccion"];
                        byte[] imagen3Bytes = Convert.FromBase64String(imagen3Base64.Split(',')[1]);

                        var imagenes = new List<ImagenesPlanAccionReporteDTO> {new ImagenesPlanAccionReporteDTO
                        {
                            grafica1 = imagen1Bytes,
                            grafica2 = imagen2Bytes,
                            grafica3 = imagen3Bytes
                        }};

                        CtrlPresupuestalOficinasCentralesService ctrlPresupuestoService = new CtrlPresupuestalOficinasCentralesService(new CtrlPresupuestalOficinasCentralesDAO());

                        List<PlanAccionReporteDTO> data = ctrlPresupuestoService.GetPlanAccion(idCC);

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Reporte Plan de Acción", ""));
                        rd.Database.Tables[1].SetDataSource(data);
                        rd.Database.Tables[2].SetDataSource(imagenes);

                        string acumuladoCumplimiento = Session["acumuladoCumplimiento"] as string;
                        string mensualCumplimiento = Session["mensualCumplimiento"] as string;

                        decimal numAcumuladoCumplimiento = Convert.ToDecimal(acumuladoCumplimiento.Trim().Replace("%", string.Empty));
                        decimal numMensualCumplimiento = Convert.ToDecimal(mensualCumplimiento.Trim().Replace("%", string.Empty));

                        rd.SetParameterValue("acumuladoGasto", (string)Session["acumuladoGasto"]);
                        rd.SetParameterValue("acumuladoIngreso", (string)Session["acumuladoIngreso"]);
                        rd.SetParameterValue("acumuladoObjetivo", (string)Session["acumuladoObjetivo"]);
                        rd.SetParameterValue("acumuladoReal", (string)Session["acumuladoReal"]);
                        rd.SetParameterValue("acumuladoCumplimiento", numAcumuladoCumplimiento);
                        rd.SetParameterValue("mensualGasto", (string)Session["mensualGasto"]);
                        rd.SetParameterValue("mensualIngreso", (string)Session["mensualIngreso"]);
                        rd.SetParameterValue("mensualObjetivo", (string)Session["mensualObjetivo"]);
                        rd.SetParameterValue("mensualReal", (string)Session["mensualReal"]);
                        rd.SetParameterValue("mensualCumplimiento", numMensualCumplimiento);

                        // SE OBTIENE NOMBRE DEL CC Y EL MES
                        PlanAccionDTO obj = new PlanAccionDTO();
                        obj.idMes = idMes;
                        obj.idCC = idCC;
                        obj.idEmpresa = idEmpresa;
                        PlanAccionDTO objPlanAccion = ctrlPresupuestoService.GetMesCC(obj);
                        rd.SetParameterValue("MesCC", objPlanAccion.MesCC);

                        Session.Add("reporte", rd);
                        break;
                    }
                case ReportesEnum.rptPlanAccionCC:
                    {
                        setMedidasReporte("HC");
                        rd = new rptPlanAccionCC();
                        int idCC = Convert.ToInt32(Request.QueryString["idCC"]);
                        int idMes = Convert.ToInt32(Request.QueryString["idMes"]);
                        int idEmpresa = Convert.ToInt32(Request.QueryString["idEmpresa"]);

                        //var rptPlanAccion = (reporteActoCondicionDTO)Session["rptActoCondicion"];

                        //string imagen1Base64 = (string)Session["graficaCumplimientoPresupuestoAcumulado"];
                        //byte[] imagen1Bytes = Convert.FromBase64String(imagen1Base64.Split(',')[1]);

                        //string imagen2Base64 = (string)Session["graficaCumplimientoPresupuestoMensual"];
                        //byte[] imagen2Bytes = Convert.FromBase64String(imagen2Base64.Split(',')[1]);

                        //string imagen3Base64 = (string)Session["graficaProyeccion"];
                        //byte[] imagen3Bytes = Convert.FromBase64String(imagen3Base64.Split(',')[1]);

                        //var imagenes = new List<ImagenesPlanAccionReporteDTO> {new ImagenesPlanAccionReporteDTO
                        //{
                        //    grafica1 = imagen1Bytes,
                        //    grafica2 = imagen2Bytes,
                        //    grafica3 = imagen3Bytes
                        //}};

                        CtrlPresupuestalOficinasCentralesService ctrlPresupuestoService = new CtrlPresupuestalOficinasCentralesService(new CtrlPresupuestalOficinasCentralesDAO());

                        List<PlanAccionReporteDTO> data = ctrlPresupuestoService.GetPlanAccion(idCC);

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Reporte Plan de Acción", ""));
                        rd.Database.Tables[1].SetDataSource(data);
                        //rd.Database.Tables[2].SetDataSource(imagenes);

                        //string acumuladoCumplimiento = Session["acumuladoCumplimiento"] as string;
                        //string mensualCumplimiento = Session["mensualCumplimiento"] as string;

                        //decimal numAcumuladoCumplimiento = Convert.ToDecimal(acumuladoCumplimiento.Trim().Replace("%", string.Empty));
                        //decimal numMensualCumplimiento = Convert.ToDecimal(mensualCumplimiento.Trim().Replace("%", string.Empty));

                        //rd.SetParameterValue("acumuladoGasto", (string)Session["acumuladoGasto"]);
                        //rd.SetParameterValue("acumuladoIngreso", (string)Session["acumuladoIngreso"]);
                        //rd.SetParameterValue("acumuladoObjetivo", (string)Session["acumuladoObjetivo"]);
                        //rd.SetParameterValue("acumuladoReal", (string)Session["acumuladoReal"]);
                        //rd.SetParameterValue("acumuladoCumplimiento", numAcumuladoCumplimiento);
                        //rd.SetParameterValue("mensualGasto", (string)Session["mensualGasto"]);
                        //rd.SetParameterValue("mensualIngreso", (string)Session["mensualIngreso"]);
                        //rd.SetParameterValue("mensualObjetivo", (string)Session["mensualObjetivo"]);
                        //rd.SetParameterValue("mensualReal", (string)Session["mensualReal"]);
                        //rd.SetParameterValue("mensualCumplimiento", numMensualCumplimiento);

                        // SE OBTIENE NOMBRE DEL CC Y EL MES
                        PlanAccionDTO obj = new PlanAccionDTO();
                        obj.idMes = idMes;
                        obj.idCC = idCC;
                        obj.idEmpresa = idEmpresa;
                        PlanAccionDTO objPlanAccion = ctrlPresupuestoService.GetMesCC(obj);
                        rd.SetParameterValue("MesCC", objPlanAccion.MesCC);

                        Session.Add("reporte", rd);
                        break;
                    }
                #endregion

                #region CREDENCIAL ALTA EMPLEADOS

                case ReportesEnum.rptCredencialEmpleados:
                    {
                        setMedidasReporte("HC");
                        rd = new rptCredencialEmpleado();

                        #region SE OBTIENE LOS DATOS DEL EMPLEADO PARA MOSTRAR EN LOS DOCUMENTOS
                        int claveEmpleado = Request.QueryString["claveEmpleado"].ParseInt();
                        List<dynamic> objDatosEmpleado = ReclutamientoFS.getReclutamientosService().GetDatosEmpleadoDocumentos(claveEmpleado);

                        Dictionary<string, object> dataAlta = ReclutamientoFS.getReclutamientosService().GetDatosActualizarEmpleado(claveEmpleado, false);
                        List<DatosActualizarEmpleadoDTO> datosAlta = dataAlta["lstDatos"] as List<DatosActualizarEmpleadoDTO>;
                        List<DatosActualizarEmpleadoDTO> datosGrales = dataAlta["lstGenerales"] as List<DatosActualizarEmpleadoDTO>;

                        Dictionary<string, object> dictFotoEmpleado = ReclutamientoFS.getReclutamientosService().GetFotoEmpleado(new ArchivosDTO { claveEmpleado = objDatosEmpleado[0].clave_empleado });
                        var fotoEmpleado = dictFotoEmpleado["objRptFotoEmpleado"] as byte[];
                        #endregion
                        rd.Database.Tables[0].SetDataSource(new List<object>() { new { img = fotoEmpleado } });

                        rd.SetParameterValue("acreditaA", datosAlta[0].ape_paterno + " " + datosAlta[0].ape_materno + " " + datosAlta[0].nombre);
                        rd.SetParameterValue("noEmpleado", objDatosEmpleado[0].clave_empleado);
                        rd.SetParameterValue("RFC", objDatosEmpleado[0].rfc ?? "");
                        rd.SetParameterValue("vigencia", "");
                        rd.SetParameterValue("tipoSangre", datosGrales[0].strTipo_sangre);
                        rd.SetParameterValue("nombreCasoAccidente", objDatosEmpleado[0].en_accidente_nombre);
                        rd.SetParameterValue("telefonoCasoAccidente", objDatosEmpleado[0].en_accidente_telefono);
                        rd.SetParameterValue("direccionCasoAccidente", objDatosEmpleado[0].en_accidente_direccion);
                        rd.SetParameterValue("puesto", datosAlta[0].descripcion);
                        rd.SetParameterValue("empresa", vSesiones.sesionEmpresaActual);
                        rd.SetParameterValue("rfcLabel", "RFC");
                        switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
                        {
                            case EmpresaEnum.Construplan:
                                rd.SetParameterValue("nombreEmpresa", "Sol- industriales sa de cv");
                                rd.SetParameterValue("noIMSS", objDatosEmpleado[0].nss);
                                rd.SetParameterValue("imssLabel", "No. IMSS");
                                rd.SetParameterValue("domicilioEmpresa", "");
                                break;
                         /*   case EmpresaEnum.Arrendadora:
                                rd.SetParameterValue("nombreEmpresa", "");
                                rd.SetParameterValue("noIMSS", objDatosEmpleado[0].nss);
                                rd.SetParameterValue("imssLabel", "No. IMSS");
                                rd.SetParameterValue("domicilioEmpresa", " ");
                                break;
                            case EmpresaEnum.Colombia:
                                rd.SetParameterValue("nombreEmpresa", "CONSTRUPLAN COLOMBIA SUCURSAL");
                                rd.SetParameterValue("noIMSS", objDatosEmpleado[0].cedula_ciudadania);
                                rd.SetParameterValue("imssLabel", "Cédula de Ciudadanía");
                                rd.SetParameterValue("domicilioEmpresa", "Carrera 12 # 98-35 oficina 301 Edificio Chico Empresarial Bogota, Colombia");
                                break;
                            case EmpresaEnum.Peru:
                                rd.SetParameterValue("nombreEmpresa", "GRUPO CONSTRUCCIONES PLANIFICADAS SA DE CV SUCURSAL PERÚ");
                                rd.SetParameterValue("noIMSS", objDatosEmpleado[0].num_dni);
                                rd.SetParameterValue("imssLabel", "Cédula de Ciudadanía");
                                rd.SetParameterValue("domicilioEmpresa", "Av. Caminos del Inca 244 - Piso 8 Santiago de Surco - Lima - Perú");
                                break;*/
                            default:
                                rd.SetParameterValue("nombreEmpresa", "sol- industriales sa de cv");
                                rd.SetParameterValue("noIMSS", "");
                                rd.SetParameterValue("imssLabel", "No. IMSS");
                                rd.SetParameterValue("domicilioEmpresa", " ");
                                break;
                        }

                        Session.Add("reporte", rd);

                        break;
                    }

                #endregion

                #region AVISO DE BAJA DE PERSONAL
                case ReportesEnum.rptAvisoBaja:
                    {
                        setMedidasReporte("HC");
                        rd = new rptAvisoBaja();

                        int idBaja = Request.QueryString["idBaja"].ParseInt();
                        //List<dynamic> objDatosEmpleado = ReclutamientoFS.getReclutamientosService().GetDatosEmpleadoDocumentos(claveEmpleado);
                        Dictionary<string, object> dicBaja = bajasFS.GetBajasPersonalService().GetDatosActualizarBajaPersonal(idBaja);
                        var objBaja = dicBaja["objBaja"] as BajaPersonalDTO;
                        var objEntrevsita = dicBaja["objEntrevista"] as BajaPersonalDTO;

                        tblRH_EK_Empleados objResponsableCC = bajasFS.GetBajasPersonalService().GetFacultamientosResponsableCC(objBaja.cc.Split('-')[0].Trim());

                        Dictionary<string, object> dataAlta = ReclutamientoFS.getReclutamientosService().GetDatosActualizarEmpleado(objBaja.numeroEmpleado, false);
                        List<DatosActualizarEmpleadoDTO> datosAlta = dataAlta["lstDatos"] as List<DatosActualizarEmpleadoDTO>;
                        List<DatosActualizarEmpleadoDTO> datosGrales = dataAlta["lstGenerales"] as List<DatosActualizarEmpleadoDTO>;

                        #region GET INFO DE LOS LIBERADORES

                        Dictionary<string, object> dicEmpleadoInventario = new Dictionary<string, object>();
                        var objEmpleadoInventario = new BajaPersonalDTO();
                        if (objBaja.est_inventario_usuario != null)
                        {
                            dicEmpleadoInventario = bajasFS.GetBajasPersonalService().GetDatosPersonaReporte(objBaja.est_inventario_usuario.Value, "");
                            objEmpleadoInventario = dicEmpleadoInventario["objDatosPersona"] as BajaPersonalDTO;
                        }

                        Dictionary<string, object> dicEmpleadoCompras = new Dictionary<string, object>();
                        var objEmpleadoCompras = new BajaPersonalDTO();
                        if (objBaja.est_compras_usuario != null)
                        {
                            dicEmpleadoCompras = bajasFS.GetBajasPersonalService().GetDatosPersonaReporte(objBaja.est_compras_usuario.Value, "");
                            objEmpleadoCompras = dicEmpleadoCompras["objDatosPersona"] as BajaPersonalDTO;
                        }

                        Dictionary<string, object> dicEmpleadoConta = new Dictionary<string, object>();
                        var objEmpleadoConta = new BajaPersonalDTO();
                        if (objBaja.est_contabilidad_usuario != null)
                        {
                            dicEmpleadoConta = bajasFS.GetBajasPersonalService().GetDatosPersonaReporte(objBaja.est_contabilidad_usuario.Value, "");
                            objEmpleadoConta = dicEmpleadoConta["objDatosPersona"] as BajaPersonalDTO;
                        }
                        #endregion

                        rd.SetParameterValue("fecha", objBaja.fechaCreacion.Year > 1 ? objBaja.fechaCreacion.ToString("dd/MM/yyyy") : objBaja.fechaBaja.ToString("dd/MM/yyyy"));
                        rd.SetParameterValue("noRequi", datosAlta[0].requisicion);
                        rd.SetParameterValue("noEmpleado", objBaja.numeroEmpleado);
                        rd.SetParameterValue("nombre", objBaja.nombre);
                        rd.SetParameterValue("fechaIngreso", datosAlta[0].fecha_alta.ToString("dd/MM/yyyy"));
                        rd.SetParameterValue("puesto", objBaja.nombrePuesto);
                        rd.SetParameterValue("regPat", datosAlta[0].nombreRegPat);
                        rd.SetParameterValue("obra", objBaja.cc + " - " + objBaja.descripcionCC);
                        rd.SetParameterValue("jefeInmediato", datosAlta[0].nombreJefeInmediato);
                        rd.SetParameterValue("fechabaja", objBaja.fechaBaja.ToShortDateString());
                        rd.SetParameterValue("motivoBaja", objBaja.strMotivoBaja ?? " ");
                        rd.SetParameterValue("otrosMotivos", " ");
                        rd.SetParameterValue("areaTrabajo", " ");
                        rd.SetParameterValue("noAlmacen", " ");
                        rd.SetParameterValue("folioAlmacen", " ");
                        rd.SetParameterValue("comentarios", " ");
                        rd.SetParameterValue("observaciones", objBaja.comentarios ?? "");
                        rd.SetParameterValue("usrRH", objBaja.nombre_autoriza != null ? objBaja.nombre_autoriza : " ");
                        rd.SetParameterValue("usrAlmacen", objEmpleadoInventario.nombreCompleto != null ? objEmpleadoInventario.nombreCompleto : " ");
                        rd.SetParameterValue("usrTaller", objEmpleadoCompras.nombreCompleto != null ? objEmpleadoCompras.nombreCompleto : " ");
                        rd.SetParameterValue("usrConta", objEmpleadoConta.nombreCompleto != null ? objEmpleadoConta.nombreCompleto : " ");
                        rd.SetParameterValue("comentariosAlmacen", objBaja.est_inventario == "A" ? (!string.IsNullOrEmpty(objBaja.est_inventario_comentario) ? objBaja.est_inventario_comentario : "LIBERADO") : "");
                        rd.SetParameterValue("comentariosTaller", objBaja.est_compras == "A" ? (!string.IsNullOrEmpty(objBaja.est_compras_comentario) ? objBaja.est_compras_comentario : "LIBERADO") : "");
                        rd.SetParameterValue("comentariosConta", objBaja.est_contabilidad == "A" ? (!string.IsNullOrEmpty(objBaja.est_contabilidad_comentario) ? objBaja.est_contabilidad_comentario : "LIBERADO") : "");
                        rd.SetParameterValue("firmaBaja", objBaja.est_baja_firma ?? " ");
                        rd.SetParameterValue("firmaAlmacen", objBaja.est_inventario_firma ?? " ");
                        rd.SetParameterValue("firmaConta", objBaja.est_contabilidad_firma ?? " ");
                        rd.SetParameterValue("firmaTaller", objBaja.est_compras_firma ?? " ");
                        rd.SetParameterValue("responsableCC", objResponsableCC.nombre + " " + objResponsableCC.ape_paterno + " " + objResponsableCC.ape_materno);

                        Session.Add("reporte", rd);

                        break;
                    }
                #endregion

                #region STAFFING
                case ReportesEnum.rptStaffing:
                    {
                        setMedidasReporte("HC");
                        rd = new rptStaffing();

                        string cc = Request.QueryString["cc"];

                        Dictionary<string, object> dicPlantilla = reportesRHFS.getReportesRHService().GetPuestosCategoriasRelPuesto(cc, null);
                        var lstReporte = dicPlantilla["lstPuestosRelPuesto"] as List<Core.DTO.RecursosHumanos.Enkontrol.CatCategoriasAditivas>;
                        var lstFooterReporte = dicPlantilla["lstTotalesRelPuesto"] as List<string>;
                        var ccDesc = dicPlantilla["ccDesc"] as string;

                        rd.Database.Tables[0].SetDataSource(lstReporte.Select(e => new
                        {
                            altas = e.altas ?? 0,
                            cantidad = e.cantidad ?? 0,
                            categoria = e.categoria ?? "",
                            puesto = e.puesto ?? "",
                            id_puesto = e.id_puesto,
                            id_plantilla = e.id_plantilla
                        }));
                        rd.Database.Tables[1].SetDataSource(getInfoEnca("Reporte Staffing", ""));

                        rd.SetParameterValue("numRegistros", lstReporte.Count());
                        rd.SetParameterValue("fechaHoy", DateTime.Now.ToString("dd/MM/yyyy"));
                        rd.SetParameterValue("totalPlantilla", lstFooterReporte[0]);
                        rd.SetParameterValue("totalContratados", lstFooterReporte[1]);
                        rd.SetParameterValue("totalXContratar", lstFooterReporte[2]);
                        rd.SetParameterValue("porcContratados", lstFooterReporte[3]);
                        rd.SetParameterValue("porcXContratar", lstFooterReporte[4]);
                        rd.SetParameterValue("cc", ccDesc);

                        Session.Add("reporte", rd);

                        break;
                    }
                #endregion

                #region STAFFING
                case ReportesEnum.rptCedulaCostosNomina:
                    {
                        setMedidasReporte("HO");

                        var year = Int32.Parse(Request.QueryString["year"]);
                        var periodo = Int32.Parse(Request.QueryString["periodo"]);
                        var tipoNomina = Int32.Parse(Request.QueryString["tipoNomina"]);
                        var banco = Int32.Parse(Request.QueryString["banco"]);
                        var data = nominaFactoryService.getNominaService().GetCedulaCostos(year, periodo, tipoNomina, banco);

                        if (tipoNomina == 10) rd = new rptCedulaCostosNominaAguinaldo();
                        else rd = new rptCedulaCostosNomina();

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("", ""));
                        rd.Database.Tables[1].SetDataSource(data.tabla);

                        rd.SetParameterValue("nombreEmpresa", data.nombreEmpresa);
                        rd.SetParameterValue("periodo", data.periodo);
                        rd.SetParameterValue("totalSumaNomina", data.totalSumaNomina.ToString("C"));
                        rd.SetParameterValue("totalValesDespensa", data.totalValesDespensa.ToString("C"));
                        rd.SetParameterValue("totalDepositoBancario", data.totalDepositoBancario.ToString("C"));
                        rd.SetParameterValue("totalDescuentos", data.totalDescuentos.ToString("C"));
                        rd.SetParameterValue("totalPrestamos", data.totalPrestamos.ToString("C"));
                        rd.SetParameterValue("totalFamsa", data.totalFamsa.ToString("C"));
                        rd.SetParameterValue("totalFonacot", data.totalFonacot.ToString("C"));
                        rd.SetParameterValue("totalSindicato", data.totalSindicato.ToString("C"));
                        rd.SetParameterValue("totalPensionAlimenticia", data.totalPensionAlimenticia.ToString("C"));
                        rd.SetParameterValue("totalFondoAhorroEmpleado", data.totalFondoAhorroEmpleado.ToString("C"));
                        rd.SetParameterValue("totalFondoAhorroEmpresa", data.totalFondoAhorroEmpresa.ToString("C"));
                        rd.SetParameterValue("totalInfonavit", data.totalInfonavit.ToString("C"));
                        rd.SetParameterValue("totalSumasNomina", data.totalSumasNomina.ToString("C"));
                        rd.SetParameterValue("comisionOCSI", data.comisionOCSI.ToString("C"));
                        rd.SetParameterValue("ivaComisionOCSI", data.ivaComisionOCSI.ToString("C"));
                        rd.SetParameterValue("totalOCSI", data.totalOCSI.ToString("C"));
                        rd.SetParameterValue("totalComisionOCSI", data.totalComisionOCSI.ToString("C"));
                        rd.SetParameterValue("totalAxa", data.totalAxa.ToString("C"));
                        rd.SetParameterValue("tipoBanco", data.tipoBanco);
                        rd.SetParameterValue("totalApoyoColectivo", data.totalApoyoColectivo.ToString("C"));

                        Session.Add("reporte", rd);

                        break;
                    }
                case ReportesEnum.rptCedulaCostosNomina2:
                    {
                        setMedidasReporte("HO");

                        var year = Int32.Parse(Request.QueryString["year"]);
                        var periodo = Int32.Parse(Request.QueryString["periodo"]);
                        var tipoNomina = Int32.Parse(Request.QueryString["tipoNomina"]);
                        var banco = Int32.Parse(Request.QueryString["banco"]);
                        var data = nominaFactoryService.getNominaService().GetCedulaCostos(year, periodo, tipoNomina, banco);

                        if (tipoNomina == 10) rd = new rptCedulaCostosNominaAguinaldo();
                        else rd = new rptCedulaCostosNomina();

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("", ""));
                        rd.Database.Tables[1].SetDataSource(data.tabla);

                        rd.SetParameterValue("nombreEmpresa", data.nombreEmpresa);
                        rd.SetParameterValue("periodo", data.periodo);
                        rd.SetParameterValue("totalSumaNomina", data.totalSumaNomina.ToString("C"));
                        rd.SetParameterValue("totalValesDespensa", data.totalValesDespensa.ToString("C"));
                        rd.SetParameterValue("totalDepositoBancario", data.totalDepositoBancario.ToString("C"));
                        rd.SetParameterValue("totalDescuentos", data.totalDescuentos.ToString("C"));
                        rd.SetParameterValue("totalPrestamos", data.totalPrestamos.ToString("C"));
                        rd.SetParameterValue("totalFamsa", data.totalFamsa.ToString("C"));
                        rd.SetParameterValue("totalFonacot", data.totalFonacot.ToString("C"));
                        rd.SetParameterValue("totalSindicato", data.totalSindicato.ToString("C"));
                        rd.SetParameterValue("totalPensionAlimenticia", data.totalPensionAlimenticia.ToString("C"));
                        rd.SetParameterValue("totalFondoAhorroEmpleado", data.totalFondoAhorroEmpleado.ToString("C"));
                        rd.SetParameterValue("totalFondoAhorroEmpresa", data.totalFondoAhorroEmpresa.ToString("C"));
                        rd.SetParameterValue("totalInfonavit", data.totalInfonavit.ToString("C"));
                        rd.SetParameterValue("totalSumasNomina", data.totalSumasNomina.ToString("C"));
                        rd.SetParameterValue("comisionOCSI", data.comisionOCSI.ToString("C"));
                        rd.SetParameterValue("ivaComisionOCSI", data.ivaComisionOCSI.ToString("C"));
                        rd.SetParameterValue("totalOCSI", data.totalOCSI.ToString("C"));
                        rd.SetParameterValue("totalComisionOCSI", data.totalComisionOCSI.ToString("C"));
                        rd.SetParameterValue("totalAxa", data.totalAxa.ToString("C"));
                        rd.SetParameterValue("tipoBanco", data.tipoBanco);
                        rd.SetParameterValue("totalApoyoColectivo", data.totalApoyoColectivo.ToString("C"));

                        Session.Add("reporte", rd);

                        break;
                    }
                case ReportesEnum.rptCedulaCostosNomina3:
                    {
                        setMedidasReporte("HO");

                        var year = Int32.Parse(Request.QueryString["year"]);
                        var periodo = Int32.Parse(Request.QueryString["periodo"]);
                        var tipoNomina = Int32.Parse(Request.QueryString["tipoNomina"]);
                        var banco = Int32.Parse(Request.QueryString["banco"]);
                        var data = nominaFactoryService.getNominaService().GetCedulaCostos(year, periodo, tipoNomina, banco);

                        if (tipoNomina == 10) rd = new rptCedulaCostosNominaAguinaldo();
                        else rd = new rptCedulaCostosNomina();

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("", ""));
                        rd.Database.Tables[1].SetDataSource(data.tabla);

                        rd.SetParameterValue("nombreEmpresa", data.nombreEmpresa);
                        rd.SetParameterValue("periodo", data.periodo);
                        rd.SetParameterValue("totalSumaNomina", data.totalSumaNomina.ToString("C"));
                        rd.SetParameterValue("totalValesDespensa", data.totalValesDespensa.ToString("C"));
                        rd.SetParameterValue("totalDepositoBancario", data.totalDepositoBancario.ToString("C"));
                        rd.SetParameterValue("totalDescuentos", data.totalDescuentos.ToString("C"));
                        rd.SetParameterValue("totalPrestamos", data.totalPrestamos.ToString("C"));
                        rd.SetParameterValue("totalFamsa", data.totalFamsa.ToString("C"));
                        rd.SetParameterValue("totalFonacot", data.totalFonacot.ToString("C"));
                        rd.SetParameterValue("totalSindicato", data.totalSindicato.ToString("C"));
                        rd.SetParameterValue("totalPensionAlimenticia", data.totalPensionAlimenticia.ToString("C"));
                        rd.SetParameterValue("totalFondoAhorroEmpleado", data.totalFondoAhorroEmpleado.ToString("C"));
                        rd.SetParameterValue("totalFondoAhorroEmpresa", data.totalFondoAhorroEmpresa.ToString("C"));
                        rd.SetParameterValue("totalInfonavit", data.totalInfonavit.ToString("C"));
                        rd.SetParameterValue("totalSumasNomina", data.totalSumasNomina.ToString("C"));
                        rd.SetParameterValue("comisionOCSI", data.comisionOCSI.ToString("C"));
                        rd.SetParameterValue("ivaComisionOCSI", data.ivaComisionOCSI.ToString("C"));
                        rd.SetParameterValue("totalOCSI", data.totalOCSI.ToString("C"));
                        rd.SetParameterValue("totalComisionOCSI", data.totalComisionOCSI.ToString("C"));
                        rd.SetParameterValue("totalAxa", data.totalAxa.ToString("C"));
                        rd.SetParameterValue("tipoBanco", data.tipoBanco);
                        rd.SetParameterValue("totalApoyoColectivo", data.totalApoyoColectivo.ToString("C"));

                        Session.Add("reporte", rd);

                        break;
                    }
                case ReportesEnum.rptCedulaCostosNomina4:
                    {
                        setMedidasReporte("HO");

                        var year = Int32.Parse(Request.QueryString["year"]);
                        var periodo = Int32.Parse(Request.QueryString["periodo"]);
                        var tipoNomina = Int32.Parse(Request.QueryString["tipoNomina"]);
                        var banco = Int32.Parse(Request.QueryString["banco"]);
                        var data = nominaFactoryService.getNominaService().GetCedulaCostos(year, periodo, tipoNomina, banco);

                        if (tipoNomina == 10) rd = new rptCedulaCostosNominaAguinaldo();
                        else rd = new rptCedulaCostosNomina();

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("", ""));
                        rd.Database.Tables[1].SetDataSource(data.tabla);

                        rd.SetParameterValue("nombreEmpresa", data.nombreEmpresa);
                        rd.SetParameterValue("periodo", data.periodo);
                        rd.SetParameterValue("totalSumaNomina", data.totalSumaNomina.ToString("C"));
                        rd.SetParameterValue("totalValesDespensa", data.totalValesDespensa.ToString("C"));
                        rd.SetParameterValue("totalDepositoBancario", data.totalDepositoBancario.ToString("C"));
                        rd.SetParameterValue("totalDescuentos", data.totalDescuentos.ToString("C"));
                        rd.SetParameterValue("totalPrestamos", data.totalPrestamos.ToString("C"));
                        rd.SetParameterValue("totalFamsa", data.totalFamsa.ToString("C"));
                        rd.SetParameterValue("totalFonacot", data.totalFonacot.ToString("C"));
                        rd.SetParameterValue("totalSindicato", data.totalSindicato.ToString("C"));
                        rd.SetParameterValue("totalPensionAlimenticia", data.totalPensionAlimenticia.ToString("C"));
                        rd.SetParameterValue("totalFondoAhorroEmpleado", data.totalFondoAhorroEmpleado.ToString("C"));
                        rd.SetParameterValue("totalFondoAhorroEmpresa", data.totalFondoAhorroEmpresa.ToString("C"));
                        rd.SetParameterValue("totalInfonavit", data.totalInfonavit.ToString("C"));
                        rd.SetParameterValue("totalSumasNomina", data.totalSumasNomina.ToString("C"));
                        rd.SetParameterValue("comisionOCSI", data.comisionOCSI.ToString("C"));
                        rd.SetParameterValue("ivaComisionOCSI", data.ivaComisionOCSI.ToString("C"));
                        rd.SetParameterValue("totalOCSI", data.totalOCSI.ToString("C"));
                        rd.SetParameterValue("totalComisionOCSI", data.totalComisionOCSI.ToString("C"));
                        rd.SetParameterValue("totalAxa", data.totalAxa.ToString("C"));
                        rd.SetParameterValue("tipoBanco", data.tipoBanco);
                        rd.SetParameterValue("totalApoyoColectivo", data.totalApoyoColectivo.ToString("C"));

                        Session.Add("reporte", rd);

                        break;
                    }
                case ReportesEnum.rptPolizaOCSI:
                    {
                        setMedidasReporte("HO");
                        rd = new rptPolizaOCSI();

                        var year = Int32.Parse(Request.QueryString["year"]);
                        var periodo = Int32.Parse(Request.QueryString["periodo"]);
                        var tipoNomina = Int32.Parse(Request.QueryString["tipoNomina"]);
                        var banco = Int32.Parse(Request.QueryString["banco"]);
                        var data = nominaFactoryService.getNominaService().GetPolizaOCSI(year, periodo, tipoNomina, banco);

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("", ""));
                        rd.Database.Tables[1].SetDataSource(data.tabla);

                        rd.SetParameterValue("nombreEmpresa", data.nombreEmpresa);
                        rd.SetParameterValue("periodo", data.periodo);
                        rd.SetParameterValue("totalCargos", data.totalCargos.ToString("C"));
                        rd.SetParameterValue("totalAbonos", data.totalAbonos.ToString("C"));
                        rd.SetParameterValue("tituloAC", vSesiones.sesionEmpresaActual == 2 ? "AC" : "");
                        rd.SetParameterValue("tipoBanco", data.tipoBanco);

                        Session.Add("reporte", rd);

                        break;
                    }
                case ReportesEnum.rptExamenMedico:
                    setMedidasReporte("HC");
                    rd = new rptExamenMedico();

                    Request.InputStream.Position = 0;
                    var rawRequestBody = new StreamReader(Request.InputStream).ReadToEnd();
                    var objRequestBody = JsonConvert.DeserializeObject<dynamic>(rawRequestBody);

                    tblRH_REC_ExamenMedico examenMedico = objRequestBody.examenMedico.ToObject<tblRH_REC_ExamenMedico>();
                    List<tblRH_REC_ExamenMedico_Antecedentes> listaAntecedentes = objRequestBody.listaAntecedentes.ToObject<List<tblRH_REC_ExamenMedico_Antecedentes>>();

                    rd.Database.Tables[0].SetDataSource(getInfoEnca("Examen Médico", ""));

                    rd.SetParameterValue("doctor", vSesiones.sesionUsuarioDTO.nombre);
                    rd.SetParameterValue("nombreCandidato", examenMedico.nombre);
                    rd.SetParameterValue("edad", examenMedico.edad);
                    rd.SetParameterValue("telefono", examenMedico.telefono);
                    rd.SetParameterValue("direccion", examenMedico.direccion);
                    rd.SetParameterValue("escolaridad_primaria", examenMedico.escolaridad == 1 ? "X" : " ");
                    rd.SetParameterValue("escolaridad_secundaria", examenMedico.escolaridad == 2 ? "X" : " ");
                    rd.SetParameterValue("escolaridad_preparatoria", examenMedico.escolaridad == 3 ? "X" : " ");
                    rd.SetParameterValue("escolaridad_universidad", examenMedico.escolaridad == 4 ? "X" : " ");
                    rd.SetParameterValue("otraEscolaridad", examenMedico.otraEscolaridad);
                    rd.SetParameterValue("estadoCivil_soltero", examenMedico.estadoCivil == 1 ? "X" : " ");
                    rd.SetParameterValue("estadoCivil_casado", examenMedico.estadoCivil == 2 ? "X" : " ");
                    rd.SetParameterValue("estadoCivil_unionLibre", examenMedico.estadoCivil == 3 ? "X" : " ");
                    rd.SetParameterValue("otroEstadoCivil", examenMedico.otroEstadoCivil);
                    rd.SetParameterValue("hijos", examenMedico.hijos);
                    rd.SetParameterValue("puestoAnterior", examenMedico.puestoAnteriorDesc);
                    rd.SetParameterValue("puestoOcupar", examenMedico.puestoOcuparDesc);
                    rd.SetParameterValue("alcoholismo_si", examenMedico.alcoholismo ? "X" : " ");
                    rd.SetParameterValue("alcoholismo_no", !examenMedico.alcoholismo ? "X" : " ");
                    rd.SetParameterValue("tipoSanguineo", examenMedico.tipoSanguineo);
                    rd.SetParameterValue("observacionesAlcoholismo", examenMedico.observacionesAlcoholismo);
                    rd.SetParameterValue("tabaquismo_si", examenMedico.tabaquismo ? "X" : " ");
                    rd.SetParameterValue("tabaquismo_no", !examenMedico.tabaquismo ? "X" : " ");
                    rd.SetParameterValue("observacionesTabaquismo", examenMedico.observacionesTabaquismo);
                    rd.SetParameterValue("toxicomania_si", examenMedico.toxicomania ? "X" : " ");
                    rd.SetParameterValue("toxicomania_no", !examenMedico.toxicomania ? "X" : " ");
                    rd.SetParameterValue("observacionesToxicomania", examenMedico.observacionesToxicomania);
                    rd.SetParameterValue("lentes_si", examenMedico.lentes ? "X" : " ");
                    rd.SetParameterValue("lentes_no", !examenMedico.lentes ? "X" : " ");
                    rd.SetParameterValue("observacionesLentes", examenMedico.observacionesLentes);
                    rd.SetParameterValue("visual", examenMedico.visual);
                    rd.SetParameterValue("auditiva", examenMedico.auditiva);
                    rd.SetParameterValue("TA", examenMedico.TA);
                    rd.SetParameterValue("pulso", examenMedico.pulso);
                    rd.SetParameterValue("marchaPunta", examenMedico.marchaPunta);
                    rd.SetParameterValue("talon", examenMedico.talon);
                    rd.SetParameterValue("romberg", examenMedico.romberg);
                    rd.SetParameterValue("arcosFlexion", examenMedico.arcosFlexion);
                    rd.SetParameterValue("antecedentesFamiliares", examenMedico.antecedentesFamiliares);
                    rd.SetParameterValue("heredoFamiliar", examenMedico.heredoFamiliar);
                    rd.SetParameterValue("antecedentes_quirurgicos", listaAntecedentes.Any(x => x.antecedente == 1) ? "X" : " ");
                    rd.SetParameterValue("antecedentes_traumaticos", listaAntecedentes.Any(x => x.antecedente == 2) ? "X" : " ");
                    rd.SetParameterValue("antecedentes_alergicos", listaAntecedentes.Any(x => x.antecedente == 3) ? "X" : " ");
                    rd.SetParameterValue("antecedentes_tatuajes", listaAntecedentes.Any(x => x.antecedente == 4) ? "X" : " ");
                    rd.SetParameterValue("tratamiento", examenMedico.tratamiento);
                    rd.SetParameterValue("rayosX", examenMedico.rayosX);
                    rd.SetParameterValue("menarca", examenMedico.menarca);
                    rd.SetParameterValue("VSA", examenMedico.VSA);
                    rd.SetParameterValue("numeroGestas", examenMedico.numeroGestas);
                    rd.SetParameterValue("ritmo", examenMedico.ritmo);
                    rd.SetParameterValue("MPF", examenMedico.MPF);
                    rd.SetParameterValue("PIE", examenMedico.PIE);
                    rd.SetParameterValue("OPI", examenMedico.OPI);
                    rd.SetParameterValue("MET", examenMedico.MET);
                    rd.SetParameterValue("COC", examenMedico.COC);
                    rd.SetParameterValue("AMP", examenMedico.AMP);
                    rd.SetParameterValue("THC", examenMedico.THC);
                    rd.SetParameterValue("personaApta_si", examenMedico.personaApta ? "X" : " ");
                    rd.SetParameterValue("personaApta_no", !examenMedico.personaApta ? "X" : " ");
                    rd.SetParameterValue("observacionesGenerales", examenMedico.observacionesGenerales);

                    var medicoInformacion = usuarioFactoryServices.getUsuarioService().GetInformacionMedico(vSesiones.sesionUsuarioDTO.id);
                    var tituloMedico = "";
                    var universidadMedico = "";
                    var cedulaProfesionalMedico = "";

                    if (medicoInformacion != null)
                    {
                        tituloMedico = medicoInformacion.titulo;
                        universidadMedico = medicoInformacion.universidad;
                        cedulaProfesionalMedico = medicoInformacion.cedulaProfesional;
                    }

                    rd.SetParameterValue("tituloDoctor", tituloMedico);
                    rd.SetParameterValue("universidadDoctor", universidadMedico);
                    rd.SetParameterValue("cedulaProfesionalDoctor", cedulaProfesionalMedico);

                    Session.Add("reporte", rd);
                    break;
                #endregion

                #region Constancias
                case ReportesEnum.rptPrestamos:
                    {

                        setMedidasReporte("HC");
                        rd = new rptPrestamos();

                        int idEmpleado = Request.QueryString["idEmpleado"].ParseInt();
                        repPrestamosDTO infoPrestamo = reportesRHFS.getReportesRHService().GetInfoPrestamos(idEmpleado);
                        //rd.SetParameterValue("ubicacion", "HERMOSILLO, SON");
                        rd.SetParameterValue("fechaActual", DateTime.Now.ToString("dd \\de MMMM \\de yyyy", new System.Globalization.CultureInfo("es-ES")));
                        rd.SetParameterValue("ccDescripcion", infoPrestamo.ccDescripcion.Trim());
                        rd.SetParameterValue("nombrePuesto", infoPrestamo.nombrePuesto.Trim());
                        rd.SetParameterValue("categoriaPuesto", !string.IsNullOrEmpty(infoPrestamo.descCategoriaPuesto) ? (infoPrestamo.descCategoriaPuesto.Trim()) : "S/N");
                        rd.SetParameterValue("nombreCompleto", infoPrestamo.nombreCompleto.Trim());

                        string empresa = null;
                        if (infoPrestamo.empresa == empresa)
                        {
                            rd.SetParameterValue("empresa", "");
                        }
                        else
                        {
                            rd.SetParameterValue("empresa", infoPrestamo.empresa.Trim());
                        }

                        rd.SetParameterValue("fecha_alta", Convert.ToDateTime(infoPrestamo.fecha_alta).ToString("dd \\de MMMM \\de yyyy", new System.Globalization.CultureInfo("es-ES")));
                        rd.SetParameterValue("tipoNomina", infoPrestamo.tipoNomina.Trim());
                        rd.SetParameterValue("sueldo_base", infoPrestamo.sueldo_base);
                        rd.SetParameterValue("complemento", infoPrestamo.complemento);
                        rd.SetParameterValue("bono_zona", infoPrestamo.bono_zona);
                        rd.SetParameterValue("totalN", infoPrestamo.totalN);
                        rd.SetParameterValue("totalM", infoPrestamo.totalM);
                        #region asignacion a casillas
                        string pago1 = "";
                        string pago2 = "";

                        if (infoPrestamo.formaPago == "12 Quincenas")
                        {
                            pago1 = "X";
                            pago2 = " ";
                            rd.SetParameterValue("formaPago12", pago1);
                            rd.SetParameterValue("formaPago24", pago2);
                        }
                        else
                        {
                            pago1 = " ";
                            pago2 = "X";
                            rd.SetParameterValue("formaPago12", pago1);
                            rd.SetParameterValue("formaPago24", pago2);

                        }


                        string salud = "";
                        string defuncion = "";
                        string daño = "";
                        string apoyo = "";
                        string sindicato = "";

                        if (infoPrestamo.motivoPrestamo == 1)
                        {
                            salud = "X";
                            defuncion = "";
                            daño = "";
                            apoyo = "";
                            sindicato = "";

                            rd.SetParameterValue("motivoSalud", salud);
                            rd.SetParameterValue("motivoDef", defuncion);
                            rd.SetParameterValue("motivoDaño", daño);
                            rd.SetParameterValue("motivoApoyo", apoyo);
                            rd.SetParameterValue("motivoSindicato", sindicato);

                        }
                        else if (infoPrestamo.motivoPrestamo == 2)
                        {
                            salud = "";
                            defuncion = "X";
                            daño = "";
                            apoyo = "";
                            sindicato = "";

                            rd.SetParameterValue("motivoSalud", salud);
                            rd.SetParameterValue("motivoDef", defuncion);
                            rd.SetParameterValue("motivoDaño", daño);
                            rd.SetParameterValue("motivoApoyo", apoyo);
                            rd.SetParameterValue("motivoSindicato", sindicato);

                        }
                        else if (infoPrestamo.motivoPrestamo == 3)
                        {
                            salud = "";
                            defuncion = "";
                            daño = "X";
                            apoyo = "";
                            sindicato = "";

                            rd.SetParameterValue("motivoSalud", salud);
                            rd.SetParameterValue("motivoDef", defuncion);
                            rd.SetParameterValue("motivoDaño", daño);
                            rd.SetParameterValue("motivoApoyo", apoyo);
                            rd.SetParameterValue("motivoSindicato", sindicato);
                        }
                        else if (infoPrestamo.motivoPrestamo == 4)
                        {
                            salud = "";
                            defuncion = "";
                            daño = "";
                            apoyo = "X";
                            sindicato = "";

                            rd.SetParameterValue("motivoSalud", salud);
                            rd.SetParameterValue("motivoDef", defuncion);
                            rd.SetParameterValue("motivoDaño", daño);
                            rd.SetParameterValue("motivoApoyo", apoyo);
                            rd.SetParameterValue("motivoSindicato", sindicato);
                        }
                        else if (infoPrestamo.motivoPrestamo == 5)
                        {
                            salud = "";
                            defuncion = "";
                            daño = "";
                            apoyo = "";
                            sindicato = "X";

                            rd.SetParameterValue("motivoSalud", salud);
                            rd.SetParameterValue("motivoDef", defuncion);
                            rd.SetParameterValue("motivoDaño", daño);
                            rd.SetParameterValue("motivoApoyo", apoyo);
                            rd.SetParameterValue("motivoSindicato", sindicato);
                        }

                        if (infoPrestamo.cantidadSoli < 10000)
                        {
                            rd.SetParameterValue("IFE", "X");
                            rd.SetParameterValue("SOPORTE", "X");
                            rd.SetParameterValue("PAGARE", "");
                        }
                        if (infoPrestamo.cantidadSoli >= 10000)
                        {
                            rd.SetParameterValue("IFE", "X");
                            rd.SetParameterValue("SOPORTE", "X");
                            rd.SetParameterValue("PAGARE", "X");
                        }
                        #endregion

                        string descPrestamos = "";

                        if (infoPrestamo.tipoPrestamo == "MayorIgualA10")
                        {
                            descPrestamos = "MAYOR O IGUAL A $10,000.00";

                        }
                        else if (infoPrestamo.tipoPrestamo == "MenorA10")
                        {
                            descPrestamos = "MENOR A $10,000.00";

                        }
                        else
                        {
                            descPrestamos = " ";

                        }

                        rd.SetParameterValue("cantSoli", infoPrestamo.cantidadSoli);
                        rd.SetParameterValue("cantidadLetra", infoPrestamo.cantidadLetra);
                        rd.SetParameterValue("cantMax", infoPrestamo.cantidadMax);
                        rd.SetParameterValue("cantDescontar", infoPrestamo.cantidadDescontar);
                        rd.SetParameterValue("otrosDesc", infoPrestamo.otrosDescuento);
                        rd.SetParameterValue("justificacion", infoPrestamo.justificacion.Trim());
                        rd.SetParameterValue("tipoSolicitud", infoPrestamo.tipoSolicitud.Trim());
                        rd.SetParameterValue("tipoPrestamo", descPrestamos);
                        rd.SetParameterValue("tipoPuesto", infoPrestamo.tipoPuesto.Trim());
                        rd.SetParameterValue("cantidadLetra", infoPrestamo.cantidadLetra.Trim());

                        if (infoPrestamo.idResponsableCC == null || infoPrestamo.idGerenteOdirector == null || infoPrestamo.idDirectorGeneral == null || infoPrestamo.idDirectorLineaN == null)
                        {
                            rd.SetParameterValue("nombreResponsableCC", "");
                            rd.SetParameterValue("puestoResponsableCC", "");
                            rd.SetParameterValue("nombreDirectorGeneral", "");
                            rd.SetParameterValue("puestoDirectorGeneral", "");
                            rd.SetParameterValue("nombreDirectorLineaN", "");
                            rd.SetParameterValue("puestoDirectorLineaN", "");
                            rd.SetParameterValue("nombreGerenteOdirector", "");
                            rd.SetParameterValue("puestoGerenteOdirector", "");
                            rd.SetParameterValue("nombreCapitalHumano", "");
                            rd.SetParameterValue("puestoCapitalHumano", "");
                        }
                        else
                        {
                            rd.SetParameterValue("nombreResponsableCC", infoPrestamo != null && infoPrestamo.idResponsableCC > 0 ? infoPrestamo.nombreResponsableCC.Trim() : string.Empty);
                            rd.SetParameterValue("puestoResponsableCC", "RESPONSABLE DE CC");
                            rd.SetParameterValue("nombreDirectorGeneral", infoPrestamo != null && infoPrestamo.idDirectorGeneral > 0 ? infoPrestamo.nombreDirectorGeneral.Trim() : string.Empty);
                            rd.SetParameterValue("puestoDirectorGeneral", "DIRECTOR GENERAL");
                            rd.SetParameterValue("nombreDirectorLineaN", infoPrestamo != null && infoPrestamo.idDirectorLineaN > 0 ? infoPrestamo.nombreDirectorLineaN.Trim() : string.Empty);
                            rd.SetParameterValue("puestoDirectorLineaN", "DIRECTOR LINEA DE NEGOCIO");
                            rd.SetParameterValue("nombreGerenteOdirector", infoPrestamo != null && infoPrestamo.idGerenteOdirector > 0 ? infoPrestamo.nombreGerenteOdirector.Trim() : string.Empty);
                            rd.SetParameterValue("puestoGerenteOdirector", "GERENTE/DIRECTOR DE AREA");
                            rd.SetParameterValue("nombreCapitalHumano", infoPrestamo != null && infoPrestamo.idCapitalHumano > 0 ? infoPrestamo.nombreCapitalHumano.Trim() : string.Empty);
                            rd.SetParameterValue("puestoCapitalHumano", "GERENTE/DIRECTOR DE CAPITAL HUMANO");

                            //Firmas
                            //rd.SetParameterValue("FirmaResponsableCC", GlobalUtils.CrearFirmaDigital(infoPrestamo.id, DocumentosEnum.FirmasPrestamos, Convert.ToInt32(infoPrestamo.idResponsableCC)));
                            //rd.SetParameterValue("FirmaSolicitante", GlobalUtils.CrearFirmaDigital(infoPrestamo.id, DocumentosEnum.FirmasPrestamos, Convert.ToInt32(infoPrestamo.clave_empleado)));
                            //rd.SetParameterValue("FirmaDirectorGeneral", GlobalUtils.CrearFirmaDigital(infoPrestamo.id, DocumentosEnum.FirmasPrestamos, Convert.ToInt32(infoPrestamo.idDirectorGeneral)));
                            //rd.SetParameterValue("FirmaDirectorLineaN", GlobalUtils.CrearFirmaDigital(infoPrestamo.id, DocumentosEnum.FirmasPrestamos, Convert.ToInt32(infoPrestamo.idDirectorLineaN)));
                            //rd.SetParameterValue("FirmaGerenteOdirector", GlobalUtils.CrearFirmaDigital(infoPrestamo.id, DocumentosEnum.FirmasPrestamos, Convert.ToInt32(infoPrestamo.idGerenteOdirector)));

                            var objIdResponsable = infoPrestamo.lstAuth.FirstOrDefault(e => e.cveEmpleado == infoPrestamo.idResponsableCC.Value.ToString());
                            var objIdDirectorGeneral = infoPrestamo.lstAuth.FirstOrDefault(e => e.cveEmpleado == infoPrestamo.idDirectorGeneral.Value.ToString());
                            var objIdDirectorLineaN = infoPrestamo.lstAuth.FirstOrDefault(e => e.cveEmpleado == infoPrestamo.idDirectorLineaN.Value.ToString());
                            var objIdGerenteOdirector = infoPrestamo.lstAuth.FirstOrDefault(e => e.cveEmpleado == infoPrestamo.idGerenteOdirector.Value.ToString());
                            var objidCapitalHumano = infoPrestamo.lstAuth.FirstOrDefault(e => e.cveEmpleado == infoPrestamo.idCapitalHumano.ToString());


                            rd.SetParameterValue("FirmaResponsableCC", (
                                objIdResponsable != null && objIdResponsable.descEstatus == EstatusAutorizacionPrestamosEnum.AUTORIZADO ?
                                GlobalUtils.CrearFirmaDigital(infoPrestamo.id, DocumentosEnum.FirmasPrestamos, Convert.ToInt32(infoPrestamo.idResponsableCC)) : " "));
                            rd.SetParameterValue("FirmaSolicitante", GlobalUtils.CrearFirmaDigital(infoPrestamo.id, DocumentosEnum.FirmasPrestamos, Convert.ToInt32(infoPrestamo.clave_empleado)));
                            rd.SetParameterValue("FirmaDirectorGeneral", (
                                objIdDirectorGeneral != null && objIdDirectorGeneral.descEstatus == EstatusAutorizacionPrestamosEnum.AUTORIZADO ?
                                GlobalUtils.CrearFirmaDigital(infoPrestamo.id, DocumentosEnum.FirmasPrestamos, Convert.ToInt32(infoPrestamo.idDirectorGeneral)) : " "));
                            rd.SetParameterValue("FirmaDirectorLineaN", (
                                objIdDirectorLineaN != null && objIdDirectorLineaN.descEstatus == EstatusAutorizacionPrestamosEnum.AUTORIZADO ?
                                GlobalUtils.CrearFirmaDigital(infoPrestamo.id, DocumentosEnum.FirmasPrestamos, Convert.ToInt32(infoPrestamo.idDirectorLineaN)) : " "));
                            rd.SetParameterValue("FirmaGerenteOdirector", (
                                objIdGerenteOdirector != null && objIdGerenteOdirector.descEstatus == EstatusAutorizacionPrestamosEnum.AUTORIZADO ?
                                GlobalUtils.CrearFirmaDigital(infoPrestamo.id, DocumentosEnum.FirmasPrestamos, Convert.ToInt32(infoPrestamo.idGerenteOdirector)) : " "));
                            rd.SetParameterValue("FirmaCapitalHumano", (
                                objidCapitalHumano != null && objidCapitalHumano.descEstatus == EstatusAutorizacionPrestamosEnum.AUTORIZADO ?
                                GlobalUtils.CrearFirmaDigital(infoPrestamo.id, DocumentosEnum.FirmasPrestamos, Convert.ToInt32(infoPrestamo.idCapitalHumano)) : " "));
                        }

                        rd.SetParameterValue("folio", ((infoPrestamo.cc == null ? "" : infoPrestamo.cc) + "-" + (infoPrestamo.clave_empleado) + "-" + (infoPrestamo.consecutivo.ToString().PadLeft(3, '0'))));

                        Session.Add("reporte", rd);
                        //}

                        break;
                    }

                case ReportesEnum.rptLaboral:
                    {


                        setMedidasReporte("HC");
                        rd = new rptLaboral();
                        repLaboralDTO informacionModal = (repLaboralDTO)Session["laboralInformacion"];
                        int idEmpleado = Request.QueryString["idEmpleado"].ParseInt();
                        repLaboralDTO infoLaboral = reportesRHFS.getReportesRHService().GetInfoLaboral(idEmpleado);

                        int claveEmpleado = infoLaboral.idEmpleado > 0 ? infoLaboral.idEmpleado.Value : 0;
                        int claveJefe = infoLaboral.idJefe > 0 ? infoLaboral.idJefe.Value : 0;

                        byte[] fotoFirma = reportesRHFS.getReportesRHService().GetFirmaFormatos();


                        rd.Database.Tables[0].SetDataSource(new List<object>() { new { firma1 = fotoFirma } });

                        rd.SetParameterValue("fechaActual", DateTime.Now.ToString("dd \\de MMMM \\de yyyy", new System.Globalization.CultureInfo("es-ES")));


                        string titulo = null;
                        if (informacionModal.tituloLab == titulo)
                        {
                            rd.SetParameterValue("tituloLab", "A QUIEN CORRESPONDA");
                        }
                        else
                        {
                            rd.SetParameterValue("tituloLab", informacionModal.tituloLab.Trim());
                        }
                        rd.SetParameterValue("nombreCompletoLab", informacionModal.nombreCompletoLab.Trim());
                        rd.SetParameterValue("nombrePuestoLab", informacionModal.nombrePuestoLab.Trim());
                        rd.SetParameterValue("numeroPatronal", informacionModal.numeroPatronal.Trim());
                        rd.SetParameterValue("nombreRegPatronal", informacionModal.nombreRegPatronal.Trim());
                        rd.SetParameterValue("proyectoCCLab", informacionModal.proyectoCCLab.Trim());


                        string baja = null;
                        //if (informacionModal.fechaBajaLab == baja)
                        if (informacionModal.status == "A")
                        {
                            rd.SetParameterValue("textoLabora", "labora");
                            rd.SetParameterValue("fechaAltaLab", ", desde el " + Convert.ToDateTime(informacionModal.fechaAltaLab).ToString("dd \\de MMMM \\de yyyy", new System.Globalization.CultureInfo("es-ES")));
                            rd.SetParameterValue("fechaBajaLab", "");
                        }
                        else
                        {
                            rd.SetParameterValue("textoLabora", "laboró");

                            rd.SetParameterValue("fechaAltaLab", ", del " + Convert.ToDateTime(informacionModal.fechaAltaLab).ToString("dd \\de MMMM \\de yyyy", new System.Globalization.CultureInfo("es-ES")));
                            rd.SetParameterValue("fechaBajaLab", " al " + Convert.ToDateTime(informacionModal.fechaBajaLab).ToString("dd \\de MMMM \\de yyyy", new System.Globalization.CultureInfo("es-ES")));
                        }
                        if (informacionModal.mostrarSueldoLab == "SOLO BASE MENSUAL")
                        {

                            rd.SetParameterValue("mensualNetoLab", ", percibiendo un sueldo base mensual de " + Convert.ToDecimal(informacionModal.baseNeto).ToString("C"));
                            rd.SetParameterValue("valorLetraLab", "(" + informacionModal.valorLetraBase.Trim() + ").");
                        }
                        else if (informacionModal.mostrarSueldoLab == "TOTAL NETO MENSUAL")
                        {
                            rd.SetParameterValue("mensualNetoLab", ", percibiendo un sueldo neto mensual de " + Convert.ToDecimal(informacionModal.mensualNetoLab).ToString("C"));
                            rd.SetParameterValue("valorLetraLab", "(" + informacionModal.valorLetraLab.Trim() + ").");

                        }
                        else
                        {
                            rd.SetParameterValue("mensualNetoLab", ".");
                            rd.SetParameterValue("valorLetraLab", "");
                        }
                        rd.SetParameterValue("numeroSeguroLab", informacionModal.numeroSeguroLab.Trim());
                        rd.SetParameterValue("curpLab", informacionModal.curpLab.Trim());
                        rd.SetParameterValue("rfcLab", informacionModal.rfcLab.Trim());
                        rd.SetParameterValue("firmaElect", GlobalUtils.CrearFirmaDigital(claveEmpleado, DocumentosEnum.FirmasPrestamos, claveJefe));


                        Session.Add("reporte", rd);

                        break;
                    }

                case ReportesEnum.rptLiberacion:
                    {
                        setMedidasReporte("HC");
                        rd = new rptLiberacion();

                        int idEmpleado = Request.QueryString["idEmpleado"].ParseInt();
                        repLiberacionDTO infoLiberacion = reportesRHFS.getReportesRHService().GetInfoLiberacion(idEmpleado);
                        //rd.SetParameterValue("ubicacion", "HERMOSILLO, SON");
                        byte[] fotoFirma = reportesRHFS.getReportesRHService().GetFirmaFormatos();

                        int claveEmpleado = infoLiberacion.idEmpleado > 0 ? infoLiberacion.idEmpleado.Value : 0;
                        int claveJefe = infoLiberacion.idJefe > 0 ? infoLiberacion.idJefe.Value : 0;

                        rd.Database.Tables[0].SetDataSource(new List<object>() { new { firma1 = fotoFirma } });
                        rd.SetParameterValue("fechaActual", DateTime.Now.ToString("dd \\de MMMM \\de yyyy", new System.Globalization.CultureInfo("es-ES")));
                        rd.SetParameterValue("nombrePuesto", infoLiberacion.nombrePuesto.Trim());
                        rd.SetParameterValue("nombreCompleto", infoLiberacion.nombreCompleto.Trim());
                        rd.SetParameterValue("ccDescripcion", infoLiberacion.ccDescripcion.Trim());
                        rd.SetParameterValue("fechaAlta", Convert.ToDateTime(infoLiberacion.fechaAlta).ToString("dd \\de MMMM \\de yyyy", new System.Globalization.CultureInfo("es-ES")));
                        string baja = null;
                        string motivo = null;
                        if (infoLiberacion.fechaBaja == baja)
                        {
                            rd.SetParameterValue("fechaBaja", "N/A");
                        }
                        else
                        {
                            rd.SetParameterValue("fechaBaja", Convert.ToDateTime(infoLiberacion.fechaBaja).ToString("dd \\de MMMM \\de yyyy", new System.Globalization.CultureInfo("es-ES")));
                        }
                        if (infoLiberacion.motivo == motivo)
                        {
                            rd.SetParameterValue("motivo", "N/A");
                        }
                        else
                        {
                            rd.SetParameterValue("motivo", infoLiberacion.motivo);
                        }
                        rd.SetParameterValue("firmaElect", GlobalUtils.CrearFirmaDigital(claveEmpleado, DocumentosEnum.FirmasPrestamos, claveJefe));


                        Session.Add("reporte", rd);

                        break;
                    }
                case ReportesEnum.rptPagare:
                    {
                        setMedidasReporte("HC");
                        rd = new rptPagare();

                        int idEmpleado = Request.QueryString["idEmpleado"].ParseInt();
                        repPagareDTO infoPagare = reportesRHFS.getReportesRHService().GetInfoPagare(idEmpleado);
                        //rd.SetParameterValue("ubicacion", "HERMOSILLO, SON");
                        int claveEmpleado = 0;
                        int claveJefe = 0;
                        if (infoPagare != null)
                        {
                            claveEmpleado = infoPagare.idEmpleado > 0 ? infoPagare.idEmpleado.Value : 0;
                            claveJefe = infoPagare.idJefe > 0 ? infoPagare.idJefe.Value : 0;
                        }

                        var cantSolicitada = (Convert.ToDecimal(infoPagare.cantidadSoli) / 100) * 100;
                        rd.SetParameterValue("fechaActual", DateTime.Now.ToString("dd \\de MMMM \\de yyyy", new System.Globalization.CultureInfo("es-ES")));
                        rd.SetParameterValue("direccionPatronal", infoPagare.direccionPatronal.Trim());
                        rd.SetParameterValue("nombreRegPatronal", infoPagare.nombreRegPatronal.Trim());
                        rd.SetParameterValue("cantidadSoli", cantSolicitada);
                        rd.SetParameterValue("valorLetra", infoPagare.cantidadLetra.Trim());
                        rd.SetParameterValue("nombreCompleto", infoPagare.nombreCompleto.Trim());
                        rd.SetParameterValue("domicilio", infoPagare.domicilio.Trim());
                        rd.SetParameterValue("poblacion", infoPagare.poblacion.Trim());
                        rd.SetParameterValue("telefono", infoPagare.telefono.Trim());
                        rd.SetParameterValue("firmaElect", "");
                        //rd.SetParameterValue("firmaElect", GlobalUtils.CrearFirmaDigital(claveEmpleado, DocumentosEnum.FirmasPrestamos, claveJefe));

                        Session.Add("reporte", rd);

                        break;
                    }
                case ReportesEnum.rptFonacot:
                    {
                        setMedidasReporte("HC");
                        rd = new rptFonacot();
                        repFonacotDTO informacionModal = (repFonacotDTO)Session["fonacotInformacion"];
                        int idEmpleado = Request.QueryString["idEmpleado"].ParseInt();
                        repFonacotDTO infoFonacot = reportesRHFS.getReportesRHService().GetInfoFonacot(idEmpleado);
                        //rd.SetParameterValue("ubicacion", "HERMOSILLO, SON");
                        byte[] fotoFirma = reportesRHFS.getReportesRHService().GetFirmaFormatos();

                        int claveEmpleado = infoFonacot.idEmpleado > 0 ? infoFonacot.idEmpleado.Value : 0;
                        int claveJefe = infoFonacot.idJefe > 0 ? infoFonacot.idJefe.Value : 0;

                        rd.Database.Tables[0].SetDataSource(new List<object>() { new { firma1 = fotoFirma } });
                        rd.SetParameterValue("fechaActual", " Hermosillo, Sonora a " + DateTime.Now.ToString("dd \\de MMMM \\de yyyy", new System.Globalization.CultureInfo("es-ES")));
                        rd.SetParameterValue("nombreCompleto", informacionModal.nombreCompleto.Trim());
                        rd.SetParameterValue("imss", informacionModal.imss.Trim());
                        rd.SetParameterValue("rfc", informacionModal.rfc.Trim());
                        rd.SetParameterValue("curp", informacionModal.curp.Trim());
                        rd.SetParameterValue("nombrePatron", informacionModal.nombrePatron.Trim());
                        rd.SetParameterValue("regPatron", informacionModal.regPatron.Trim());
                        rd.SetParameterValue("nombrePuesto", informacionModal.nombrePuesto.Trim());
                        rd.SetParameterValue("ccDescripcionFonacot", informacionModal.ccDescripcionFonacot.Trim());
                        rd.SetParameterValue("mensualNeto", Convert.ToDecimal(informacionModal.mensualNeto).ToString("C"));
                        rd.SetParameterValue("valorLetra", "(" + informacionModal.valorLetra.Trim() + ").");
                        string fechaIngreso = null;
                        if (infoFonacot.fechaIngreso == fechaIngreso)
                        {
                            rd.SetParameterValue("fechaIngreso", "N/A");
                        }
                        else
                        {
                            rd.SetParameterValue("fechaIngreso", Convert.ToDateTime(infoFonacot.fechaIngreso).ToString("dd \\de MMMM \\de yyyy", new System.Globalization.CultureInfo("es-ES")));
                        }
                        //Quitar y descomentar cuando se necesite firma
                        rd.SetParameterValue("firmaElect", "");
                        //rd.SetParameterValue("firmaElect", GlobalUtils.CrearFirmaDigital(claveEmpleado, DocumentosEnum.FirmasPrestamos, claveJefe));

                        Session.Add("reporte", rd);

                        break;
                    }
                case ReportesEnum.rptGuarderia:
                    {
                        setMedidasReporte("HC");
                        rd = new rptGuarderia();

                        repGuarderiaDTO informacionModal = (repGuarderiaDTO)Session["guarderiaInformacion"];

                        int idEmpleado = Request.QueryString["idEmpleado"].ParseInt();
                        bool esDomDescanso = Convert.ToBoolean(Request.QueryString["domDescanso"]);
                        repGuarderiaDTO infoGuarderia = reportesRHFS.getReportesRHService().GetInfoGuarderia(idEmpleado);
                        //rd.SetParameterValue("ubicacion", "HERMOSILLO, SON");
                        byte[] fotoFirma = reportesRHFS.getReportesRHService().GetFirmaFormatos();

                        int claveEmpleado = infoGuarderia.idEmpleado > 0 ? infoGuarderia.idEmpleado.Value : 0;
                        int claveJefe = infoGuarderia.idJefe > 0 ? infoGuarderia.idJefe.Value : 0;

                        string horarioDomingo = "";

                        if (esDomDescanso)
                        {
                            horarioDomingo = "con descanso el día domingo";
                        }
                        else
                        {
                            horarioDomingo = "Domingos de " + informacionModal.horaEntradaD + " a " + informacionModal.horaSalidaD;
                        }

                        rd.Database.Tables[0].SetDataSource(new List<object>() { new { firma1 = fotoFirma } });
                        rd.SetParameterValue("fechaActual", DateTime.Now.ToString("dd \\de MMMM \\de yyyy", new System.Globalization.CultureInfo("es-ES")));
                        rd.SetParameterValue("guarderia", informacionModal.guarderia.Trim());
                        rd.SetParameterValue("director", informacionModal.director.Trim());
                        rd.SetParameterValue("nombreCompletoGuard", informacionModal.nombreCompletoGuard.Trim());
                        rd.SetParameterValue("imss", informacionModal.imss.Trim());
                        rd.SetParameterValue("rfc", informacionModal.rfc.Trim());
                        rd.SetParameterValue("curp", informacionModal.curp.Trim());
                        rd.SetParameterValue("nombrePatron", informacionModal.nombrePatron.Trim());
                        rd.SetParameterValue("regPatron", informacionModal.regPatron.Trim());
                        rd.SetParameterValue("nombrePuestoGuard", informacionModal.nombrePuestoGuard.Trim());
                        rd.SetParameterValue("fechaIngreso", Convert.ToDateTime(informacionModal.fechaIngreso).ToString("dd \\de MMMM \\de yyyy", new System.Globalization.CultureInfo("es-ES")));
                        rd.SetParameterValue("descripcionCCGuard", informacionModal.descripcionCCGuard.Trim());
                        rd.SetParameterValue("horaEntrada", informacionModal.horaEntrada.Trim());
                        rd.SetParameterValue("horaSalida", informacionModal.horaSalida.Trim());
                        rd.SetParameterValue("horaComida", informacionModal.horaComida.Trim());
                        rd.SetParameterValue("horaEntradaS", informacionModal.horaEntradaS.Trim());
                        rd.SetParameterValue("horaSalidaS", informacionModal.horaSalidaS.Trim());
                        rd.SetParameterValue("nombreHijo", informacionModal.nombreHijo.Trim());
                        rd.SetParameterValue("vacaciones", informacionModal.vacaciones.Trim());
                        rd.SetParameterValue("firmaElect", GlobalUtils.CrearFirmaDigital(claveEmpleado, DocumentosEnum.FirmasPrestamos, claveJefe));
                        rd.SetParameterValue("horarioDomingo", horarioDomingo);

                        Session.Add("reporte", rd);

                        break;
                    }
                case ReportesEnum.rptLactancia:
                    {
                        setMedidasReporte("HC");
                        rd = new rptLactancia();
                        repLactanciaDTO informacionModal = (repLactanciaDTO)Session["lactanciaInformacion"];
                        int idEmpleado = Request.QueryString["idEmpleado"].ParseInt();
                        string tipoHorario = Request.QueryString["tipoHorario"].ToString();
                        repLactanciaDTO infoLactancia = reportesRHFS.getReportesRHService().GetInfoLactancia(idEmpleado);
                        //rd.SetParameterValue("ubicacion", "HERMOSILLO, SON");
                        byte[] fotoFirma = reportesRHFS.getReportesRHService().GetFirmaFormatos();
                        int claveEmpleado = informacionModal.idEmpleado > 0 ? informacionModal.idEmpleado.Value : 0;
                        int claveJefe = informacionModal.idJefe > 0 ? informacionModal.idJefe.Value : 0;
                        string descCarta = "";

                        if (tipoHorario == "especial")
                        {
                            tipoHorario = "horario especial";

                            descCarta = "Determinado.";
                        }
                        //else
                        //{
                        //    descCarta = "de seis meses a partir del día siguiente de la fecha en que termino mi incapacidad por maternidad comprendida del "
                        //     + informacionModal.fechaInicioInca.Value.ToString("dd \\de MMMM \\de yyyy", new System.Globalization.CultureInfo("es-ES"))
                        //     + "al "
                        //     + informacionModal.fechaFinInca.Value.ToString("dd \\de MMMM \\de yyyy", new System.Globalization.CultureInfo("es-ES")) + ".";

                        //}
                        rd.SetParameterValue("bodyCarta", "N/A");
                        rd.Database.Tables[0].SetDataSource(new List<object>() { new { firma1 = fotoFirma } });

                        rd.SetParameterValue("tituloHorarios", "PERMISO " + tipoHorario.ToUpper());

                        rd.SetParameterValue("fechaActual", DateTime.Now.ToString("dd \\de MMMM \\de yyyy", new System.Globalization.CultureInfo("es-ES")));
                        rd.SetParameterValue("nombreCompletoLact", informacionModal.nombreCompletoLact.Trim() ?? "");
                        rd.SetParameterValue("nombrePuestoLact", informacionModal.nombrePuestoLact.Trim() ?? "");
                        rd.SetParameterValue("fechaInicioPermiso", informacionModal.fechaInicioPermiso != null ? informacionModal.fechaInicioPermiso.Value.ToString("dd/MM/yyyy") : "");
                        rd.SetParameterValue("fechaFinPermiso", informacionModal.fechaFinPermiso != null ? informacionModal.fechaFinPermiso.Value.ToString("dd/MM/yyyy") : "");

                        if (informacionModal.fechaInicioInca == null)
                        {
                            rd.SetParameterValue("fechaInicioInca", "N/A");
                            rd.SetParameterValue("fechaFinInca", "N/A");
                        }
                        else
                        {

                            rd.SetParameterValue("fechaInicioInca", informacionModal.fechaInicioInca != null ? informacionModal.fechaInicioInca.Value.ToString("dd/MM/yyyy") : "");
                            rd.SetParameterValue("fechaFinInca", informacionModal.fechaFinInca != null ? informacionModal.fechaFinInca.Value.ToString("dd/MM/yyyy") : "");
                        }


                        rd.SetParameterValue("entradaLunes", informacionModal.entradaLunes.Trim() ?? "");
                        rd.SetParameterValue("salidaLunes", informacionModal.salidaLunes.Trim() ?? "");
                        rd.SetParameterValue("comidaLunes", informacionModal.comidaLunes.Trim() ?? "");
                        rd.SetParameterValue("entradaMartes", informacionModal.entradaMartes.Trim() ?? "");
                        rd.SetParameterValue("salidaMartes", informacionModal.salidaMartes.Trim() ?? "");
                        rd.SetParameterValue("comidaMartes", informacionModal.comidaMartes.Trim() ?? "");
                        rd.SetParameterValue("entradaMiercoles", informacionModal.entradaMiercoles.Trim() ?? "");
                        rd.SetParameterValue("salidaMiercoles", informacionModal.salidaMiercoles.Trim() ?? "");
                        rd.SetParameterValue("comidaMiercoles", informacionModal.comidaMiercoles.Trim() ?? "");
                        rd.SetParameterValue("entradaJueves", informacionModal.entradaJueves.Trim() ?? "");
                        rd.SetParameterValue("salidaJueves", informacionModal.salidaJueves.Trim() ?? "");
                        rd.SetParameterValue("comidaJueves", informacionModal.comidaJueves.Trim() ?? "");
                        rd.SetParameterValue("entradaViernes", informacionModal.entradaViernes.Trim() ?? "");
                        rd.SetParameterValue("salidaViernes", informacionModal.salidaViernes.Trim() ?? "");
                        rd.SetParameterValue("comidaViernes", informacionModal.comidaViernes.Trim() ?? "");
                        rd.SetParameterValue("entradaSabado", informacionModal.entradaSabado.Trim() ?? "");
                        rd.SetParameterValue("salidaSabado", informacionModal.salidaSabado.Trim() ?? "");
                        rd.SetParameterValue("comidaSabado", informacionModal.comidaSabado.Trim() ?? "");
                        rd.SetParameterValue("entradaDomingo", informacionModal.entradaDomingo.Trim() ?? "");
                        rd.SetParameterValue("salidaDomingo", informacionModal.salidaDomingo.Trim() ?? "");
                        rd.SetParameterValue("comidaDomingo", informacionModal.comidaDomingo.Trim() ?? "");

                        rd.SetParameterValue("entradaLunesL", informacionModal.entradaLunesL.Trim() ?? "");
                        rd.SetParameterValue("salidaLunesL", informacionModal.salidaLunesL.Trim() ?? "");
                        rd.SetParameterValue("comidaLunesL", informacionModal.comidaLunesL.Trim() ?? "");
                        rd.SetParameterValue("entradaMartesL", informacionModal.entradaMartesL.Trim() ?? "");
                        rd.SetParameterValue("salidaMartesL", informacionModal.salidaMartesL.Trim() ?? "");
                        rd.SetParameterValue("comidaMartesL", informacionModal.comidaMartesL.Trim() ?? "");
                        rd.SetParameterValue("entradaMiercolesL", informacionModal.entradaMiercolesL.Trim() ?? "");
                        rd.SetParameterValue("salidaMiercolesL", informacionModal.salidaMiercolesL.Trim() ?? "");
                        rd.SetParameterValue("comidaMiercolesL", informacionModal.comidaMiercolesL.Trim() ?? "");
                        rd.SetParameterValue("entradaJuevesL", informacionModal.entradaJuevesL.Trim() ?? "");
                        rd.SetParameterValue("salidaJuevesL", informacionModal.salidaJuevesL.Trim() ?? "");
                        rd.SetParameterValue("comidaJuevesL", informacionModal.comidaJuevesL.Trim() ?? "");
                        rd.SetParameterValue("entradaViernesL", informacionModal.entradaViernesL.Trim() ?? "");
                        rd.SetParameterValue("salidaViernesL", informacionModal.salidaViernesL.Trim() ?? "");
                        rd.SetParameterValue("comidaViernesL", informacionModal.comidaViernesL.Trim() ?? "");
                        rd.SetParameterValue("entradaSabadoL", informacionModal.entradaSabadoL.Trim() ?? "");
                        rd.SetParameterValue("salidaSabadoL", informacionModal.salidaSabadoL.Trim() ?? "");
                        rd.SetParameterValue("comidaSabadoL", informacionModal.comidaSabadoL.Trim() ?? "");
                        rd.SetParameterValue("entradaDomingoL", informacionModal.entradaDomingoL.Trim() ?? "");
                        rd.SetParameterValue("salidaDomingoL", informacionModal.salidaDomingoL.Trim() ?? "");
                        rd.SetParameterValue("comidaDomingoL", informacionModal.comidaDomingoL.Trim() ?? "");

                        rd.SetParameterValue("FirmaEmpleado", GlobalUtils.CrearFirmaDigital(claveEmpleado, DocumentosEnum.FirmasLactancia, claveEmpleado));
                        rd.SetParameterValue("FirmaAutorizante", GlobalUtils.CrearFirmaDigital(claveEmpleado, DocumentosEnum.FirmasLactancia, claveJefe));

                        rd.SetParameterValue("bodyCarta", descCarta);

                        Session.Add("reporte", rd);

                        break;
                    }

                #endregion

                #region INCAPACIDADES
                case ReportesEnum.rptIncapacidades:
                    {
                        setMedidasReporte("HC");
                        rd = new rptIncapacidades();

                        #region SE OBTIENE LOS DATOS DEL EMPLEADO PARA MOSTRAR EN LOS DOCUMENTOS
                        int claveEmpleado = Request.QueryString["claveEmpleado"].ParseInt();

                        VacacionesService vacacionesService = new VacacionesService(new VacacionesDAO());

                        var dictIncapacidades = vacacionesService.GetHistorialIncapacidades(claveEmpleado);

                        var lstIncapacidades = dictIncapacidades["items"] as List<IncapacidadesDTO>;
                        var firstIncapacidades = lstIncapacidades[0];
                        //List<dynamic> objDatosEmpleado = ReclutamientoFS.getReclutamientosService().GetDatosEmpleadoDocumentos(claveEmpleado);

                        //Dictionary<string, object> dataAlta = ReclutamientoFS.getReclutamientosService().GetDatosActualizarEmpleado(claveEmpleado, false);
                        //List<DatosActualizarEmpleadoDTO> datosAlta = dataAlta["lstDatos"] as List<DatosActualizarEmpleadoDTO>;
                        //List<DatosActualizarEmpleadoDTO> datosGrales = dataAlta["lstGenerales"] as List<DatosActualizarEmpleadoDTO>;

                        //Dictionary<string, object> dictFotoEmpleado = ReclutamientoFS.getReclutamientosService().GetFotoEmpleado(new ArchivosDTO { claveEmpleado = objDatosEmpleado[0].clave_empleado });
                        //var fotoEmpleado = dictFotoEmpleado["objRptFotoEmpleado"] as byte[];
                        #endregion

                        var lstDataSet = new List<object>() { };

                        foreach (var item in lstIncapacidades)
                        {
                            lstDataSet.Add(new
                            {
                                descIncap = item.descIncap,
                                codigoIncap = item.codigoIncap,
                                totalDias = item.totalDias,
                                fechaInicio = item.fechaInicio.ToString("dd/MM/yyyy"),
                                fechaTerminacion = item.fechaTerminacion.ToString("dd/MM/yyyy"),
                                ccDesc = item.ccDesc,
                                nombre_corto = item.nombre_corto
                            });
                        }

                        rd.Database.Tables[0].SetDataSource(lstDataSet);

                        rd.SetParameterValue("claveEmpleado", firstIncapacidades.clave_empleado);
                        rd.SetParameterValue("nombreCompleto", firstIncapacidades.nombreCompleto);
                        rd.SetParameterValue("estatus", firstIncapacidades.descEstatus);

                        Session.Add("reporte", rd);

                        break;
                    }
                #endregion

                #region REPORTE 360
                case ReportesEnum.rptReporte360:
                    {
                        setMedidasReporte("HC");
                        rd = new rptReporte360();

                        // SE GENERA DTO PARA OBTENER LA INFORMACIÓN DEL REPORTE
                        Reporte360DTO objDTO = new Reporte360DTO();
                        objDTO.idRelacion = Convert.ToInt32(Request.QueryString["idRelacion"]);
                        objDTO.idPersonalEvaluado = Convert.ToInt32(Request.QueryString["idPersonalEvaluado"]);
                        Dictionary<string, object> objResultado = evaluacion360FS.getEvaluacion360().GenerarReporte360(objDTO);

                        #region CRITERIOS
                        var lstImagenesMedidorCriterio = objResultado["lstImagenesMedidorCriterio"] as List<string>;
                        List<string> lstBase64 = new List<string>();
                        foreach (var item in lstImagenesMedidorCriterio)
                        {
                            lstBase64.Add(item);
                        }

                        int contador = -1;
                        string imagenBase64 = string.Empty;
                        var lstCriteriosDTO = new List<object>() { };
                        var lstCriterios = objResultado["lstCriteriosRelCuestionario"] as List<tblRH_Eval360_CatCriterios>;
                        foreach (var item in lstCriterios)
                        {
                            contador++;
                            imagenBase64 = lstBase64[contador];
                            byte[] imagenBytes = Convert.FromBase64String(imagenBase64.Split(',')[1]);
                            lstCriteriosDTO.Add(new
                            {
                                limInferior = item.limInferior,
                                limSuperior = item.limSuperior,
                                etiqueta = item.etiqueta,
                                descripcionEtiqueta = item.etiqueta,
                                color = item.color,
                                idCuestionario = item.idCuestionario,
                                idPlantilla = item.idPlantilla,
                                medidorImagen = imagenBytes,
                                R = item.R,
                                G = item.G,
                                B = item.B
                            });
                        }
                        rd.Database.Tables[0].SetDataSource(lstCriteriosDTO);
                        #endregion

                        #region SE OBTIENE LOS 6 ICONOS
                        var lstIconos = objResultado["lstIconos"] as List<string>;
                        List<string> lstBase64_Iconos = new List<string>();
                        foreach (var item in lstIconos)
                        {
                            lstBase64_Iconos.Add(item);
                        }

                        string icono = lstBase64_Iconos[0];
                        byte[] imagenBytes_iconoUno = Convert.FromBase64String(icono.Split(',')[1]);

                        icono = lstBase64_Iconos[1];
                        byte[] imagenBytes_iconoDos = Convert.FromBase64String(icono.Split(',')[1]);

                        icono = lstBase64_Iconos[2];
                        byte[] imagenBytes_iconoTres = Convert.FromBase64String(icono.Split(',')[1]);

                        icono = lstBase64_Iconos[3];
                        byte[] imagenBytes_iconoCuatro = Convert.FromBase64String(icono.Split(',')[1]);

                        icono = lstBase64_Iconos[4];
                        byte[] imagenBytes_iconoCinco = Convert.FromBase64String(icono.Split(',')[1]);

                        icono = lstBase64_Iconos[5];
                        byte[] imagenBytes_iconoSeis = Convert.FromBase64String(icono.Split(',')[1]);
                        #endregion

                        #region PROMEDIO POR GRUPO

                        // IMAGEN PROMEDIO
                        var lstPromedioPorGrupoDTO = new List<object>() { };
                        var lstPromedioPorGrupo = objResultado["lstPromedioPorGrupo"] as List<Reporte360DTO>;
                        foreach (var item in lstPromedioPorGrupo)
                        {
                            imagenBase64 = lstBase64[item.ordenImagenPromedio];
                            byte[] imagenBytes = Convert.FromBase64String(imagenBase64.Split(',')[1]);

                            lstPromedioPorGrupoDTO.Add(new
                            {
                                nombreGrupo = item.nombreGrupo,
                                promedio_Autoevaluacion = (decimal)item.promedio_Autoevaluacion > 0 ? item.promedio_Autoevaluacion.ToString("N2") : "N/A",
                                promedio_ClientesInternos = (decimal)item.promedio_ClientesInternos > 0 ? item.promedio_ClientesInternos.ToString("N2") : "N/A",
                                promedio_Colaboradores = (decimal)item.promedio_Colaboradores > 0 ? item.promedio_Colaboradores.ToString("N2") : "N/A",
                                promedio_Jefe = (decimal)item.promedio_Jefe > 0 ? item.promedio_Jefe.ToString("N2") : "N/A",
                                promedio_Pares = (decimal)item.promedio_Pares > 0 ? item.promedio_Pares.ToString("N2") : "N/A",
                                promedio = (decimal)item.promedio,
                                R = item.R,
                                G = item.G,
                                B = item.B,
                                R_Autoevaluacion = item.R_Autoevaluacion,
                                G_Autoevaluacion = item.G_Autoevaluacion,
                                B_Autoevaluacion = item.B_Autoevaluacion,
                                R_Pares = item.R_Pares,
                                G_Pares = item.G_Pares,
                                B_Pares = item.B_Pares,
                                R_ClientesInternos = item.R_ClientesInternos,
                                G_ClientesInternos = item.G_ClientesInternos,
                                B_ClientesInternos = item.B_ClientesInternos,
                                R_Jefe = item.R_Jefe,
                                G_Jefe = item.G_Jefe,
                                B_Jefe = item.B_Jefe,
                                R_Colaboradores = item.R_Colaboradores,
                                G_Colaboradores = item.G_Colaboradores,
                                B_Colaboradores = item.B_Colaboradores,
                                R_Promedio = item.R_Promedio,
                                G_Promedio = item.G_Promedio,
                                B_Promedio = item.B_Promedio,
                                iconoUno = imagenBytes_iconoUno,
                                iconoDos = imagenBytes_iconoDos,
                                iconoTres = imagenBytes_iconoTres,
                                iconoCuatro = imagenBytes_iconoCuatro,
                                iconoCinco = imagenBytes_iconoCinco,
                                iconoSeis = imagenBytes_iconoSeis,
                                imagenPromedio = imagenBytes
                            });
                        }
                        rd.Database.Tables[1].SetDataSource(lstPromedioPorGrupoDTO);
                        #endregion

                        #region PROMEDIO POR COMPETENCIA
                        var lstPromedioPorCompetenciaDTO = new List<object>() { };
                        var lstPromedioPorCompetencia = objResultado["lstPromedioPorCompetencia"] as List<Reporte360DTO>;
                        foreach (var item in lstPromedioPorCompetencia)
                        {
                            imagenBase64 = lstBase64[item.ordenImagenPromedio];
                            byte[] imagenBytes = Convert.FromBase64String(imagenBase64.Split(',')[1]);

                            lstPromedioPorCompetenciaDTO.Add(new
                            {
                                nombreCompetencia = item.nombreCompetencia,
                                promedio_Autoevaluacion = (decimal)item.promedio_Autoevaluacion > 0 ? item.promedio_Autoevaluacion.ToString("N2") : "N/A",
                                promedio_ClientesInternos = (decimal)item.promedio_ClientesInternos > 0 ? item.promedio_ClientesInternos.ToString("N2") : "N/A",
                                promedio_Colaboradores = (decimal)item.promedio_Colaboradores > 0 ? item.promedio_Colaboradores.ToString("N2") : "N/A",
                                promedio_Jefe = (decimal)item.promedio_Jefe > 0 ? item.promedio_Jefe.ToString("N2") : "N/A",
                                promedio_Pares = (decimal)item.promedio_Pares > 0 ? item.promedio_Pares.ToString("N2") : "N/A",
                                promedio = (decimal)item.promedio,
                                R = item.R,
                                G = item.G,
                                B = item.B,
                                R_Autoevaluacion = item.R_Autoevaluacion,
                                G_Autoevaluacion = item.G_Autoevaluacion,
                                B_Autoevaluacion = item.B_Autoevaluacion,
                                R_Pares = item.R_Pares,
                                G_Pares = item.G_Pares,
                                B_Pares = item.B_Pares,
                                R_ClientesInternos = item.R_ClientesInternos,
                                G_ClientesInternos = item.G_ClientesInternos,
                                B_ClientesInternos = item.B_ClientesInternos,
                                R_Jefe = item.R_Jefe,
                                G_Jefe = item.G_Jefe,
                                B_Jefe = item.B_Jefe,
                                R_Colaboradores = item.R_Colaboradores,
                                G_Colaboradores = item.G_Colaboradores,
                                B_Colaboradores = item.B_Colaboradores,
                                R_Promedio = item.R_Promedio,
                                G_Promedio = item.G_Promedio,
                                B_Promedio = item.B_Promedio,
                                iconoUno = imagenBytes_iconoUno,
                                iconoDos = imagenBytes_iconoDos,
                                iconoTres = imagenBytes_iconoTres,
                                iconoCuatro = imagenBytes_iconoCuatro,
                                iconoCinco = imagenBytes_iconoCinco,
                                iconoSeis = imagenBytes_iconoSeis,
                                imagenPromedio = imagenBytes
                            });
                        }
                        rd.Database.Tables[2].SetDataSource(lstPromedioPorCompetenciaDTO);

                        imagenBase64 = (string)Session["img"];
                        byte[] imagenBytesCompetencia = Convert.FromBase64String(imagenBase64.Split(',')[1]);
                        List<GenerarReporteGraficaDTO> objTendencia = new List<GenerarReporteGraficaDTO>();
                        objTendencia.Add(new GenerarReporteGraficaDTO
                        {
                            graficaTendencia = imagenBytesCompetencia
                        });
                        rd.Database.Tables[3].SetDataSource(objTendencia);
                        #endregion

                        #region SE OBTIENE EL LOGO DE LA EMPRESA
                        rd.Database.Tables[4].SetDataSource(getInfoEnca("", "CONCILIACIÓN DE HOROMETROS"));
                        #endregion

                        #region SE OBTIENE IMAGEN FOOTER
                        List<string> lstFooter = new List<string>();
                        var lstImagenFooterDTO = new List<object>() { };
                        var lstImagenFooter = objResultado["lstFooter"] as List<string>;
                        foreach (var item in lstImagenFooter)
                        {
                            lstFooter.Add(item.ToString());
                        }

                        foreach (var item in lstFooter)
                        {
                            imagenBase64 = item.ToString();
                            byte[] imagenBytes = Convert.FromBase64String(imagenBase64.Split(',')[1]);
                            lstImagenFooterDTO.Add(new
                            {
                                imagenFooter = imagenBytes
                            });
                        }
                        rd.Database.Tables[5].SetDataSource(lstImagenFooterDTO);
                        #endregion

                        #region NOMBRE EVALUADO | NOMBRE JEFE | PUESTO | FECHA DE INGRESO | COMENTARIO GENERAL
                        string nombreCompleto = objResultado["nombreCompleto"].ToString();
                        rd.SetParameterValue("nombreEvaluado", nombreCompleto);

                        string nombreJefe = objResultado["nombreJefe"].ToString();
                        rd.SetParameterValue("nombreJefe", nombreJefe);

                        string puesto = objResultado["puesto"].ToString();
                        rd.SetParameterValue("puesto", puesto);

                        DateTime fechaIngreso = Convert.ToDateTime(objResultado["fechaIngreso"]);
                        rd.SetParameterValue("fechaIngreso", fechaIngreso);

                        string comentarioGeneral = objResultado["comentarioGeneral"].ToString();
                        rd.SetParameterValue("comentarioGeneral", comentarioGeneral);
                        #endregion

                        Session.Add("reporte", rd);
                        break;
                    }
                #endregion

                #region AMONESTACIÓN
                case ReportesEnum.rptAmonestacion:
                    {
                        setMedidasReporte("HC");
                        rd = new rptAmonestacion();

                        // SE GENERA DTO PARA OBTENER LA INFORMACIÓN DEL REPORTE
                        ReporteActoCondicionCH objDTO = new ReporteActoCondicionCH();
                        objDTO.idTipoReporte = (int)TipoReporteEnum.AMONESTACION;
                        objDTO.idActo = Convert.ToInt32(Request.QueryString["idActo"]);
                        objDTO.fechaReporte = Request.QueryString["fechaReporte"];
                        objDTO.parrafoUno = Request.QueryString["parrafoUno"];
                        Dictionary<string, object> objResultado = actoCondicionCHFS.GetActoCondicionCHService().GenerarReporte(objDTO);

                        string fechaReporte = objResultado["fechaReporte"].ToString();
                        rd.SetParameterValue("fechaReporte", fechaReporte);

                        string nombreTrabajador = objResultado["nombreTrabajador"].ToString();
                        rd.SetParameterValue("nombreTrabajador", nombreTrabajador);

                        string razonSocialEmpresa = objResultado["razonSocialEmpresa"].ToString();
                        rd.SetParameterValue("razonSocialEmpresa", razonSocialEmpresa);

                        string parrafoUno = objResultado["parrafoUno"].ToString();
                        rd.SetParameterValue("parrafoUno", parrafoUno);

                        string nombreQuienAplica = objResultado["nombreQuienAplica"].ToString();
                        rd.SetParameterValue("nombreQuienAplica", nombreQuienAplica);

                        Dictionary<string, object> resGetInfoActosCH = GetInfoActosCH();
                        rd.SetParameterValue("lblRazonSocial", (string)resGetInfoActosCH["razonSocial"]);
                        rd.SetParameterValue("lblDireccion", (string)resGetInfoActosCH["direccion"]);
                        rd.SetParameterValue("lblCorreo", (string)resGetInfoActosCH["correo"]);

                        Session.Add("reporte", rd);
                        break;
                    }
                #endregion

                #region SUSPENSIÓN
                case ReportesEnum.rptSuspension:
                    {
                        setMedidasReporte("HC");
                        rd = new rptSuspension();

                        // SE GENERA DTO PARA OBTENER LA INFORMACIÓN DEL REPORTE
                        ReporteActoCondicionCH objDTO = new ReporteActoCondicionCH();
                        objDTO.idTipoReporte = (int)TipoReporteEnum.SUSPENSION;
                        objDTO.idActo = Convert.ToInt32(Request.QueryString["idActo"]);
                        objDTO.fechaReporte = Request.QueryString["fechaReporte"];
                        objDTO.parrafoUno = Request.QueryString["parrafoUno"];
                        Dictionary<string, object> objResultado = actoCondicionCHFS.GetActoCondicionCHService().GenerarReporte(objDTO);

                        string fechaReporte = objResultado["fechaReporte"].ToString();
                        rd.SetParameterValue("fechaReporte", fechaReporte);

                        string nombreTrabajador = objResultado["nombreTrabajador"].ToString();
                        rd.SetParameterValue("nombreTrabajador", nombreTrabajador);

                        string parrafoUno = objResultado["parrafoUno"].ToString();
                        rd.SetParameterValue("parrafoUno", parrafoUno);

                        string razonSocialEmpresa = objResultado["razonSocialEmpresa"].ToString();
                        rd.SetParameterValue("razonSocialEmpresa", razonSocialEmpresa);

                        Dictionary<string, object> resGetInfoActosCH = GetInfoActosCH();
                        rd.SetParameterValue("lblRazonSocial", (string)resGetInfoActosCH["razonSocial"]);
                        rd.SetParameterValue("lblDireccion", (string)resGetInfoActosCH["direccion"]);
                        rd.SetParameterValue("lblCorreo", (string)resGetInfoActosCH["correo"]);

                        Session.Add("reporte", rd);
                        break;
                    }
                #endregion

                #region CARTA DE RESPONSABILIDAD
                case ReportesEnum.rptCartaResponsabilidad:
                    {
                        setMedidasReporte("HC");
                        rd = new rptCartaResponsabilidad();

                        // SE GENERA DTO PARA OBTENER LA INFORMACIÓN DEL REPORTE
                        ReporteActoCondicionCH objDTO = new ReporteActoCondicionCH();
                        objDTO.idTipoReporte = (int)TipoReporteEnum.CARTA_RESPONSABILIDAD;
                        objDTO.idActo = Convert.ToInt32(Request.QueryString["idActo"]);
                        objDTO.fechaReporte = Request.QueryString["fechaReporte"];
                        objDTO.parrafoUno = Request.QueryString["parrafoUno"];
                        Dictionary<string, object> objResultado = actoCondicionCHFS.GetActoCondicionCHService().GenerarReporte(objDTO);

                        string fechaReporte = objResultado["fechaReporte"].ToString();
                        rd.SetParameterValue("fechaReporte", fechaReporte);

                        string nombreTrabajador = objResultado["nombreTrabajador"].ToString();
                        rd.SetParameterValue("nombreTrabajador", nombreTrabajador);

                        string parrafoUno = objResultado["parrafoUno"].ToString();
                        rd.SetParameterValue("parrafoUno", parrafoUno);

                        string razonSocialEmpresa = objResultado["razonSocialEmpresa"].ToString();
                        rd.SetParameterValue("razonSocialEmpresa", razonSocialEmpresa);

                        string nombreQuienAplica = objResultado["nombreQuienAplica"].ToString();
                        rd.SetParameterValue("nombreQuienAplica", nombreQuienAplica);

                        Dictionary<string, object> resGetInfoActosCH = GetInfoActosCH();
                        rd.SetParameterValue("lblRazonSocial", (string)resGetInfoActosCH["razonSocial"]);
                        rd.SetParameterValue("lblDireccion", (string)resGetInfoActosCH["direccion"]);
                        rd.SetParameterValue("lblCorreo", (string)resGetInfoActosCH["correo"]);

                        Session.Add("reporte", rd);
                        break;
                    }
                #endregion

                #region ACTA ADMINISTRATIVA
                case ReportesEnum.rptActaAdministrativa:
                    {
                        setMedidasReporte("HC");
                        rd = new rptActaAdministrativa();

                        // SE GENERA DTO PARA OBTENER LA INFORMACIÓN DEL REPORTE
                        ReporteActoCondicionCH objDTO = new ReporteActoCondicionCH();
                        objDTO.idTipoReporte = (int)TipoReporteEnum.ACTA_ADMINISTRATIVA;
                        objDTO.idActo = Convert.ToInt32(Request.QueryString["idActo"]);
                        objDTO.parrafoUno = Request.QueryString["parrafoUno"];
                        Dictionary<string, object> objResultado = actoCondicionCHFS.GetActoCondicionCHService().GenerarReporte(objDTO);

                        string nombreTrabajador = objResultado["nombreTrabajador"].ToString();
                        rd.SetParameterValue("nombreTrabajador", nombreTrabajador);

                        string parrafoUno = objResultado["parrafoUno"].ToString();
                        rd.SetParameterValue("parrafoUno", parrafoUno);

                        string nombreQuienAplica = objResultado["nombreQuienAplica"].ToString();
                        rd.SetParameterValue("nombreQuienAplica", nombreQuienAplica);

                        Dictionary<string, object> resGetInfoActosCH = GetInfoActosCH();
                        rd.SetParameterValue("lblRazonSocial", (string)resGetInfoActosCH["razonSocial"]);
                        rd.SetParameterValue("lblDireccion", (string)resGetInfoActosCH["direccion"]);
                        rd.SetParameterValue("lblCorreo", (string)resGetInfoActosCH["correo"]);

                        Session.Add("reporte", rd);
                        break;
                    }
                #endregion

                #region CALENDARIOS SUBCONTRATISTAS
                case ReportesEnum.rptCalendarioSubContratistas:
                    {
                        setMedidasReporte("HC");
                        rd = new rptCalendarioSubContratistas();
                        string cc = Request.QueryString["cc"];
                        string nombreSubC = Request.QueryString["nombreSubC"];

                        string imagenBase64 = (string)Session["imgCalendarioSubcontratistas"];
                        byte[] imagenBytes = Convert.FromBase64String(imagenBase64.Split(',')[1]);

                        var calendarioObj = new
                        {
                            img = imagenBytes
                        };

                        rd.Database.Tables[0].SetDataSource(new[] { calendarioObj });
                        rd.Database.Tables[1].SetDataSource(getInfoEnca("CALENDARIO DE EVALUACIONES A SUBCONTRATISTA", ""));

                        rd.SetParameterValue("fecha", DateTime.Now);
                        rd.SetParameterValue("cc", cc);
                        rd.SetParameterValue("nombreSubC", nombreSubC);
                        //rd.SetParameterValue("mensualCumplimiento", );

                        Session.Add("reporte", rd);
                        break;
                    }
                #endregion

                #region TABULADORES
                case ReportesEnum.rptTabuladores:
                    {
                        setMedidasReporte("HC");
                        rd = new rptTabuladores();

                        TabuladoresDTO objDTO = new Core.DTO.RecursosHumanos.Reclutamientos.TabuladoresDTO();
                        objDTO.cc = Request.QueryString["cc"];
                        Dictionary<string, object> objResultado = ReclutamientoFS.getReclutamientosService().GetReporteTabuladores(objDTO.cc);

                        #region SE LLENA LA TABLA DE TABULADORES
                        var lstTabuladores = objResultado["lstTabuladoresDTO"] as List<TabuladoresDTO>;
                        List<object> lstTabuladoresDTO = new List<object>() { };
                        foreach (var item in lstTabuladores)
                        {
                            lstTabuladoresDTO.Add(new
                            {
                                idPuesto = item.idPuesto,
                                puesto = item.puesto,
                                tipoNomina = item.strTipoNomina,
                                salarioBase = item.salarioBase,
                                complemento = item.complementoReporte,
                                bonoSistema = item.bonoZona,
                                totalNominal = item.totalNominal,
                                totalMensual = item.totalMensual
                            });
                        }
                        rd.Database.Tables[0].SetDataSource(lstTabuladoresDTO);
                        rd.Database.Tables[1].SetDataSource(getInfoEnca("NADA", "NADA"));
                        #endregion

                        // PARAMETROS
                        string nombreEmpresa = objResultado["nombreEmpresa"].ToString();
                        rd.SetParameterValue("empresa", !string.IsNullOrEmpty(nombreEmpresa) ? nombreEmpresa : " ");

                        string ccDescripcion = objResultado["ccDescripcion"].ToString();
                        rd.SetParameterValue("cc", !string.IsNullOrEmpty(ccDescripcion) ? ccDescripcion : " ");

                        DateTime fechaActual = Convert.ToDateTime(objResultado["fechaActual"]);
                        rd.SetParameterValue("fechaActual", fechaActual.ToShortDateString());

                        string idTab = objResultado["idTab"].ToString();
                        rd.SetParameterValue("idTab", !string.IsNullOrEmpty(idTab) ? idTab : " ");

                        Session.Add("reporte", rd);
                        break;
                    }
                #endregion

                #region CUENTAS POR COBRAR
                case ReportesEnum.rptCuentasPorCobrar:
                    {
                        setMedidasReporte("HC");
                        rd = new rptCuentasPorCobrar();

                        DateTime fechaCorte = Convert.ToDateTime(Request.QueryString["fechaCorte"]);
                        //int idDivision = Convert.ToInt32(Request.QueryString["idDivision"]);
                        //string descDivision = Request.QueryString["descDivision"] as string;

                        Dictionary<string, object> dictFacturas = rentabilidadfs.getRentabilidadDAO().getLstCXCReporte(new Core.DTO.Maquinaria.Reporte.Kubrix.BusqKubrixDTO
                        {
                            fechaFin = fechaCorte,
                            //idDivision = idDivision,
                        });

                        var lstFacturas = dictFacturas["items"] as List<CuentasPendientesDTO>;

                        List<object> lstFacturasDs = new List<object>() { };
                        decimal totalImporte = 0;
                        decimal totalPronostico = 0;

                        foreach (var item in lstFacturas)
                        {
                            if (item.esCorte)
                            {
                                lstFacturasDs.Add(new
                                {
                                    factura = item.factura,
                                    cliente = item.responsable,
                                    cc = "[" + item.areaCuenta + "] " + item.areaCuentaDesc,
                                    importe = item.monto,
                                    pronostico = item.montoPronosticado,
                                    idDivision = item.idDivision,
                                    descDivision = item.descDivision
                                });

                                totalImporte += item.monto;
                                totalPronostico += item.montoPronosticado;
                            }
                        }

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("", ""));
                        rd.Database.Tables[1].SetDataSource(lstFacturasDs);

                        //rd.SetParameterValue("division", descDivision);
                        rd.SetParameterValue("fechaCorte", fechaCorte.ToString("dd/MM/yyyy"));
                        rd.SetParameterValue("totalImporte", totalImporte);
                        rd.SetParameterValue("totalPronostico", totalPronostico);

                        Session.Add("reporte", rd);
                        break;
                    }
                #endregion

                #region CincoS
                case ReportesEnum.rptSeguimientoPlanAccion:
                    {
                        setMedidasReporte("HC");
                        rd = new rptSeguimientoPlanAccion();

                        string cc = Request.QueryString["cc"];
                        int areaId = Convert.ToInt32(Request.QueryString["areaId"]);
                        DateTime fechaInicio = Convert.ToDateTime(Request.QueryString["fechaInicio"]);
                        DateTime fechaFinal = Convert.ToDateTime(Request.QueryString["fechaFinal"]);

                        Dictionary<string, object> objResultado = CincoSFS.GetCincoSService().llenarTablaPlanAccion(new AuditoriaDTO() { cc = cc, areaId = areaId }, fechaInicio, fechaFinal);

                        var segPlanAccion = objResultado["items"] as List<SeguimientoPlanAccionDTO>;
                        using (var ctx = new MainContext())
                        {
                            var areaDescripcion = ctx.tbl5s_Area.Where(x => x.registroActivo && x.id == areaId).FirstOrDefault().nombre;
                            var ccDescripcion = ctx.tblP_CC.Where(x => x.cc == cc).FirstOrDefault().descripcion;



                            List<object> segPlanAccionDesc = new List<object>() { };
                            foreach (var item in segPlanAccion)
                            {
                                segPlanAccionDesc.Add(new
                                {
                                    id = item.id,
                                    deteccion = item.deteccion,
                                    descripcion = item.descripcion,
                                    medida = item.medida,
                                    fechaCompromiso = item.fechaCompromiso.ToString("dd/MM/yyyy"),
                                    lider = item.lider,
                                    tiempoTranscurrido = item.tiempoTranscurrido,
                                    //cc=item.cc,
                                    //area=item.area

                                });
                            }
                            rd.Database.Tables[0].SetDataSource(getInfoEnca("", ""));
                            rd.Database.Tables[1].SetDataSource(segPlanAccionDesc);
                            rd.SetParameterValue("fechaActual", DateTime.Now.ToString("dd/MM/yyyy"));
                            rd.SetParameterValue("ccDescripcion", ccDescripcion.Trim());
                            rd.SetParameterValue("areaDescripcion", areaDescripcion.Trim());

                            //rd.SetParameterValue("descripcion", "");
                            //rd.SetParameterValue("medida", "");
                            //rd.SetParameterValue("fechaCompromiso", "");
                            //rd.SetParameterValue("tiempoTranscurrido", "");



                        }
                        Session.Add("reporte", rd);
                        break;
                    }


                #region Reporte Ejecutivo
                case ReportesEnum.rptReporteEjecutivo5s:
                    {
                        setMedidasReporte("HC");
                        rd = new rptReporteEjecutivo5s();

                        ReporteEjecutivo5sDTO infoReporteEjecutivo = new ReporteEjecutivo5sDTO();
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("", ""));

                        rd.SetParameterValue("proyecto", "");
                        rd.SetParameterValue("area", "");
                        rd.SetParameterValue("fechaActual", "");
                        rd.SetParameterValue("tabla5s", "Tabla 5s En proyecto");
                        rd.SetParameterValue("grafica5s", "Grafica Barra 5s En proyecto");
                        rd.SetParameterValue("graficaPentagono5s", "Grafica Pentagono 5s En proyecto");
                        rd.SetParameterValue("contenidoTendenciaAnula", "Contenido Tendencia Anula");


                        Session.Add("reporte", rd);

                        break;
                    }



                #endregion

                case ReportesEnum.rptCincoSCalendario:
                    {
                        setMedidasReporte("HC");
                        rd = new rptCincoSCalendario();
                        string ccs = Request.QueryString["ccs"];

                        string imagenBase64 = (string)Session["imgCalendarioCincoS"];
                        byte[] imagenBytes = Convert.FromBase64String(imagenBase64.Split(',')[1]);

                        var calendarioObj = new
                        {
                            img = imagenBytes
                        };

                        //SeguimientoPlanAccionDTO infoTablaPlanAccion = new SeguimientoPlanAccionDTO();
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("", ""));
                        rd.Database.Tables[1].SetDataSource(new[] { calendarioObj });

                        rd.SetParameterValue("ccs", ccs);
                        rd.SetParameterValue("fecha", DateTime.Now.ToString("dd/MM/yyyy"));

                        Session.Add("reporte", rd);

                        break;
                    }

                case ReportesEnum.rptCincoSAuditorias:
                    {
                        Session.Remove("rptAuditoriaCincoS");

                        setMedidasReporte("HC");
                        rd = new rptCincoSAuditorias();

                        string ccs = Request.QueryString["ccs"];
                        string auditor = Request.QueryString["auditor"];
                        int checkListId = Convert.ToInt32(Request.QueryString["checkListId"]);
                        int idAudi = Convert.ToInt32(Request.QueryString["idAudi"]);

                        List<dynamic> lstInspecciones = new List<dynamic>();

                        var dictInspecciones = CincoSFS.GetCincoSService().GetInspeccionesRelCheckListReporte(new AuditoriaDTO()
                        {
                            id = idAudi,
                            checkListId = checkListId,

                        });

                        List<AuditoriaDetDTO> lstInspeccionesReporte = dictInspecciones["lstInspeccionesReporte"] as List<AuditoriaDetDTO>;

                        string area = dictInspecciones["area"] as string;
                        decimal porcHead = Convert.ToDecimal(dictInspecciones["porcHead"]);
                        string labelEstatusAuditoria = dictInspecciones["labelEstatusAuditoria"] as string;
                        string labelAccionesAuditoria = dictInspecciones["labelAccionesAuditoria"] as string;

                        foreach (var item in lstInspeccionesReporte)
                        {
                            lstInspecciones.Add(new
                            {
                                inspeccion = item.descInspeccion,
                                deteccion = File.ReadAllBytes(item.rutaDeteccion),
                                aprobado = item.respuesta == 1 ? "OK" : "NO OK",
                                medida = File.ReadAllBytes(item.rutaMedida),
                                observaciones = item.descripcion,
                                fecha = item.fecha.HasValue ? item.fecha.Value.ToString("dd/MM/yyyy") : "",
                                responsable = item.nombreUsuario5s
                            });
                        }

                        //string imagenBase64 = (string)Session["imgCalendarioCincoS"];
                        //byte[] imagenBytes = Convert.FromBase64String(imagenBase64.Split(',')[1]);

                        //var calendarioObj = new
                        //{
                        //    img = imagenBytes
                        //};

                        //SeguimientoPlanAccionDTO infoTablaPlanAccion = new SeguimientoPlanAccionDTO();
                        rd.Database.Tables[0].SetDataSource(getInfoEnca("", ""));
                        rd.Database.Tables[1].SetDataSource(lstInspecciones);

                        rd.SetParameterValue("ccs", ccs);
                        rd.SetParameterValue("fecha", DateTime.Now.ToString("dd/MM/yyyy"));
                        rd.SetParameterValue("porcHead", porcHead + " %");
                        rd.SetParameterValue("area", area);
                        rd.SetParameterValue("auditor", auditor);
                        rd.SetParameterValue("labelEstatusAuditoria", labelEstatusAuditoria);
                        rd.SetParameterValue("labelAccionesAuditoria", labelAccionesAuditoria);

                        MemoryStream ms = new MemoryStream();
                        var s = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                        s.Seek(0, SeekOrigin.Begin);
                        s.CopyTo(ms);

                        var reportesCincoS = new List<MultiplesDTO>();
                        reportesCincoS.Add(new MultiplesDTO
                        {
                            reporte = ms.ToArray(),
                            nombre = "Reporte seguimiento auditoria"
                        });

                        Session["rptAuditoriaCincoS"] = reportesCincoS;

                        Session.Add("reporte", rd);

                        break;
                    }
                #endregion

                #region CERTIFICADO DE TRABAJO
                case ReportesEnum.rptCertificadoTrabajo:
                    {
                        setMedidasReporte("HC");
                        rd = new rptCertificadoTrabajo();

                        // SE GENERA DTO PARA OBTENER LA INFORMACIÓN DEL REPORTE
                        ReporteCertificadoTrabajoDTO objDTO = new ReporteCertificadoTrabajoDTO();
                        objDTO.id = Convert.ToInt32(Request.QueryString["id"]);
                        ReporteCertificadoTrabajoDTO objResultado = capacitacionFS.GetCapacitacionService().GetInformacionCertificadoTrabajo(objDTO);

                        var lstPromedioPorGrupoDTO = new List<object>() { };
                        lstPromedioPorGrupoDTO.Add(new
                        {
                            firma = objResultado.imagen
                        });
                        rd.Database.Tables[0].SetDataSource(lstPromedioPorGrupoDTO);

                        string nombreEmpresa = objResultado.nombreEmpresa.ToString();
                        rd.SetParameterValue("nombreEmpresa", nombreEmpresa);

                        string nombreEmpleado = objResultado.nombreEmpleado.ToString();
                        string puesto = objResultado.puesto.ToString();
                        string nombreEmpleadoPuesto = string.Format("{0} {1}", nombreEmpleado, puesto);
                        rd.SetParameterValue("nombreEmpleado", nombreEmpleadoPuesto);

                        rd.SetParameterValue("puesto", puesto);

                        string nombreCurso = objResultado.nombreCurso.ToString();
                        rd.SetParameterValue("nombreCurso", nombreCurso);

                        string cc = objResultado.cc.ToString();
                        rd.SetParameterValue("cc", cc);

                        DateTime fechaCurso = Convert.ToDateTime(objResultado.fechaCurso);
                        rd.SetParameterValue("fechaCurso", fechaCurso.ToShortDateString());

                        DateTime fechaVencimiento = Convert.ToDateTime(objResultado.fechaVencimiento);
                        rd.SetParameterValue("fechaVencimiento", fechaVencimiento.ToShortDateString());

                        string calificacion = objResultado.calificacion.ToString();
                        rd.SetParameterValue("calificacion", calificacion);

                        Session.Add("reporte", rd);
                        break;
                    }
                #endregion

                #region REPORTE TABULADORES
                case ReportesEnum.rptRepTabuladores:
                    {
                        setMedidasReporte("HC");
                        rd = new rptRepTabuladores();

                        var objParams = Session["objParamDTOPdf"] as TabuladorDTO;

                        var dictRepTabuladores = tabuladoresFS.GetTabuladoresService().GetTabuladoresReportePdf(objParams);
                        var lstTabuladores = dictRepTabuladores["lstTabPuestos"] as List<RepTabuladoresDTO>;

                        if (objParams.lstDescCC.Count() == 0)
                        {
                            var _cc = tabuladoresFS.GetTabuladoresService().GetCCLineaNegocios(objParams.lstFK_LineaNegocio);
                            objParams.lstDescCC.AddRange(_cc);
                        }

                        string lstLineasNegocio = String.Join(", ", objParams.lstDescLineaNegocio);
                        string lstCC = String.Join(", ", objParams.lstDescCC);

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Reporte de Tabuladores.", "Dirección de Capital Humano"));
                        rd.Database.Tables[1].SetDataSource(lstTabuladores);
                        rd.Database.Tables[2].SetDataSource(objParams.lstReporteAutorizantesDTO);

                        rd.SetParameterValue("lstLineasNegocio", lstLineasNegocio);
                        rd.SetParameterValue("lstCC", lstCC);
                        rd.SetParameterValue("año", objParams.añoReporte);
                        rd.SetParameterValue("fecha", DateTime.Now.ToString("dd/MM/yyyy h:mm tt"));

                        Session.Add("reporte", rd);
                        break;
                    }
                #endregion

                #region REPORTE TABULADORES MODIFICACION
                case ReportesEnum.rptRepTabuladoresModificacion:
                    {
                        setMedidasReporte("HC");
                        rd = new rptRepTabuladoresModificacion();

                        //var objParamsDTO = Session["objParamsPDF"] as TabuladorDTO;
                        TabuladorDTO objParamsDTO = new TabuladorDTO();
                        objParamsDTO.FK_IncrementoAnual = Convert.ToInt32(Request.QueryString["FK_IncrementoAnual"]);

                        var dictRepTabuladores = tabuladoresFS.GetTabuladoresService().GetTabuladoresModificacionReportePDF((objParamsDTO));
                        List<RepTabuladoresModificacionDTO> lstTabuladores = dictRepTabuladores["lstTabPuestos"] as List<RepTabuladoresModificacionDTO>;

                        objParamsDTO.lstDescLineaNegocio = new List<string>();
                        objParamsDTO.lstDescLineaNegocio.Add("LN");

                        objParamsDTO.lstDescCC = new List<string>();
                        objParamsDTO.lstDescCC.Add("DESC");

                        objParamsDTO.lstReporteAutorizantesDTO = new List<RepAutorizantesTABDTO>();
                        RepAutorizantesTABDTO obj = new RepAutorizantesTABDTO();
                        objParamsDTO.lstReporteAutorizantesDTO.Add(obj);

                        string lstLineasNegocio = string.Join(", ", objParamsDTO.FK_LineaNegocio);
                        string lstCC = string.Join(", ", objParamsDTO.lstDescCC);

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("Reporte de Tabuladores", "Dirección de Capital Humano"));
                        rd.Database.Tables[1].SetDataSource(lstTabuladores);
                        rd.Database.Tables[2].SetDataSource(objParamsDTO.lstReporteAutorizantesDTO);

                        rd.SetParameterValue("lstLineasNegocio", lstLineasNegocio);
                        rd.SetParameterValue("lstCC", lstCC);
                        rd.SetParameterValue("año", objParamsDTO.añoReporte);
                        rd.SetParameterValue("fecha", DateTime.Now.ToString("dd/MM/yyyy h:mm tt"));

                        Session.Add("reporte", rd);
                        break;
                    }
                #endregion
                case ReportesEnum.rptReciboNominaPeru:
                    {
                        setMedidasReporte("HC");
                        rd = new rptReciboNominaPeru();

                        var prenominaID = Convert.ToInt32(Request.QueryString["prenominaID"]);
                        var clave_empleado = Convert.ToInt32(Request.QueryString["clave_empleado"]);

                        var prenomina = nominafs.getNominaService().GetPrenominaByID(prenominaID);
                        List<tblC_Nom_PreNominaPeru_Det> detallePrenomina = nominafs.getNominaService().GetPrenominDetallesPeruByID(prenominaID);
                        if (clave_empleado != null) detallePrenomina = detallePrenomina.Where(y => y.clave_empleado == clave_empleado).ToList();

                        List<string> estatus = new List<string>();

                        var empleado = ReclutamientoFS.getReclutamientosService().GetEmpleadosEK(new List<string> { prenomina.CC }, new List<string> { "A" }).FirstOrDefault(x => x.clave_empleado == clave_empleado);

                        DataTable planillaPeru = new DataTable();
                        planillaPeru.Columns.Add("clave_empleado", typeof(string));
                        planillaPeru.Columns.Add("nombre", typeof(string));
                        planillaPeru.Columns.Add("categoria", typeof(string));
                        planillaPeru.Columns.Add("area", typeof(string));
                        planillaPeru.Columns.Add("ccDesc", typeof(string));
                        planillaPeru.Columns.Add("puesto", typeof(string));
                        planillaPeru.Columns.Add("dni", typeof(string));
                        planillaPeru.Columns.Add("fecha_nacimiento", typeof(string));
                        planillaPeru.Columns.Add("regimen", typeof(string));
                        foreach (var item in detallePrenomina)
                        {
                            planillaPeru.Rows.Add(
                                item.clave_empleado,
                                item.nombre_empleado,
                                prenomina.tipoNomina == 20 ? "Obrero" : (prenomina.tipoNomina == 21 ? "Empleado" : "Construcción Civil"),
                                "",
                                "Construcciones Cerro de Pasco",
                                "",
                                "DNI No. " + "",
                                "PRIVADO GENERAL - D. LEG. N° 728"
                            );
                        }

                        rd.Database.Tables[0].SetDataSource(getInfoEnca("reporte", ""));
                        rd.Database.Tables[1].SetDataSource(planillaPeru);


                        Session.Add("reporte", rd);
                        break;
                    }
                #region REPORTE PLANILLAS PERU

                #endregion

                #region REPORTE TIEMPO DE PROCESO DE OC
                case ReportesEnum.rptTiempoProcesoOC:
                    {
                        try
                        {
                            setMedidasReporte("HO");
                            rd = new rptTiempoProcesoOC();

                            var seguimiento = (List<RequisicionSeguimientoDTO>)Session["tiempoProcesoOC"];

                            rd.Database.Tables[0].SetDataSource(getInfoEnca("Tiempo de Proceso de OC", "Resumen de Tiempo de Proceso de OC"));

                            List<object> tabla = new List<object>();

                            foreach (var seg in seguimiento)
                            {
                                tabla.Add(new
                                {
                                    requisitor = seg.requisitorDesc,
                                    requisicion = seg.requisicion,
                                    fechaElaboracionDesc = seg.fechaElaboracionDesc,
                                    fechaEntregaComprasDesc = seg.fechaEntregaComprasDesc,
                                    tipoRequisicion = seg.tipoRequisicion,
                                    economico = seg.economico,
                                    descripcion = seg.descripcion,
                                    compradorDesc = seg.compradorDesc,
                                    ordenCompra = seg.ordenCompra,
                                    ordenCompraAutorizada = seg.ordenCompraAutorizada,
                                    proveedorDesc = seg.proveedorDesc,
                                    tiempoEntregaDiasDesc = seg.tiempoEntregaDiasDesc,
                                    tiempoEntregaComentarios = seg.tiempoEntregaComentarios,
                                    fechaEntradaDesc = seg.fechaEntradaDesc
                                });
                            }

                            rd.Database.Tables[1].SetDataSource(tabla);

                            Session.Add("reporte", rd);
                        }
                        catch (Exception)
                        {

                        }
                        break;
                    }
                #endregion
            }
            //////////////////////////  FIN SWITCH   ///////////////////////////////////////
            #region inMemori

            var inMemory = Request.QueryString["inMemory"];
            if (inMemory != null)
            {
                //Session["downloadPDF"] = null;
                if (((ReportesEnum)reporte) == ReportesEnum.minuta_reunion)
                {
                    int minuta = int.Parse(Request.QueryString["minuta"]);
                    var empresaID = vSesiones.sesionEmpresaActual;
                    string empresaStr = Request.QueryString["empresa"];
                    if (empresaStr != null) { empresaID = int.Parse(empresaStr); }
                    var objMinuta = seguimientoAcuerdosFactoryServices.getSeguimientoAcuerdosService().getMinuta(minuta, empresaID);
                    var objMinutaPrint = seguimientoAcuerdosFactoryServices.getSeguimientoAcuerdosService().getMinutaPrint(minuta, empresaID);
                    rd.SetParameterValue("Fecha", Convert.ToDateTime(objMinuta.fecha).ToString("dd/MM/yyyy"));
                    rd.SetParameterValue("Lugar", objMinuta.lugar);
                    rd.SetParameterValue("Evento", objMinuta.titulo);
                    rd.SetParameterValue("Inicio", objMinuta.horaInicio);
                    rd.SetParameterValue("Termino", objMinuta.horaFin);
                    rd.SetParameterValue("Asuntos", objMinuta.descripcion ?? "EMPTY");
                }
                else if (((ReportesEnum)reporte) == ReportesEnum.lista_asistencia)
                {

                    int minuta = int.Parse(Request.QueryString["minuta"]);
                    var empresaID = vSesiones.sesionEmpresaActual;
                    string empresaStr = Request.QueryString["empresa"];
                    if (empresaStr != null) { empresaID = int.Parse(empresaStr); }
                    var objMinuta = seguimientoAcuerdosFactoryServices.getSeguimientoAcuerdosService().getMinuta(minuta, empresaID);
                    var objListaAsistencia = seguimientoAcuerdosFactoryServices.getSeguimientoAcuerdosService().getListaAsistenciaMinutaPrint(minuta, empresaID);

                    rd.SetParameterValue("Fecha", Convert.ToDateTime(objMinuta.fecha).ToString("dd/MM/yyyy"));
                    rd.SetParameterValue("Evento", objMinuta.titulo);
                    rd.SetParameterValue("Inicio", objMinuta.horaInicio);
                    rd.SetParameterValue("Termino", objMinuta.horaFin);
                }
                else if (((ReportesEnum)reporte) == ReportesEnum.Formato_Cambio)
                {

                    Session["downloadPDF"] = null;
                    int fId = int.Parse(Request.QueryString["fId"]);
                    List<tblRH_FormatoCambio> objEmploadosEnkontrol = new List<tblRH_FormatoCambio>();
                    List<tblRH_FormatoCambio> objEmploados = capturaFormatoCambioFactoryServices.getFormatoCambioService().getListFormatosCambioPendientes(fId, "", 0, 1, "", 0);

                    List<tblRH_AutorizacionFormatoCambio> objAutorizacion = new List<tblRH_AutorizacionFormatoCambio>();

                    int empresaActual = vSesiones.sesionEmpresaActual;
                    string simbolo = "$ ";

                    if (empresaActual == 6)
                    {
                        simbolo = "S/ ";
                    }

                    objEmploadosEnkontrol.Add(capturaFormatoCambioFactoryServices.getFormatoCambioService().getEmpleadoForId(objEmploados[0].Clave_Empleado, false));
                    foreach (var objEmp in objEmploados)
                    {
                        if (objEmp.TipoNominaID == (int)Tipo_NominaEnum.SEMANAL)
                        {
                            rd.SetParameterValue("TipoNomina", "Semana");
                            rd.SetParameterValue("SalarioMesEmpleadoCambio", ((Math.Round(((Convert.ToDouble(objEmp.Salario_Base) / 7) * 30.4), 2)).ToString()));
                            rd.SetParameterValue("ComplementoMesEmpleadoCambio", ((Math.Round(((Convert.ToDouble(objEmp.Complemento) / 7) * 30.4), 2)).ToString()));
                            rd.SetParameterValue("BonoMesEmpleadoCambio", ((Math.Round(((Convert.ToDouble(objEmp.Bono) / 7) * 30.4), 2)).ToString()));

                        }
                        else
                        {
                            rd.SetParameterValue("TipoNomina", "Quincena");
                            rd.SetParameterValue("SalarioMesEmpleadoCambio", ((Math.Round((Convert.ToDouble(objEmp.Salario_Base) * 2), 2)).ToString()));
                            rd.SetParameterValue("ComplementoMesEmpleadoCambio", ((Math.Round((Convert.ToDouble(objEmp.Complemento) * 2), 2)).ToString()));
                            rd.SetParameterValue("BonoMesEmpleadoCambio", ((Math.Round((Convert.ToDouble(objEmp.Bono) * 2), 2)).ToString()));
                        }
                        objAutorizacion = capturaAutorizacionFormatoCambioService.getAutorizacionFormatoCambioService().getAutorizacion(objEmp.id);
                    }

                    foreach (var objEmpKon in objEmploadosEnkontrol)
                    {
                        if (objEmpKon.TipoNominaID == (int)Tipo_NominaEnum.SEMANAL)
                        {
                            rd.SetParameterValue("SalarioMesEmpleadoOriginal", ((Math.Round(((Convert.ToDouble(objEmpKon.Salario_Base) / 7) * 30.4), 2)).ToString()));
                            rd.SetParameterValue("ComplementoMesEmpleadoOriginal", ((Math.Round(((Convert.ToDouble(objEmpKon.Complemento) / 7) * 30.4), 2)).ToString()));
                            rd.SetParameterValue("BonoMesEmpleadoOriginal", ((Math.Round(((Convert.ToDouble(objEmpKon.Bono) / 7) * 30.4), 2)).ToString()));
                        }
                        else
                        {
                            rd.SetParameterValue("BonoMesEmpleadoOriginal", ((Math.Round((Convert.ToDouble(objEmpKon.Bono) * 2), 2)).ToString()));
                            rd.SetParameterValue("SalarioMesEmpleadoOriginal", ((Math.Round((Convert.ToDouble(objEmpKon.Salario_Base) * 2), 2)).ToString()));
                            rd.SetParameterValue("ComplementoMesEmpleadoOriginal", ((Math.Round((Convert.ToDouble(objEmpKon.Complemento) * 2), 2)).ToString()));
                        }

                    }
                }
                else if (((ReportesEnum)reporte) == ReportesEnum.Solicitud_EquipoNoModal)
                {
                    Session["downloadPDF"] = null;
                    List<SolicitudEquipoDTO> rptData = (List<SolicitudEquipoDTO>)Session["rptSolicitudEquipo"];

                    var autorizadores = (AutorizadoresIDDTO)Session["rptAutorizadores"];
                    var FolioSolicitud = "";

                    if (rptData != null)
                    {
                        FolioSolicitud = rptData.FirstOrDefault().Folio;
                    }

                    var AutorizadorElabora = usuarioFactoryServices.getUsuarioService().ListUsersById(autorizadores.usuarioElaboro)
                        .Select(x => new { nombre = (x.nombre + " " + x.apellidoPaterno + " " + x.apellidoMaterno) }).FirstOrDefault();

                    var AutorizadorGerente = usuarioFactoryServices.getUsuarioService()
                        .ListUsersById(autorizadores.gerenteObra)
                        .Select(x => new { nombre = (x.nombre + " " + x.apellidoPaterno + " " + x.apellidoMaterno) }).FirstOrDefault();

                    var AutorizadorGerenteDirector = usuarioFactoryServices.getUsuarioService()
                      .ListUsersById(autorizadores.GerenteDirector)
                      .Select(x => new { nombre = (x.nombre + " " + x.apellidoPaterno + " " + x.apellidoMaterno) }).FirstOrDefault();

                    var AutorizadorDirector = usuarioFactoryServices.getUsuarioService()
                        .ListUsersById(autorizadores.directorDivision)
                        .Select(x => new { nombre = (x.nombre + " " + x.apellidoPaterno + " " + x.apellidoMaterno) }).FirstOrDefault();

                    var AutorizadorServicios = usuarioFactoryServices.getUsuarioService()
                        .ListUsersById(autorizadores.directorServicios)
                        .Select(x => new { nombre = (x.nombre + " " + x.apellidoPaterno + " " + x.apellidoMaterno) }).FirstOrDefault();

                    var AutorizadorDireccion = usuarioFactoryServices.getUsuarioService()
                        .ListUsersById(autorizadores.altaDireccion)
                        .Select(x => new { nombre = (x.nombre + " " + x.apellidoPaterno + " " + x.apellidoMaterno) }).FirstOrDefault();

                    var pCentroCostosVal = Request.QueryString["pCC"].ToString();

                    if (!string.IsNullOrEmpty(pCentroCostosVal))
                    {
                        pCC = Request.QueryString["pCC"];
                        pNombreCC = centroCostosFactoryServices.getCentroCostosService().getNombreCCFix(pCC);
                    }
                    else
                    {
                        pNombreCC = "";
                    }

                    rd.SetParameterValue("VersionDocumento", "Ver. 1, 30-09-2016");
                    rd.SetParameterValue("FolioDocumento", FolioSolicitud);
                    if (Session["rptCadenaAutorizacion"] != null)
                    {
                        var cadena = (CadenaAutorizacionDTO)Session["rptCadenaAutorizacion"];

                        rd.SetParameterValue("CadenaDireccion", cadena.CadenaDireccion ?? "");
                        rd.SetParameterValue("CadenaDirector", cadena.CadenaDirector ?? "");
                        rd.SetParameterValue("CadenaGerente", cadena.CadenaGerente ?? "");
                        rd.SetParameterValue("CadenaElabora", cadena.CadenaElabora ?? "");
                        rd.SetParameterValue("CadenaGerenteDirector", cadena.CadenaGerenteDirector ?? "");
                        rd.SetParameterValue("CadenaServicios", cadena.CadenaServicios ?? "");
                    }
                    else
                    {
                        rd.SetParameterValue("CadenaDireccion", "");
                        rd.SetParameterValue("CadenaDirector", "");
                        rd.SetParameterValue("CadenaGerente", "");
                        rd.SetParameterValue("CadenaElabora", "");
                        rd.SetParameterValue("CadenaGerenteDirector", "");
                        rd.SetParameterValue("CadenaServicios", "");
                    }
                    rd.SetParameterValue("Elaboro", AutorizadorElabora.nombre);
                    rd.SetParameterValue("Solicito", AutorizadorGerente.nombre);
                    rd.SetParameterValue("valido", AutorizadorDirector.nombre);
                    rd.SetParameterValue("autorizo", AutorizadorDireccion.nombre);
                    rd.SetParameterValue("Valido2", AutorizadorGerenteDirector.nombre);
                    rd.SetParameterValue("Valido3", AutorizadorServicios.nombre);
                    rd.SetParameterValue("CentroCostos", pNombreCC);
                    rd.SetParameterValue("hCC", setTitleCC().ToUpper() + ":");
                }
                else if (((ReportesEnum)reporte) == ReportesEnum.PreviewStandby)
                {
                    Session["downloadPDF"] = null;
                    rd.SetParameterValue("Descripcion", StandbyParmDTO.Descripcion);
                    rd.SetParameterValue("Centro_Costos", StandbyParmDTO.Centro_Costos);
                    rd.SetParameterValue("elabora1", StandbyParmDTO.elabora1);
                    rd.SetParameterValue("elabora2", StandbyParmDTO.elabora2);

                }
                else if (((ReportesEnum)reporte) == ReportesEnum.Solicitud_Equipo_Asignado)
                {

                    Session["downloadPDF"] = null;

                    rd.SetParameterValue("VersionDocumento", "Ver. 1, 30-09-2016");

                    List<SolicitudEquipoDTO> rptData = (List<SolicitudEquipoDTO>)Session["rptSolicitudEquipo"];

                    var autorizadores = (AutorizadoresIDDTO)Session["rptAutorizadores"];
                    var FolioSolicitud = "";

                    var Asigna = Session["rptAsigna"] != null ? Session["rptAsigna"].ToString() : "";
                    string nombre = "";
                    if (Asigna != null)
                    {
                        nombre = Asigna;
                    }
                    if (rptData != null)
                    {
                        FolioSolicitud = rptData.FirstOrDefault().Folio;
                    }

                    rd.SetParameterValue("FolioDocumento", FolioSolicitud);

                    var AutorizadorElabora = usuarioFactoryServices.getUsuarioService().ListUsersById(autorizadores.usuarioElaboro)
                        .Select(x => new { nombre = (x.nombre + " " + x.apellidoPaterno + " " + x.apellidoMaterno) }).FirstOrDefault();

                    var AutorizadorGerente = usuarioFactoryServices.getUsuarioService()
                        .ListUsersById(autorizadores.gerenteObra)
                        .Select(x => new { nombre = (x.nombre + " " + x.apellidoPaterno + " " + x.apellidoMaterno) }).FirstOrDefault();

                    var AutorizadorGerenteDirector = usuarioFactoryServices.getUsuarioService()
                      .ListUsersById(autorizadores.GerenteDirector)
                      .Select(x => new { nombre = (x.nombre + " " + x.apellidoPaterno + " " + x.apellidoMaterno) }).FirstOrDefault();

                    var AutorizadorDirector = usuarioFactoryServices.getUsuarioService()
                        .ListUsersById(autorizadores.directorDivision)
                        .Select(x => new { nombre = (x.nombre + " " + x.apellidoPaterno + " " + x.apellidoMaterno) }).FirstOrDefault();

                    var AutorizadorServicios = usuarioFactoryServices.getUsuarioService()
                        .ListUsersById(autorizadores.directorServicios)
                        .Select(x => new { nombre = (x.nombre + " " + x.apellidoPaterno + " " + x.apellidoMaterno) }).FirstOrDefault();

                    var AutorizadorDireccion = usuarioFactoryServices.getUsuarioService()
                        .ListUsersById(autorizadores.altaDireccion)
                        .Select(x => new { nombre = (x.nombre + " " + x.apellidoPaterno + " " + x.apellidoMaterno) }).FirstOrDefault();


                    if (Session["rptCadenaAutorizacion"] != null)
                    {
                        var cadena = (CadenaAutorizacionDTO)Session["rptCadenaAutorizacion"];

                        rd.SetParameterValue("CadenaDireccion", cadena.CadenaDireccion == null ? "" : cadena.CadenaDireccion);
                        rd.SetParameterValue("CadenaDirector", cadena.CadenaDirector == null ? "" : cadena.CadenaDirector);
                        rd.SetParameterValue("CadenaGerente", cadena.CadenaGerente == null ? "" : cadena.CadenaGerente);
                        rd.SetParameterValue("CadenaElabora", cadena.CadenaElabora == null ? "" : cadena.CadenaElabora);
                        rd.SetParameterValue("CadenaGerenteDirector", cadena.CadenaGerenteDirector == null ? "" : cadena.CadenaGerenteDirector);
                        rd.SetParameterValue("CadenaServicios", cadena.CadenaServicios == null ? "" : cadena.CadenaServicios);
                    }
                    else
                    {
                        rd.SetParameterValue("CadenaDireccion", "");
                        rd.SetParameterValue("CadenaDirector", "");
                        rd.SetParameterValue("CadenaGerente", "");
                        rd.SetParameterValue("CadenaElabora", "");
                        rd.SetParameterValue("CadenaGerenteDirector", "");
                        rd.SetParameterValue("CadenaServicios", "");
                    }
                    rd.SetParameterValue("Asigno", nombre);
                    rd.SetParameterValue("Elaboro", AutorizadorElabora.nombre);
                    rd.SetParameterValue("Solicito", AutorizadorGerente.nombre);
                    rd.SetParameterValue("valido", AutorizadorDirector.nombre);
                    rd.SetParameterValue("autorizo", AutorizadorDireccion.nombre);
                    rd.SetParameterValue("Valido2", AutorizadorGerenteDirector.nombre);
                    rd.SetParameterValue("Valido3", AutorizadorServicios.nombre);

                    var pCentroCostosVal = Request.QueryString["pCC"].ToString();

                    if (!string.IsNullOrEmpty(pCentroCostosVal))
                    {
                        pCC = Request.QueryString["pCC"];
                        pNombreCC = centroCostosFactoryServices.getCentroCostosService().getNombreCCFix(pCC);
                    }
                    else
                    {
                        pNombreCC = "";
                    }
                    rd.SetParameterValue("CentroCostos", pNombreCC);

                }
                //prueba 18/01/18 08:14
                else if (((ReportesEnum)reporte) == ReportesEnum.FormatoAditivaDeductiva)
                {
                    Session["downloadPDF"] = null;
                    List<tblRH_AditivaDeductiva> lstobjAditivaDeduc = new List<tblRH_AditivaDeductiva>();
                    int fId = int.Parse(Request.QueryString["fId"]);
                    lstobjAditivaDeduc.Add(objAditivaDeductivaFactoryServices.getAditivaDeductivaService().getFormatoAditivaDeductivaByID(fId));


                    rd.SetParameterValue("fechaAlta", lstobjAditivaDeduc.First().fecha_Alta.ToShortDateString());
                    rd.SetParameterValue("fechaCaptura", lstobjAditivaDeduc.First().fechaCaptura.ToShortDateString());
                    rd.SetParameterValue("hCC", lstobjAditivaDeduc.First().cC);
                    Session.Add("reporte", rd);
                }
                else if (((ReportesEnum)reporte) == ReportesEnum.CONCILIACIONHOROMETROS)
                {
                    int pConciliacionID = Convert.ToInt32(Request.QueryString["pConciliacionID"]);
                    var auth = cfs.getConciliacionServices().loadAutorizacionFromConciliacacionId(pConciliacionID);
                    var encConciliacion = cfs.getConciliacionServices().getCapEncConciliacion(pConciliacionID);
                    var conciliaciones = cfs.getConciliacionServices().getConciliaciones(pConciliacionID);
                    var gerente = usuarioFactoryServices.getUsuarioService().getPassByID(auth.autorizaGerenteID);
                    var admin = usuarioFactoryServices.getUsuarioService().getPassByID(auth.autorizaAdmin);
                    var director = usuarioFactoryServices.getUsuarioService().getPassByID(auth.autorizaDirector);
                    var centroCostos = centroCostosFactoryServices.getCentroCostosService().getEntityCCConstruplan(encConciliacion.centroCostosID);
                    var intMoneda = cfs.getConciliacionServices().getMonedaCaratula(encConciliacion.centroCostosID);

                    string moneda = "";
                    moneda = intMoneda == 1 ? "M.N." : "USD";
                    DateTime fecha = DateTime.Now;
                    DateTime FechaSend = new DateTime(fecha.Year, 01, 01);


                    //    var Data = GetFechas(FechaSend).FirstOrDefault(x => x.Value == encConciliacion.fechaID);
                    var Data = GetQuincenas(encConciliacion.anio).FirstOrDefault(r => r.Value == encConciliacion.fechaID);
                    rd.Database.Tables[0].SetDataSource(getInfoEnca("", "CONCILIACIÓN DE HOROMETROS"));
                    rd.Database.Tables[1].SetDataSource(conciliaciones.Select(c => new
                    {
                        no = c.numero,
                        economico = c.economico,
                        descripcion = c.descripcion,
                        hi = c.horometroInicial,
                        hf = c.horometroFinal,
                        he = c.horometroEfectivo,
                        unidad = c.unidad == 1 ? "HORAS" : "DÍA",
                        costoHora = c.costo,
                        costoTotal = c.total,
                        carga = EnumHelper.GetDescription((EmpresaEnum)c.idEmpresa).ToString(),
                        observaciones = c.observaciones
                    }));
                    rd.SetParameterValue("FechaInicio", encConciliacion.fechaInicio.ToShortDateString());
                    rd.SetParameterValue("fechaFinal", encConciliacion.fechaFin.ToShortDateString());
                    //if (Data != null)
                    //{
                    //    var ArraySplit = Data.Text.Split('-');
                    //    FechaSend = Convert.ToDateTime(ArraySplit[1]);
                    //    rd.SetParameterValue("FechaInicio", ArraySplit[0]);
                    //    if (centroCostos.id == 55 && encConciliacion.fechaID == 19)
                    //    {
                    //        rd.SetParameterValue("fechaFinal", "18/09/2019 - 30/09/2019");
                    //    }
                    //    else
                    //    {
                    //        rd.SetParameterValue("fechaFinal", ArraySplit[1]);
                    //    }
                    //}
                    rd.SetParameterValue("pProyecto", centroCostos.cc + " " + centroCostos.descripcion);
                    rd.SetParameterValue("nombreGerente", string.Format("{0} {1} {2}", gerente.nombre, gerente.apellidoPaterno, gerente.apellidoMaterno));
                    rd.SetParameterValue("cadenaGerente", auth.firmaGerente);
                    rd.SetParameterValue("cadenaAdministrador", auth.firmaAdmin);
                    rd.SetParameterValue("nombreAdministrador", string.Format("{0} {1} {2}", admin.nombre, admin.apellidoPaterno, admin.apellidoMaterno));
                    rd.SetParameterValue("cadenaDirector", auth.firmaDirector);
                    rd.SetParameterValue("nombreDirector", string.Format("{0} {1} {2}", director.nombre, director.apellidoPaterno, director.apellidoMaterno));
                    rd.SetParameterValue("moneda", moneda);
                    Session["downloadPDF"] = null;
                    Session.Add("reporte", rd);

                }
                else if (((ReportesEnum)reporte) == ReportesEnum.PlantillaPersonal)
                {
                    Session["downloadPDF"] = null;

                    var plantillaID = Int32.Parse(Request.QueryString["plantillaID"]);
                    var plantillaCC = Request.QueryString["plantillaCC"];
                    var esTabulador = Request.QueryString["esTabulador"];

                    var empresaID = vSesiones.sesionEmpresaActual;
                    string empresaStr = Request.QueryString["empresa"];
                    if (empresaStr != null) { empresaID = int.Parse(empresaStr); }

                    PlantillaReporteDTO plantilla = new PlantillaReporteDTO();

                    if (esTabulador != null && esTabulador == "1")
                    {

                        plantilla = plantillaPersonalFactoryService.getPlantillaPersonalFactoryService().GetReportePlantilla(plantillaCC, empresaID);
                    }
                    else
                    {
                        plantilla = plantillaPersonalFactoryService.getPlantillaPersonalFactoryService().GetReporte(plantillaID, empresaID);

                    }
                    //var plantilla = plantillaPersonalFactoryService.getPlantillaPersonalFactoryService().GetReporte(plantillaID, empresaID);

                    rd.SetParameterValue("cc", plantilla.cc);
                    rd.SetParameterValue("fechaInicio", plantilla.fechaInicio);
                    rd.SetParameterValue("fechaFin", plantilla.fechaFin);
                    Session["downloadPDF"] = null;
                }
                else if (((ReportesEnum)reporte) == ReportesEnum.ordenCompraEK || ((ReportesEnum)reporte) == ReportesEnum.ordenCompraConsultaEK)
                {
                    string cc = Request.QueryString["cc"];
                    int numero = int.Parse(Request.QueryString["numero"]);

                    var ordenCompra = ordenCompraFactoryServices.getOcService().getOrdenCompraRpt(cc, numero, "");

                    rd.SetParameterValue("cfdi", ordenCompra.CFDI ?? "");

                    if (vSesiones.sesionEmpresaActual == 1)
                    {
                        rd.SetParameterValue("rfc", " ");
                        rd.SetParameterValue("facturar", "SOL- INDUSTRIALES SA DE CV");
                    }
                    else
                    {
                        rd.SetParameterValue("rfc", "ACO171207CZ7");
                      //  rd.SetParameterValue("facturar", "ARRENDADORA CONSTRUPLAN SA DE CV");
                    }

                    Session["downloadPDF"] = null;
                }
                else if (((ReportesEnum)reporte) == ReportesEnum.Formato_Autorizacion_Capacitacion)
                {
                    var controlAsistenciaID = Convert.ToInt32(Request.QueryString["controlAsistenciaID"].ToString());

                    var controlAsistencia = capacitacionFactoryService.GetCapacitacionService().ObtenerDatosFormatoAutorizacion(controlAsistenciaID);

                    rd.SetParameterValue("nombreCurso", controlAsistencia.nombreCurso);
                    rd.SetParameterValue("claveCurso", controlAsistencia.claveCurso);
                    rd.SetParameterValue("fechaExpedicion", controlAsistencia.fechaExpedicion);
                    rd.SetParameterValue("fechaVencimiento", controlAsistencia.fechaVencimiento);
                    rd.SetParameterValue("razonSocial", controlAsistencia.razonSocial);
                    rd.SetParameterValue("rfc", controlAsistencia.rfc);
                    rd.SetParameterValue("nota", controlAsistencia.nota);
                    rd.SetParameterValue("nombreJefe", controlAsistencia.nombreJefe);
                    rd.SetParameterValue("firmaJefe", controlAsistencia.firmaJefe ?? "S/F");
                    rd.SetParameterValue("nombreGerente", controlAsistencia.nombreGerente);
                    rd.SetParameterValue("firmaGerente", controlAsistencia.firmaGerente ?? "S/F");
                    rd.SetParameterValue("nombreCoordinador", controlAsistencia.nombreCoordinador);
                    rd.SetParameterValue("firmaCoordinador", controlAsistencia.firmaCoordinador ?? "S/F");
                    rd.SetParameterValue("nombreSecretario", controlAsistencia.nombreSecretario);
                    rd.SetParameterValue("firmaSecretario", controlAsistencia.firmaSecretario ?? "S/F");
                    rd.SetParameterValue("referenciaNormativa", controlAsistencia.referenciaNormativa);
                    Session["downloadPDF"] = null;

                }

                Stream stream = rd.ExportToStream(ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                byte[] downloadPDF = null;
                using (var streamReader = new MemoryStream())
                {
                    stream.CopyTo(streamReader);
                    downloadPDF = streamReader.ToArray();

                }
                if (Session["downloadPDF"] != null)
                {
                    List<byte[]> files = (List<byte[]>)Session["downloadPDF"];
                    files.Add(downloadPDF);
                    Session["downloadPDF"] = files;

                    if (((ReportesEnum)reporte) == ReportesEnum.minuta_reunion || ((ReportesEnum)reporte) == ReportesEnum.lista_asistencia)
                    {
                        Session["downloadPDFMinuta"] = files;
                    }
                }
                else
                {
                    List<byte[]> files = new List<byte[]>();
                    files.Add(downloadPDF);
                    Session["downloadPDF"] = files;

                    if (((ReportesEnum)reporte) == ReportesEnum.minuta_reunion || ((ReportesEnum)reporte) == ReportesEnum.lista_asistencia)
                    {
                        Session["downloadPDFMinuta"] = files;
                    }
                }
                //ReporteDG
                if ((ReportesEnum)reporte == ReportesEnum.DIAGRAMA_GANTT)
                {
                    if (Session["reporteDG"] != null)
                    {
                        List<byte[]> files = (List<byte[]>)Session["reporteDG"];
                        files.Add(downloadPDF);
                        Session["reporteDG"] = files;
                    }
                    else
                    {
                        List<byte[]> files = new List<byte[]>();
                        files.Add(downloadPDF);
                        Session["reporteDG"] = files;
                    }
                }
                //ReporteEjecutivo
                if ((ReportesEnum)reporte == ReportesEnum.REPORTE_EJECUTIVO)
                {
                    if (Session["reporteEjecutivo"] != null)
                    {
                        List<byte[]> files = (List<byte[]>)Session["reporteEjecutivo"];
                        files.Add(downloadPDF);
                        Session["reporteEjecutivo"] = files;
                    }
                    else
                    {
                        List<byte[]> files = new List<byte[]>();
                        files.Add(downloadPDF);
                        Session["reporteEjecutivo"] = files;
                    }
                }
                //SOLICITUD CHEQUE
                if ((ReportesEnum)reporte == ReportesEnum.rptSolicitudCheque1)
                {
                    if (Session["rptSolicitudCheque1"] != null)
                    {
                        List<byte[]> files = (List<byte[]>)Session["rptSolicitudCheque1"];
                        files.Add(downloadPDF);
                        Session["rptSolicitudCheque1"] = files;
                    }
                    else
                    {
                        List<byte[]> files = new List<byte[]>();
                        files.Add(downloadPDF);
                        Session["rptSolicitudCheque1"] = files;
                    }
                }
                if ((ReportesEnum)reporte == ReportesEnum.rptSolicitudCheque2)
                {
                    if (Session["rptSolicitudCheque2"] != null)
                    {
                        List<byte[]> files = (List<byte[]>)Session["rptSolicitudCheque2"];
                        files.Add(downloadPDF);
                        Session["rptSolicitudCheque2"] = files;
                    }
                    else
                    {
                        List<byte[]> files = new List<byte[]>();
                        files.Add(downloadPDF);
                        Session["rptSolicitudCheque2"] = files;
                    }
                }
                if ((ReportesEnum)reporte == ReportesEnum.rptSolicitudCheque3)
                {
                    if (Session["rptSolicitudCheque3"] != null)
                    {
                        List<byte[]> files = (List<byte[]>)Session["rptSolicitudCheque3"];
                        files.Add(downloadPDF);
                        Session["rptSolicitudCheque3"] = files;
                    }
                    else
                    {
                        List<byte[]> files = new List<byte[]>();
                        files.Add(downloadPDF);
                        Session["rptSolicitudCheque3"] = files;
                    }
                }
                if ((ReportesEnum)reporte == ReportesEnum.rptSolicitudCheque4)
                {
                    if (Session["rptSolicitudCheque4"] != null)
                    {
                        List<byte[]> files = (List<byte[]>)Session["rptSolicitudCheque4"];
                        files.Add(downloadPDF);
                        Session["rptSolicitudCheque4"] = files;
                    }
                    else
                    {
                        List<byte[]> files = new List<byte[]>();
                        files.Add(downloadPDF);
                        Session["rptSolicitudCheque4"] = files;
                    }
                }
                if ((ReportesEnum)reporte == ReportesEnum.rptCedulaCostosNomina)
                {
                    if (Session["rptCedulaCostosNomina"] != null)
                    {
                        List<byte[]> files = (List<byte[]>)Session["rptCedulaCostosNomina"];
                        files.Add(downloadPDF);
                        Session["rptCedulaCostosNomina"] = files;
                    }
                    else
                    {
                        List<byte[]> files = new List<byte[]>();
                        files.Add(downloadPDF);
                        Session["rptCedulaCostosNomina"] = files;
                    }
                }
                if ((ReportesEnum)reporte == ReportesEnum.rptCedulaCostosNomina2)
                {
                    if (Session["rptCedulaCostosNomina2"] != null)
                    {
                        List<byte[]> files = (List<byte[]>)Session["rptCedulaCostosNomina2"];
                        files.Add(downloadPDF);
                        Session["rptCedulaCostosNomina2"] = files;
                    }
                    else
                    {
                        List<byte[]> files = new List<byte[]>();
                        files.Add(downloadPDF);
                        Session["rptCedulaCostosNomina2"] = files;
                    }
                }
                if ((ReportesEnum)reporte == ReportesEnum.rptCedulaCostosNomina3)
                {
                    if (Session["rptCedulaCostosNomina3"] != null)
                    {
                        List<byte[]> files = (List<byte[]>)Session["rptCedulaCostosNomina3"];
                        files.Add(downloadPDF);
                        Session["rptCedulaCostosNomina3"] = files;
                    }
                    else
                    {
                        List<byte[]> files = new List<byte[]>();
                        files.Add(downloadPDF);
                        Session["rptCedulaCostosNomina3"] = files;
                    }
                }
                if ((ReportesEnum)reporte == ReportesEnum.rptCedulaCostosNomina4)
                {
                    if (Session["rptCedulaCostosNomina4"] != null)
                    {
                        List<byte[]> files = (List<byte[]>)Session["rptCedulaCostosNomina4"];
                        files.Add(downloadPDF);
                        Session["rptCedulaCostosNomina4"] = files;
                    }
                    else
                    {
                        List<byte[]> files = new List<byte[]>();
                        files.Add(downloadPDF);
                        Session["rptCedulaCostosNomina4"] = files;
                    }
                }
                //REPORTE OPERATIVO
                if ((ReportesEnum)reporte == ReportesEnum.Tiempos_Reparacion)
                {
                    if (Session["reporteTiempos_Reparacion"] != null)
                    {
                        List<byte[]> files = (List<byte[]>)Session["reporteTiempos_Reparacion"];
                        files.Add(downloadPDF);
                        Session["reporteTiempos_Reparacion"] = files;
                    }
                    else
                    {
                        List<byte[]> files = new List<byte[]>();
                        files.Add(downloadPDF);
                        Session["reporteTiempos_Reparacion"] = files;
                    }
                }


                //ADMINITRATIVO
                if ((ReportesEnum)reporte == ReportesEnum.ReporteTiemposCRCAdmin)
                {
                    if (Session["ReporteTiemposCRCAdmin"] != null)
                    {
                        List<byte[]> files = (List<byte[]>)Session["ReporteTiemposCRCAdmin"];
                        files.Add(downloadPDF);
                        Session["ReporteTiemposCRCAdmin"] = files;
                    }
                    else
                    {
                        List<byte[]> files = new List<byte[]>();
                        files.Add(downloadPDF);
                        Session["ReporteTiemposCRCAdmin"] = files;
                    }
                }

                //REPORTE ALMACEN
                if ((ReportesEnum)reporte == ReportesEnum.rptAlmacenComponentes)
                {
                    if (Session["reporte_almacen"] != null)
                    {
                        List<byte[]> files = (List<byte[]>)Session["reporte_almacen"];
                        files.Add(downloadPDF);
                        Session["reporte_almacen"] = files;
                    }
                    else
                    {
                        List<byte[]> files = new List<byte[]>();
                        files.Add(downloadPDF);
                        Session["reporte_almacen"] = files;
                    }
                }

                //REPORTE CARATULA
                if ((ReportesEnum)reporte == ReportesEnum.rptCaratula)
                {
                    Session["downloadPDF"] = null;
                    if (Session["reporteCaratula_Autorizante"] != null)
                    {
                        List<byte[]> files = (List<byte[]>)Session["reporteCaratula_Autorizante"];
                        files.Add(downloadPDF);
                        Session["reporteCaratula_Autorizante"] = files;
                    }
                    else
                    {
                        List<byte[]> files = new List<byte[]>();
                        files.Add(downloadPDF);
                        Session["reporteCaratula_Autorizante"] = files;
                    }
                }

                if ((ReportesEnum)reporte == ReportesEnum.REMOCIONCOMPONENTE)
                {
                    if (Session["reporteRemocion"] != null)
                    {
                        List<byte[]> files = (List<byte[]>)Session["reporteRemocion"];
                        files.Add(downloadPDF);
                        Session["reporteRemocion"] = files;
                    }
                    else
                    {
                        List<byte[]> files = new List<byte[]>();
                        files.Add(downloadPDF);
                        Session["reporteRemocion"] = files;
                    }
                }

                if (((ReportesEnum)reporte) == ReportesEnum.FormatoRIA)
                {
                    bool flagEnviarCorreo = (bool)Session["flagEnviarCorreoIncidenteFormatoRIA"];

                    if (flagEnviarCorreo)
                    {
                        IncidenteDTO captura = Session["capturaIncidente"] as IncidenteDTO;
                        FormatoRIADTO informacionReporte = Session["IncidenteReporte"] as FormatoRIADTO;
                        SeguridadIncidentesServices.getSeguridadIncidenteService().enviarCorreoIncidente(captura, informacionReporte, (List<byte[]>)Session["downloadPDF"]);
                    }

                    Session["flagEnviarCorreoIncidenteFormatoRIA"] = false;
                    Session["downloadPDF"] = null;
                }

                if (((ReportesEnum)reporte) == ReportesEnum.InformePreliminarFormatoRIA)
                {
                    bool flagEnviarCorreo = (bool)Session["flagEnviarCorreoInformePreliminarFormatoRIA"];

                    if (flagEnviarCorreo)
                    {
                        InformeDTO captura = Session["capturaInformePreliminar"] as InformeDTO;
                        FormatoRIADTO informacionReporte = Session["InformePreliminarReporte"] as FormatoRIADTO;
                        SeguridadIncidentesServices.getSeguridadIncidenteService().enviarCorreoPreliminar(captura, informacionReporte, (List<byte[]>)Session["downloadPDF"]);
                    }

                    Session["flagEnviarCorreoInformePreliminarFormatoRIA"] = false;
                    Session["downloadPDF"] = null;
                }

                if (((ReportesEnum)reporte) == ReportesEnum.rptListaAutorizacionCorreo)
                {
                    var listaAutorizacionID = Convert.ToInt32(Session["listaAutorizacionID"]);
                    var listaCorreos = (List<string>)Session["listaCorreosListaAutorizacion"];

                    capacitacionFactoryService.GetCapacitacionService().enviarCorreoListaAutorizacion(listaAutorizacionID, (List<byte[]>)Session["downloadPDF"], listaCorreos);

                    Session["downloadPDF"] = null;
                }

                if (((ReportesEnum)reporte) == ReportesEnum.rptRecorrido)
                {

                    var recorridoID = Convert.ToInt32(Session["recorridoID"]);
                    var flagEnviarCorreo = Convert.ToInt32(Session["flagEnviarCorreoReporteRecorrido"]) == 1;
                    var listaCorreos = (List<int>)Session["listaCorreos"];
                    if (listaCorreos == null)
                    {
                        if (flagEnviarCorreo)
                        {
                            capacitacionFactoryService.GetCapacitacionService().enviarCorreoi(recorridoID, (List<byte[]>)Session["downloadPDF"]);
                        }
                    }
                    else
                    {
                        capacitacionFactoryService.GetCapacitacionService().enviarCorreoRecorrido(recorridoID, listaCorreos, (List<byte[]>)Session["downloadPDF"]);

                    }


                    Session["downloadPDF"] = null;
                }

                else if (((ReportesEnum)reporte) == ReportesEnum.rptBN_Evaluacion)
                {
                    var id = Request.QueryString["fId"].ParseInt();
                    bool actualizacion = false;
                    try
                    {
                        actualizacion = bool.Parse(Request.QueryString["actualizacion"]);
                    }
                    catch (Exception e)
                    {
                        actualizacion = false;
                    }
                    var plan = bonofs.getBonoService().getEvaluacionByID(id);

                    rd.SetParameterValue("nomina", plan.tipoNomina == 1 ? "Semanal" : "Quincenal");
                    bonofs.getBonoService().EnviarCorreoEvaluacion(plan, actualizacion);
                    Session["downloadPDF"] = null;

                }
                else if (((ReportesEnum)reporte) == ReportesEnum.rptESTATUS_DIARIO_MAQUINARIA)
                {
                    var cc = Request.QueryString["cc"];
                    var fecha = Convert.ToDateTime(Request.QueryString["fecha"]);
                    serviceEstatusDiario.getDatosDiarios().sendCapturarDatosDiaros(cc, fecha, (List<byte[]>)Session["downloadPDF"]);
                    Session["downloadPDF"] = null;
                }
                if (((ReportesEnum)reporte) == ReportesEnum.rptPlanAccion)
                {
                    CtrlPresupuestalOficinasCentralesService ctrlPresupuestoService = new CtrlPresupuestalOficinasCentralesService(new CtrlPresupuestalOficinasCentralesDAO());
                    int idCC = Convert.ToInt32(Request.QueryString["idCC"]);
                    int anio = Convert.ToInt32(Request.QueryString["anio"]);
                    int idMes = Convert.ToInt32(Request.QueryString["idMes"]);
                    int idEmpresa = Convert.ToInt32(Request.QueryString["idEmpresa"]);
                    ReportePlanAccionDTO objDTO = new ReportePlanAccionDTO();
                    objDTO.anio = anio;
                    objDTO.idMes = idMes;
                    objDTO.idEmpresa = idEmpresa;
                    objDTO.idCC = idCC;

                    #region SE OBTIENE NOMBRE DEL MES
                    switch (objDTO.idMes)
                    {
                        case 1:
                            objDTO.mes = "ENERO";
                            break;
                        case 2:
                            objDTO.mes = "FEBRERO";
                            break;
                        case 3:
                            objDTO.mes = "MARZO";
                            break;
                        case 4:
                            objDTO.mes = "ABRIL";
                            break;
                        case 5:
                            objDTO.mes = "MAYO";
                            break;
                        case 6:
                            objDTO.mes = "JUNIO";
                            break;
                        case 7:
                            objDTO.mes = "JULIO";
                            break;
                        case 8:
                            objDTO.mes = "AGOSTO";
                            break;
                        case 9:
                            objDTO.mes = "SEPTIEMBRE";
                            break;
                        case 10:
                            objDTO.mes = "OCTUBRE";
                            break;
                        case 11:
                            objDTO.mes = "NOVIEMBRE";
                            break;
                        case 12:
                            objDTO.mes = "DICIEMBRE";
                            break;
                        default:
                            objDTO.mes = string.Empty;
                            break;
                    }
                    #endregion
                    objDTO.archivoPDF = (List<byte[]>)Session["downloadPDF"];
                    ctrlPresupuestoService.EnviarCorreoReportePlanAccion(objDTO);
                    Session["downloadPDF"] = null;
                }

                if (((ReportesEnum)reporte) == ReportesEnum.requisicionEK)
                {
                    Request.InputStream.Position = 0;

                    var rawRequestBody = new StreamReader(Request.InputStream).ReadToEnd();
                    var objRequestBody = JsonConvert.DeserializeObject<dynamic>(rawRequestBody);

                    if (objRequestBody != null)
                    {
                        string cc = Request.QueryString["cc"];
                        int numero = int.Parse(Request.QueryString["numero"]);
                        string link = Request.QueryString["link"];
                        List<string> listaCorreos = objRequestBody.listaCorreos.ToObject<List<string>>();
                        bool enviarCorreo = (bool)objRequestBody.enviarCorreo;

                        if (enviarCorreo)
                        {
                            requisicionFactoryServices.getReqService().EnviarCorreoRequisicion(cc, numero, listaCorreos, (List<byte[]>)Session["downloadPDF"], link);
                        }
                    }

                    Session["downloadPDF"] = null;
                }

                if (((ReportesEnum)reporte) == ReportesEnum.rptExamenMedico)
                {
                    Request.InputStream.Position = 0;
                    var rawRequestBody = new StreamReader(Request.InputStream).ReadToEnd();
                    var objRequestBody = JsonConvert.DeserializeObject<dynamic>(rawRequestBody);

                    tblRH_REC_ExamenMedico examenMedico = objRequestBody.examenMedico.ToObject<tblRH_REC_ExamenMedico>();
                    List<tblRH_REC_ExamenMedico_Antecedentes> listaAntecedentes = objRequestBody.listaAntecedentes.ToObject<List<tblRH_REC_ExamenMedico_Antecedentes>>();
                    int idCandidato = Int32.Parse(Request.QueryString["idCandidato"]);

                    ReclutamientoFS.getReclutamientosService().GuardarExamenMedico(idCandidato, examenMedico, listaAntecedentes, ((List<byte[]>)Session["downloadPDF"])[0]);

                    Session["downloadPDF"] = null;
                }

                if (((ReportesEnum)reporte) == ReportesEnum.rptLaboral)
                {
                    int idExp = Request.QueryString["idExp"].ParseInt();

                    reportesRHFS.getReportesRHService().GuardarArchivoExpedicion(idExp, ((List<byte[]>)Session["downloadPDF"])[0]);
                    Session["downloadPDF"] = null;
                }

                if (((ReportesEnum)reporte) == ReportesEnum.rptLactancia)
                {
                    int idExp = Request.QueryString["idExp"].ParseInt();

                    reportesRHFS.getReportesRHService().GuardarArchivoExpedicion(idExp, ((List<byte[]>)Session["downloadPDF"])[0]);
                    Session["downloadPDF"] = null;
                }

                if (((ReportesEnum)reporte) == ReportesEnum.rptLiberacion)
                {
                    int idExp = Request.QueryString["idExp"].ParseInt();

                    reportesRHFS.getReportesRHService().GuardarArchivoExpedicion(idExp, ((List<byte[]>)Session["downloadPDF"])[0]);
                    Session["downloadPDF"] = null;
                }

                if (((ReportesEnum)reporte) == ReportesEnum.rptPrestamos)
                {
                    int idExp = Request.QueryString["idExp"].ParseInt();

                    reportesRHFS.getReportesRHService().GuardarArchivoExpedicion(idExp, ((List<byte[]>)Session["downloadPDF"])[0]);
                    Session["downloadPDF"] = null;
                }

                if (((ReportesEnum)reporte) == ReportesEnum.rptPagare)
                {
                    int idExp = Request.QueryString["idExp"].ParseInt();

                    reportesRHFS.getReportesRHService().GuardarArchivoExpedicion(idExp, ((List<byte[]>)Session["downloadPDF"])[0]);
                    Session["downloadPDF"] = null;
                }

                if (((ReportesEnum)reporte) == ReportesEnum.rptFonacot)
                {
                    int idExp = Request.QueryString["idExp"].ParseInt();

                    reportesRHFS.getReportesRHService().GuardarArchivoExpedicion(idExp, ((List<byte[]>)Session["downloadPDF"])[0]);
                    Session["downloadPDF"] = null;
                }

                if (((ReportesEnum)reporte) == ReportesEnum.rptGuarderia)
                {
                    int idExp = Request.QueryString["idExp"].ParseInt();

                    reportesRHFS.getReportesRHService().GuardarArchivoExpedicion(idExp, ((List<byte[]>)Session["downloadPDF"])[0]);
                    Session["downloadPDF"] = null;
                }

                //GuardarReporte(reporte);
            }
            else
            {
                Session["downloadPDF"] = null;
            }

            #endregion
            return paramFields;
        }

        public DataTable getInfoEncaOrdenDeCambio(string nombreReporte, string area, int idOrdenDeCambio)
        {
            DataTable tableEncabezado = new DataTable();
            try
            {

                tableEncabezado.Columns.Add("logo", System.Type.GetType("System.Byte[]"));
                tableEncabezado.Columns.Add("nombreEmpresa", System.Type.GetType("System.String"));
                tableEncabezado.Columns.Add("nombreReporte", System.Type.GetType("System.String"));
                tableEncabezado.Columns.Add("area", System.Type.GetType("System.String"));
                tableEncabezado.Columns.Add("firstFirma", System.Type.GetType("System.Byte[]"));
                tableEncabezado.Columns.Add("secondFirma", System.Type.GetType("System.Byte[]"));
                tableEncabezado.Columns.Add("tirthFirma", System.Type.GetType("System.Byte[]"));
                tableEncabezado.Columns.Add("forthFirma", System.Type.GetType("System.Byte[]"));
                tableEncabezado.Columns.Add("fivethFirma", System.Type.GetType("System.Byte[]"));

                var objFirmas = gestionDeProyectoService.getGestionDeProyectoService().obtenerFirmas(idOrdenDeCambio);
                int contador = 0;
                byte[] firstFirma = new byte[0];
                byte[] secondFirma = new byte[0];
                byte[] tirthFirma = new byte[0];
                byte[] forthFirma = new byte[0];
                byte[] fivethFirma = new byte[0];

                foreach (var item in objFirmas)
                {
                    contador++;

                    switch (contador)
                    {
                        case 1:
                            if (item.firma != "")
                            {
                                firstFirma = Convert.FromBase64String(item.firma.Split(',')[1]);
                            }
                            else
                            {
                                firstFirma = BinaryImage();
                            }
                            break;
                        case 2:
                            if (item.firma != "")
                            {
                                secondFirma = Convert.FromBase64String(item.firma.Split(',')[1]);
                            }
                            else
                            {
                                secondFirma = BinaryImage();
                            }
                            break;
                        case 3:
                            if (item.firma != "")
                            {
                                tirthFirma = Convert.FromBase64String(item.firma.Split(',')[1]);
                            }
                            else
                            {
                                tirthFirma = BinaryImage();
                            }
                            break;
                        case 4:
                            if (item.firma != "")
                            {
                                forthFirma = Convert.FromBase64String(item.firma.Split(',')[1]);
                            }
                            else
                            {
                                forthFirma = BinaryImage();
                            }
                            break;
                        case 5:
                            if (item.firma != "")
                            {
                                fivethFirma = Convert.FromBase64String(item.firma.Split(',')[1]);
                            }
                            else
                            {
                                fivethFirma = BinaryImage();
                            }
                            break;
                    }
                }


                var data = gestionDeProyectoService.getGestionDeProyectoService().getEncabezadoDatos();
                string path = data.logo;
                byte[] imgdata = File.ReadAllBytes(MapPath(path));
                string empresa = data.nombreEmpresa;

                tableEncabezado.Rows.Add(imgdata, empresa, nombreReporte, area, firstFirma, secondFirma, tirthFirma, forthFirma, fivethFirma);

            }
            catch (Exception ex)
            {

            }
            return tableEncabezado;
        }
        public DataTable getInfoEncaEvaluacion(string nombreReporte, string area, int evaluacion_id)
        {
            DataTable tableEncabezado = new DataTable();

            try
            {
                tableEncabezado.Columns.Add("logo", System.Type.GetType("System.Byte[]"));
                tableEncabezado.Columns.Add("nombreEmpresa", System.Type.GetType("System.String"));
                tableEncabezado.Columns.Add("nombreReporte", System.Type.GetType("System.String"));
                tableEncabezado.Columns.Add("area", System.Type.GetType("System.String"));
                tableEncabezado.Columns.Add("firstFirma", System.Type.GetType("System.Byte[]"));
                tableEncabezado.Columns.Add("secondFirma", System.Type.GetType("System.Byte[]"));
                tableEncabezado.Columns.Add("tirthFirma", System.Type.GetType("System.Byte[]"));
                tableEncabezado.Columns.Add("forthFirma", System.Type.GetType("System.Byte[]"));
                tableEncabezado.Columns.Add("fivethFirma", System.Type.GetType("System.Byte[]"));
                tableEncabezado.Columns.Add("logoPmo", System.Type.GetType("System.Byte[]"));

                int contador = 0;
                byte[] firstFirma = new byte[0];
                byte[] secondFirma = new byte[0];
                byte[] tirthFirma = new byte[0];
                byte[] forthFirma = new byte[0];
                byte[] fivethFirma = new byte[0];

                var listaFirmas = new EvaluacionSubcontratistaService(new EvaluacionSubcontratistaDAO()).obtenerFirmas(evaluacion_id);

                foreach (var firma in listaFirmas)
                {
                    contador++;

                    switch (contador)
                    {
                        case 1:
                            firstFirma = !string.IsNullOrEmpty(firma.rutaArchivoFirma) ? File.ReadAllBytes(firma.rutaArchivoFirma) : BinaryImage();
                            break;
                        case 2:
                            secondFirma = !string.IsNullOrEmpty(firma.rutaArchivoFirma) ? File.ReadAllBytes(firma.rutaArchivoFirma) : BinaryImage();
                            break;
                    }
                }

                byte[] imgdata = File.ReadAllBytes(MapPath(@"\Content\img\logo\logo.jpg"));
                byte[] logoPmo = File.ReadAllBytes(MapPath(@"\Content\img\logo\PMO.jpeg"));

                tableEncabezado.Rows.Add(imgdata, "SOL- INDUSTRIALES SA DE CV", nombreReporte, area, firstFirma, secondFirma, tirthFirma, forthFirma, fivethFirma, logoPmo);
            }
            catch (Exception ex)
            {

            }

            return tableEncabezado;
        }

        public byte[] BinaryImage()
        {
            Bitmap source = new Bitmap(20, 20);
            int umb = 2;
            Bitmap target = new Bitmap(source.Width, source.Height, source.PixelFormat);
            for (int i = 0; i < source.Width; i++)
            {
                for (int e = 0; e < source.Height; e++)
                {
                    Color col = source.GetPixel(i, e);
                    byte gray = (byte)(col.R * 0.3f + col.G * 0.59f + col.B * 0.11f);
                    byte value = 0;
                    if (gray > umb)
                    {
                        value = 255;
                    }
                    Color newColor = System.Drawing.Color.FromArgb(value, value, value);
                    target.SetPixel(i, e, newColor);
                }
            }
            return BitmapToByteArray(target);
        }
        public byte[] BitmapToByteArray(Bitmap bitmap)
        {

            BitmapData bmpdata = null;

            try
            {
                bmpdata = bitmap.LockBits(new Rectangle(0, 0, bitmap.Width, bitmap.Height), ImageLockMode.ReadOnly, bitmap.PixelFormat);
                int numbytes = bmpdata.Stride * bitmap.Height;
                byte[] bytedata = new byte[numbytes];
                IntPtr ptr = bmpdata.Scan0;

                Marshal.Copy(ptr, bytedata, 0, numbytes);

                return bytedata;
            }
            finally
            {
                if (bmpdata != null)
                    bitmap.UnlockBits(bmpdata);
            }

        }
        private void setMcontrolCalidad(int idAsignacion, int TipoControl)
        {

            rd = new rptControlCalidad();

            List<ControlCalidadDTO2> controlCalidad = new List<ControlCalidadDTO2>();
            var o = ControlCalidadService.getControlCalidadFactoryServices().getControlCalidadById(idAsignacion, TipoControl);
            ControlCalidadDTO2 cal = new ControlCalidadDTO2();
            cal.id = o.id;
            cal.IdAsignacion = o.IdAsignacion;
            cal.TipoControl = o.TipoControl;
            cal.Folio = o.Folio;
            cal.IdEconomico = o.IdEconomico;
            cal.NoEconomico = o.NoEconomico;
            cal.FechaCaptura = o.FechaCaptura;
            cal.Horometro = o.Horometro;
            cal.Obra = o.Obra;
            cal.CcOrigen = o.CcOrigen;
            cal.CcDestino = o.CcDestino;
            cal.MarcaMotor = o.MarcaMotor;
            cal.ModeloMotor = o.ModeloMotor;
            cal.SerieMotor = o.SerieMotor;
            cal.CompañiaTraslado = o.CompañiaTraslado;
            cal.VehiculoTraslado = o.VehiculoTraslado;
            cal.OperadorTraslado = o.OperadorTraslado;
            cal.Observaciones = o.Observaciones;
            cal.archivoSetFotografico = o.archivoSetFotografico;
            cal.archivoRehabilitacion = o.archivoRehabilitacion;
            cal.archivoDN = o.archivoDN;
            cal.archivoSOS = o.archivoSOS;
            cal.archivoBitacora = o.archivoBitacora;
            cal.archivoCheckList = o.archivoCheckList;
            cal.archivoVidaAceites = o.archivoVidaAceites;
            controlCalidad.Add(cal);

            var lstGrupos = GrupoPreguntasCalidad.getGrupoPreguntasFactoryServices().getListGrupoPreguntas();
            var lstPreguntas = PreguntasCalidad.getPreguntasFactoryServices().getListPreguntasCalidad();
            var objMaquina = controlEnvioyRecepcionFactoryServices.getControlEnvioyRecepcionFactoryServices().GetInfoMaquinaria(controlCalidad.FirstOrDefault().IdEconomico);
            var lstRespuestas = RespuestasCalidadService.getRespuestasCalidadFactoryServices().getListRespuestasCalidad(controlCalidad.FirstOrDefault().id);
            List<RespuestasCalidadDTO> LstRespuestaCompleto = new List<RespuestasCalidadDTO>();

            int count = 0;

            foreach (var objRespuesta in lstRespuestas)
            {
                RespuestasCalidadDTO objrespuestaCompleto = new RespuestasCalidadDTO();

                objrespuestaCompleto.Pregunta = lstPreguntas[count].Pregunta;
                objrespuestaCompleto.NoTiene = objRespuesta.Respuesta == 0 ? "X" : " ";
                objrespuestaCompleto.Bueno = objRespuesta.Respuesta == 1 ? "X" : " ";
                objrespuestaCompleto.Regular = objRespuesta.Respuesta == 2 ? "X" : " ";
                objrespuestaCompleto.Malo = objRespuesta.Respuesta == 3 ? "X" : " ";
                objrespuestaCompleto.Cantidad = objRespuesta.Cantidad.ToString();
                objrespuestaCompleto.Serie = objRespuesta.Serie;
                objrespuestaCompleto.Medida = objRespuesta.Medida;
                objrespuestaCompleto.VidaUtil = objRespuesta.VidaUtil;
                objrespuestaCompleto.Marca = objRespuesta.Marca;
                objrespuestaCompleto.Grupo = lstGrupos.FirstOrDefault(x => x.Id == lstPreguntas[count].IdGrupo).Descripcion;
                objrespuestaCompleto.TipoPregunta = lstPreguntas[count].TipoPregunta.ToString();
                objrespuestaCompleto.idGrupo = lstGrupos.FirstOrDefault(x => x.Id == lstPreguntas[count].IdGrupo).Id.ToString();
                objrespuestaCompleto.idGrupoInt = lstGrupos.FirstOrDefault(x => x.Id == lstPreguntas[count].IdGrupo).Id;

                count++;
                LstRespuestaCompleto.Add(objrespuestaCompleto);
            }

            List<RespuestasCalidadDTO> LstRespuestaCompleto1 = new List<RespuestasCalidadDTO>();
            List<RespuestasCalidadDTO> LstRespuestaCompleto2 = new List<RespuestasCalidadDTO>();

            foreach (var objGrupo in lstGrupos)
            {
                List<RespuestasCalidadDTO> LstRespuestaGrupo = LstRespuestaCompleto.Where(x => x.idGrupoInt == objGrupo.Id).ToList();

                if (objGrupo.Id != 4)
                {
                    int countGrupo = LstRespuestaGrupo.Count;
                    bool impar = (countGrupo % 2) == 1;

                    countGrupo = impar ? countGrupo + 1 : countGrupo;

                    int mitad = countGrupo / 2;
                    int aux = 1;
                    int auxBaterias = 1;


                    foreach (var objrespuesta in LstRespuestaGrupo)
                    {
                        if (aux <= mitad)
                        {
                            if (objrespuesta.TipoPregunta.Equals("2"))
                            {
                                objrespuesta.noPregunta = (aux - 1).ToString() + "." + auxBaterias.ToString();
                                auxBaterias++;
                                aux--;
                                mitad--;
                            }
                            else { objrespuesta.noPregunta = aux.ToString(); }

                            LstRespuestaCompleto1.Add(objrespuesta);
                        }
                        else
                        {
                            objrespuesta.noPregunta = aux.ToString();
                            LstRespuestaCompleto2.Add(objrespuesta);

                            if (impar && aux == countGrupo - 1)
                            {

                                LstRespuestaCompleto2.Add(new RespuestasCalidadDTO() { idGrupo = objGrupo.Id.ToString(), idGrupoInt = objGrupo.Id });
                            }
                        }

                        aux++;
                    }
                }
                else
                {
                    count = 1;
                    foreach (var objrespuesta in LstRespuestaGrupo)
                    {
                        objrespuesta.noPregunta = count.ToString();
                        LstRespuestaCompleto1.Add(objrespuesta);

                        LstRespuestaCompleto2.Add(new RespuestasCalidadDTO() { idGrupo = objGrupo.Id.ToString(), idGrupoInt = objGrupo.Id });

                    }
                }

            }

            List<RespuestasCalidadDTO> lstRespuestaCompletaDividida = new List<RespuestasCalidadDTO>();
            count = 0;
            foreach (var obj in LstRespuestaCompleto1)
            {
                RespuestasCalidadDTO objrespuestaCompleto = new RespuestasCalidadDTO();
                objrespuestaCompleto.noPregunta = obj.noPregunta ?? "";
                objrespuestaCompleto.Pregunta = obj.Pregunta ?? "";
                objrespuestaCompleto.NoTiene = obj.NoTiene ?? "";
                objrespuestaCompleto.Bueno = obj.Bueno ?? "";
                objrespuestaCompleto.Regular = obj.Regular ?? "";
                objrespuestaCompleto.Malo = obj.Malo ?? "";
                objrespuestaCompleto.Cantidad = obj.Cantidad ?? "";
                objrespuestaCompleto.Serie = obj.Serie ?? "";
                objrespuestaCompleto.Medida = obj.Medida ?? "";
                objrespuestaCompleto.VidaUtil = obj.VidaUtil ?? "";
                objrespuestaCompleto.Marca = obj.Marca ?? "";
                objrespuestaCompleto.Grupo = obj.Grupo ?? "";
                objrespuestaCompleto.TipoPregunta = obj.TipoPregunta ?? "";
                objrespuestaCompleto.idGrupo = obj.idGrupo;
                objrespuestaCompleto.idGrupoInt = Int32.Parse(obj.idGrupo);
                objrespuestaCompleto.noPregunta2 = LstRespuestaCompleto2[count].noPregunta ?? "";
                objrespuestaCompleto.Pregunta2 = LstRespuestaCompleto2[count].Pregunta ?? "";
                objrespuestaCompleto.NoTiene2 = LstRespuestaCompleto2[count].NoTiene ?? "";
                objrespuestaCompleto.Bueno2 = LstRespuestaCompleto2[count].Bueno ?? "";
                objrespuestaCompleto.Regular2 = LstRespuestaCompleto2[count].Regular ?? "";
                objrespuestaCompleto.Malo2 = LstRespuestaCompleto2[count].Malo ?? "";
                objrespuestaCompleto.Cantidad2 = LstRespuestaCompleto2[count].Cantidad ?? "";
                objrespuestaCompleto.Serie2 = LstRespuestaCompleto2[count].Serie ?? "";
                objrespuestaCompleto.Medida2 = LstRespuestaCompleto2[count].Medida ?? "";
                objrespuestaCompleto.VidaUtil2 = LstRespuestaCompleto2[count].VidaUtil ?? "";
                objrespuestaCompleto.Marca2 = LstRespuestaCompleto2[count].Marca ?? "";

                count++;
                lstRespuestaCompletaDividida.Add(objrespuestaCompleto);

            }
            string descripcion = "";
            string marcaDEscripcion = "";
            string modeloDescripcion = "";
            string serieDescripcion = "";

            if (objMaquina != null)
            {
                descripcion = objMaquina.descripcion;
                marcaDEscripcion = objMaquina.modeloEquipo.descripcion;
                modeloDescripcion = objMaquina.modeloEquipo.descripcion;
                serieDescripcion = objMaquina.noSerie;
            }

            string recepcion = " ";
            string Envio = "";

            if (TipoControl == 1 || TipoControl == 3)
            {
                Envio = "X";
                recepcion = "";
            }
            else
            {
                Envio = " ";
                recepcion = "X";
            }

            rd.Database.Tables[0].SetDataSource(getInfoEnca("Control de Calidad", "Direccion Maquinaria y Equipo"));
            rd.Database.Tables[1].SetDataSource(controlCalidad);
            rd.Database.Tables[2].SetDataSource(lstRespuestaCompletaDividida);

            rd.SetParameterValue("Descripcion", descripcion);
            rd.SetParameterValue("Marca", marcaDEscripcion);
            rd.SetParameterValue("Modelo", modeloDescripcion);
            rd.SetParameterValue("Serie", serieDescripcion);
            rd.SetParameterValue("Recepcion", recepcion);
            rd.SetParameterValue("Envio", Envio);
            rd.SetParameterValue("hEco", setTitleEco());
            rd.SetParameterValue("VersionDocumento", "Ver. 1, 01-08-2018");
            Session.Add("reporte", rd);
        }

        private void setControlEnvio(int pidControl, int tipoControl)
        {
            rd = new rptControlEnvioRecepcion();
            rd.Database.Tables[0].SetDataSource(getInfoEnca("Control de envío / recepción", "Dirección de Maquinaria y Equipo"));

            Session["downloadPDF"] = null;


            string nombreCC = "";
            var dto = controlEnvioyRecepcionFactoryServices.getControlEnvioyRecepcionFactoryServices().getReporteEnvioTipo(pidControl, tipoControl);
            var controlCalida = ControlCalidadService.getControlCalidadFactoryServices().getByIDAsignacionTipo(dto.asignacionEquipoId, tipoControl);
            var Asignacion = asignacionEquiposFactoryServices.getAsignacionEquiposFactoryServices().GetAsiganacionById(dto.asignacionEquipoId);

            var Economico = maquinaFactoryServices.getMaquinaServices().GetMaquina(dto.noEconomico);
            var Clase = Economico.grupoMaquinaria.descripcion;
            var noEconomico = Economico.noEconomico;

            if (tipoControl == 1 || tipoControl == 3)
            {
                nombreCC = controlCalida.CcOrigen;
            }
            else
            {
                nombreCC = controlCalida.CcDestino;
            }

            if (tipoControl == 3)
            {
                nombreCC = Session["origenTMCPRV"] as string;
            }
            //if (tipoControl == 4)
            //{
            //    nombreCC = Session["destinoTMCPRV"] as string;
            //}

            var marca = Economico.marca != null ? Economico.marca.descripcion : "";
            var serie = Economico.noSerie;
            var modelo = Economico.modeloEquipo != null ? Economico.modeloEquipo.descripcion : "";


            string REnvio = ""; //Reponsable Envio
            string Rrecepcion = "";//Responsable Recepcion
            int kmE = 0; // Kilometraje Envio
            decimal horometrosE = 0; //Horometros Envio
            int kmR = 0; // Kilometraje Recepcion
            decimal horometrosR = 0; //Kilometraje Recepcion
            string FechaEnvio = ""; //Fecha Envio
            string FechaRecepcion = ""; // Fecha Recepcion
            string CompaniaEnvio = "";
            string CompaniaRecpecion = "";

            if (tipoControl == 1 || tipoControl == 3)
            {
                REnvio = dto.nombreResponsable;
                kmE = dto.kilometraje;
                horometrosE = dto.horometros;
                FechaEnvio = dto.fechaRecepcionEmbarque.ToString("dd/MM/yyyy");
                CompaniaEnvio = dto.compañiaResponsable;

            }
            else
            {

                var ob = controlEnvioyRecepcionFactoryServices.getControlEnvioyRecepcionFactoryServices().getReporteRecepcion(dto.noEconomico, dto.solicitudEquipoID, tipoControl);
                Rrecepcion = dto.nombreResponsable;
                kmR = dto.kilometraje;
                horometrosR = dto.horometros;
                FechaRecepcion = dto.fechaRecepcionEmbarque.ToString("dd/MM/yyyy");

                REnvio = ob == null ? "" : ob.nombreResponsable;
                kmE = ob == null ? 0 : ob.kilometraje;
                horometrosE = ob == null ? 0 : ob.horometros;
                FechaEnvio = ob == null ? DateTime.Now.ToString("dd/MM/yyyy") : ob.fechaRecepcionEmbarque.ToString("dd/MM/yyyy");
                CompaniaRecpecion = ob == null ? "" : dto.compañiaResponsable;
                CompaniaEnvio = ob == null ? "" : ob.compañiaResponsable;

            }
            ControlEnvioRecepcionDTO controldto = new ControlEnvioRecepcionDTO
            {


                Aduana = dto.pedAduana ? "SI" : "NO",
                Bitacora = dto.bitacora ? "SI" : "NO",
                //  CatPartes = "SI",//dto.catpartes
                Clase = Clase,
                CompaniaEnvio = dto.compañiaResponsableEnvio,
                CompaniaRecepcion = dto.compañiaResponsableRecepcion,
                CompaniaTransporte = dto.companiaTransporte,
                ControlCalidad = dto.controlCalidad ? "SI" : "NO",
                CopiaFactura = dto.copiaFactura ? "SI" : "NO",
                DiasTransalado = dto.diasTranslado.ToString(),
                Economico = noEconomico,
                Fecha = dto.fechaElaboracion.ToString("dd/MM/yyyy"),

                FechaEmbarque = FechaEnvio,
                FechaRecepcion = FechaRecepcion,

                HorometroEnvio = horometrosE.ToString(),
                HorometroRecepcion = horometrosR.ToString(),

                KmEnvio = kmE.ToString(),
                KmRecepcion = kmR.ToString(),

                Lugar = nombreCC,
                ManualMantto = dto.manualMant ? "SI" : "NO",
                ManualOperacion = dto.manualOperacion ? "SI" : "NO",
                ManualServicios = "NO",
                CatPartes = "NO",
                Marca = marca,
                Modelo = modelo,
                NombreEnvio = dto.nombreResponsableEnvio,
                NombreRecepcion = dto.nombreResponsableRecepcion,
                Notas = dto.nota,

                Placas = dto.placas ? "SI" : "NO",
                ReporteFalla = dto.ReporteFalla ? "SI" : "NO",
                ResponsableTransporte = dto.responsableTrasnporte,
                Serie = serie,
                Tanque1 = dto.tanque1.ToString(),
                Tanque2 = dto.tanque2.ToString(),
                TipoControl = dto.tipoControl == 1 || dto.tipoControl == 3 ? "E" : "R",
                Transporte = dto.Transporte

            };

            List<ControlEnvioRecepcionDTO> listRes = new List<ControlEnvioRecepcionDTO>();
            listRes.Add(controldto);
            rd.Database.Tables[1].SetDataSource(listRes);
            //rd.SetParameterValue("LugarRecepcion", tipoControl == 3 || tipoControl == 4 ? Session["destinoTMCPRV"] as string : controlCalida.CcDestino);
            rd.SetParameterValue("LugarRecepcion", controlCalida.CcDestino);
            //rd.SetParameterValue("LugarEnvio", tipoControl == 3 || tipoControl == 4 ? Session["origenTMCPRV"] as string : controlCalida.CcOrigen);
            rd.SetParameterValue("LugarEnvio", controlCalida.CcOrigen);
            rd.SetParameterValue("hEco", setTitleEco());
            rd.SetParameterValue("Fecha", dto.fechaElaboracion.ToShortDateString());
            rd.SetParameterValue("txtLugarEnvio", "Lugar de envio o recepción");
            rd.SetParameterValue("VersionDocumento", "Ver. 1, 01-08-2018");
            Session.Add("reporte", rd);
        }

        private void GuardarReporte(int reporte)
        {
            switch (reporte)
            {
                case 86:
                    //maquinaFactoryServices.getMaquinaServices().GuardarCargoNominaCC((List<byte[]>)Session["downloadPDF"]);
                    //Session["downloadPDF"] = null;
                    break;
            }
        }

        private DataTable GetRespuestas(List<RespuestasEncuestasDTO> Data)
        {
            DataTable tableEncabezado = new DataTable();

            tableEncabezado.Columns.Add("Calificacion", System.Type.GetType("System.Byte[]"));
            tableEncabezado.Columns.Add("TipoPregunta", System.Type.GetType("System.String"));
            tableEncabezado.Columns.Add("Pregunta", System.Type.GetType("System.String"));
            tableEncabezado.Columns.Add("Comentario", System.Type.GetType("System.String"));
            tableEncabezado.Columns.Add("DescripcionTipo", System.Type.GetType("System.String"));
            tableEncabezado.Columns.Add("CalificacionDescripcion", System.Type.GetType("System.String"));

            foreach (var item in Data)
            {

                string path = "";
                switch ((int)item.Calificacion)
                {
                    case 0:
                        path = @"\Content\img\Encuestas\S_Value0.png";
                        break;
                    case 1:
                        path = @"\Content\img\Encuestas\S_Value1.png";
                        break;
                    case 2:
                        path = @"\Content\img\Encuestas\S_Value2.png";
                        break;
                    case 3:
                        path = @"\Content\img\Encuestas\S_Value3.png";
                        break;
                    case 4:
                        path = @"\Content\img\Encuestas\S_Value4.png";
                        break;
                    case 5:
                        path = @"\Content\img\Encuestas\S_Value5.png";
                        break;

                    default:
                        break;
                }

                byte[] imgdata = File.ReadAllBytes(MapPath(path));
                string empresa = "SOL - INDUSTRAILES  S.A. de C.V.";
                tableEncabezado.Rows.Add(imgdata, item.tipoPregunta, item.Pregunta, item.Comentario, item.DescripcionTipo, item.CalificacionDescripcion);
            }
            return tableEncabezado;

        }

        private dtsMotivosParoDTO infoMotivosParo(int p, string TM, string TP, string motivoParo)
        {
            dtsMotivosParoDTO dtsMotivosParoDTO = new dtsMotivosParoDTO();
            switch (motivoParo)
            {
                case "2":
                    dtsMotivosParoDTO.trabajando = "X";

                    break;

                case "1":
                    dtsMotivosParoDTO.stanby = "X";
                    break;
                case "3":
                    dtsMotivosParoDTO.tramo = "X";
                    break;
                default:
                    break;
            }

            switch (p)
            {
                case 1:
                    dtsMotivosParoDTO.MP1 = "X";

                    break;
                case 2:
                    dtsMotivosParoDTO.MP2 = "X";
                    break;
                case 3:
                    dtsMotivosParoDTO.MP3 = "X";
                    break;
                case 4:
                    dtsMotivosParoDTO.MP4 = "X";
                    break;
                case 5:
                    dtsMotivosParoDTO.MP5 = "X";
                    break;
                case 6:
                    dtsMotivosParoDTO.MP6 = "X";
                    break;
                case 7:
                    dtsMotivosParoDTO.MP7 = "X";
                    break;
                case 8:
                    dtsMotivosParoDTO.MP8 = "X";
                    break;
                case 9:
                    dtsMotivosParoDTO.MP9 = "X";
                    break;
                case 10:
                    dtsMotivosParoDTO.MP10 = "X";
                    break;
                case 11:
                    dtsMotivosParoDTO.MP11 = "X";
                    break;
                case 12:
                    dtsMotivosParoDTO.MP12 = "X";
                    break;
                case 13:
                    dtsMotivosParoDTO.MP13 = "X";
                    break;
                case 14:
                    dtsMotivosParoDTO.MP14 = "X";
                    break;
                case 15:
                    dtsMotivosParoDTO.MP15 = "X";
                    break;
                case 16:
                    dtsMotivosParoDTO.MP16 = "X";
                    break;
                case 17:
                    dtsMotivosParoDTO.MP17 = "X";
                    break;
                case 18:
                    dtsMotivosParoDTO.MP18 = "X";
                    break;
                case 19:
                    dtsMotivosParoDTO.MP19 = "X";
                    break;
                case 20:
                    dtsMotivosParoDTO.MP20 = "X";
                    break;
                case 21:
                    dtsMotivosParoDTO.MP21 = "X";
                    break;
                case 22:
                    dtsMotivosParoDTO.MP22 = "X";
                    break;
                case 23:
                    dtsMotivosParoDTO.MP23 = "X";
                    break;
                case 24:
                    dtsMotivosParoDTO.MP24 = "X";
                    break;
                case 25:
                    dtsMotivosParoDTO.MP25 = "X";
                    break;
                case 26:
                    dtsMotivosParoDTO.MP26 = "X";
                    break;
                case 27:
                    dtsMotivosParoDTO.MP27 = "X";
                    break;
                default:
                    break;
            }

            switch (TM)
            {
                case "Preventivo":
                    dtsMotivosParoDTO.preventivo = "X";
                    break;
                case "Correctivo":
                    dtsMotivosParoDTO.correctivo = "X";
                    break;
                case "Predictivo":
                    dtsMotivosParoDTO.predictivo = "X";
                    break;
                default:
                    break;
            }

            switch (TP)
            {
                case "Programado":
                    dtsMotivosParoDTO.programado = "X";
                    break;
                case "No Programado":
                    dtsMotivosParoDTO.noProgramado = "X";
                    break;
                default:
                    break;
            }

            return dtsMotivosParoDTO;
        }

        private string getTipo(int p)
        {
            switch (p)
            {
                case 1:
                    return "A";
                case 2:
                    return "B";
                case 3:
                    return "C";
                case 4:
                    return "D";
                case 5:
                    return "E";

                default:
                    return "";
            }
        }

        private string GetInfoMaquinaria(int id)
        {
            objMaquinaria = new tblM_CatMaquina();
            if (id == 0)
            {
                return "";
            }
            else
            {
                objMaquinaria = maquinaFactoryServices.getMaquinaServices().GetMaquinaByID(id).FirstOrDefault();
                return objMaquinaria.noEconomico;
            }

        }

        private void setMedidasReporte(string p)
        {
            var r = vSesiones.sesionCurrentResolution;

            switch (p)
            {
                case "VC":
                    //crvReporteEstandar.Width = 920;
                    //crvReporteEstandar.Height = r.height - 320; //<1080
                    crvReporteEstandar.Width = r.width;
                    crvReporteEstandar.Height = r.height - 150; //<1080
                    break;
                case "HO":
                    //crvReporteEstandar.Width = r.width - 130;
                    //crvReporteEstandar.Height = r.height - 320;
                    crvReporteEstandar.Width = r.width;
                    crvReporteEstandar.Height = r.height - 150;
                    break;
                case "HC":
                    //crvReporteEstandar.Width = 1230;
                    //crvReporteEstandar.Height = r.height - 320;
                    crvReporteEstandar.Width = r.width;
                    crvReporteEstandar.Height = r.height - 150;
                    break;
                case "NOMODAL":
                    crvReporteEstandar.Width = 1230;
                    crvReporteEstandar.Height = 520;
                    break;

                case "HorizontalCarta_NoModal":
                    crvReporteEstandar.Width = 1230;
                    if (r.height >= 1050)
                    {
                        crvReporteEstandar.Width = 1300;
                        crvReporteEstandar.Height = 720;
                    }

                    if (r.height >= 800 && r.height < 1050)
                    {
                        crvReporteEstandar.Height = 530;
                    }
                    if (r.height >= 768 && r.height < 800)
                    {
                        crvReporteEstandar.Height = 390;
                    }
                    if (r.height >= 600 && r.height < 768)
                    {
                        crvReporteEstandar.Height = 340;
                    }


                    break;
                default:
                    break;
            }





        }

        public static DataTable ToDataTable<T>(List<T> items)
        {
            DataTable dataTable = new DataTable(typeof(T).Name);

            //Get all the properties
            PropertyInfo[] Props = typeof(T).GetProperties(BindingFlags.Public | BindingFlags.Instance);
            foreach (PropertyInfo prop in Props)
            {
                //Setting column names as Property names
                dataTable.Columns.Add(prop.Name);
            }
            foreach (T item in items)
            {
                var values = new object[Props.Length];
                for (int i = 0; i < Props.Length; i++)
                {
                    //inserting property values to datatable rows
                    values[i] = Props[i].GetValue(item, null);
                }
                dataTable.Rows.Add(values);
            }
            //put a breakpoint here and check datatable
            return dataTable;
        }
        /// <summary>
        /// Método de reporte de gastos, obtiene la información para el reporte arma el dataset y sus parámetros.
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        private DataTable getInfoRep(RepGastosFiltrosDTO obj)
        {


            DataTable table = new DataTable();
            //Se obtiene el conjunto de datos de la consulta.
            var raw = repComparativaTiposFactoryServices.getComparativoTiposService().getAmountbyType(obj);
            //se obtiene el conjunto de datos de overhual.
            var rawsoh = repComparativaTiposFactoryServices.getComparativoTiposService().getAmountbyTypeNoOverhaul(obj);
            //se obtiene la lista de los numeros economicos
            var listNoEco = raw.Select(x => x.noEco).Distinct().ToList().OrderBy(x => x);

            var fechainicio = Convert.ToDateTime(obj.fechaInicio);
            var fechafin = Convert.ToDateTime(obj.fechaFin);

            int count = 0;
            try
            {
                //Esta lista es de las columnas.
                var listTipos = raw.Select(x => x.descripcion).Distinct().ToList();
                var listTiposFinal = new List<string>();
                listTiposFinal.Add("NO. ECO");
                listTiposFinal.AddRange(listTipos);
                listTiposFinal.Add("TOTAL");
                listTiposFinal.Add("TOTAL SIN OVERHAUL");
                listTiposFinal.Add("HORAS");
                listTiposFinal.Add("COSTO HORARIO");

                setParametro("noEconomico", "");
                setParametro("COSTOH", "");
                setParametro("MAQUINARIA", "");
                setParametro("MATERIALES", "");
                setParametro("ADMINISTRATIVOS", "");
                setParametro("Vacio", "");
                setParametro("TOTAL", "");
                setParametro("TOTALSNOV", "");
                setParametro("HORAS", "");
                setParametro("Vacio", "");


                foreach (var i in listTiposFinal)
                {
                    if (i.Equals("NO. ECO"))
                    {
                        setParametro("noEconomico", i);
                    }
                    else if (i.Equals("COSTO HORARIO"))
                    {
                        setParametro("COSTOH", i);
                    }
                    else if (i.Equals("MATERIALES"))
                    {
                        setParametro("MATERIALES", i);
                    }
                    else if (i.Equals("MAQUINARIA"))
                    {
                        setParametro("MAQUINARIA", i);
                    }
                    else if (i.Equals("ADMINISTRATIVOS"))
                    {
                        setParametro("ADMINISTRATIVOS", i);
                    }
                    else if (i.Equals("TOTAL"))
                    {
                        setParametro("TOTAL", i);
                    }
                    else if (i.Equals("TOTAL SIN OVERHAUL"))
                    {
                        setParametro("TOTALSNOV", i);
                    }
                    else if (i.Equals("HORAS"))
                    {
                        setParametro("HORAS", i);
                    }
                    else
                    {
                        // setParametro("dato"+count, i);
                        setParametro("Vacio", i);
                        count++;
                    }
                }

                int columns = 0;
                foreach (var array in listTiposFinal)
                {
                    if (array.Length > columns)
                    {
                        columns = array.Length;
                    }
                }

                foreach (var i in listTiposFinal)
                {
                    if (i.Equals("NO. ECO"))
                    {
                        table.Columns.Add("noEconomico");
                        // setParametro("noEconomico", i);
                    }
                    else if (i.Equals("COSTO HORARIO"))
                    {

                        table.Columns.Add("COSTOH");
                        // setParametro("COSTOH", i);
                    }
                    else if (i.Equals("MATERIALES"))
                    {
                        table.Columns.Add("MATERIALES");
                        //setParametro("MATERIALES", i);
                    }
                    else if (i.Equals("MAQUINARIA"))
                    {
                        table.Columns.Add("MAQUINARIA");
                        // setParametro("MAQUINARIA", i);
                    }
                    else if (i.Equals("ADMINISTRATIVOS"))
                    {
                        table.Columns.Add("ADMINISTRATIVOS");
                        // setParametro("ADMINISTRATIVOS", i);
                    }
                    else if (i.Equals("TOTAL"))
                    {
                        table.Columns.Add("TOTAL");
                        // setParametro("TOTAL", i);
                    }
                    else if (i.Equals("TOTAL SIN OVERHAUL"))
                    {
                        table.Columns.Add("TOTALSNOV");
                        //setParametro("TOTALSNOV", i);
                    }
                    else if (i.Equals("HORAS"))
                    {
                        table.Columns.Add("HORAS");
                        //setParametro("HORAS", i);
                    }
                    else
                    {
                        table.Columns.Add("Vacio");
                        // setParametro("Vacio", i);
                    }

                }


                foreach (var x in listNoEco)
                {
                    decimal total = 0;
                    decimal totalsoh = 0;
                    List<string> Row = new List<string>();
                    Row.Add(x);
                    foreach (var y in listTipos)
                    {

                        var valor = raw.FirstOrDefault(z => z.noEco.Equals(x) && z.descripcion.Equals(y));
                        var valorsoh = rawsoh.FirstOrDefault(z => z.noEco.Equals(x) && z.descripcion.Equals(y));
                        if (valor != null)
                        {
                            ///  var val = Convert.ToDecimal(valor == null ? "0" : valor.importe).ToString("C2");
                            Row.Add(Convert.ToDecimal(valor == null ? "0" : valor.importe).ToString("C2"));
                        }
                        else
                        {
                            Row.Add(0.ToString("C2"));
                        }

                        total += valor == null ? 0 : Convert.ToDecimal(valor.importe);
                        totalsoh += valorsoh == null ? 0 : Convert.ToDecimal(valorsoh.importe);
                    }
                    //Total
                    Row.Add(total.ToString("C2"));

                    //Total sin overhaul
                    Row.Add(totalsoh.ToString("C2"));

                    //Horas
                    var horometros = capturaHorometroFactoryServices.getCapturaHorometroServices().getDataTableByRangeDate(x, fechainicio, fechafin);
                    var horas = horometros.Sum(z => z.HorasTrabajo);

                    Row.Add(horas.ToString("0,0", CultureInfo.InvariantCulture));

                    //Costo horario
                    Row.Add((horas > 0 ? (totalsoh / horas).ToString("C2") : "$0"));

                    table.Rows.Add(Row.ToArray());
                }


            }
            catch (Exception)
            {

                throw;
            }


            return table;
        }
        private decimal changeFormat(string dato)
        {
            decimal num = 0;

            string result2 = dato;

            //int index1 = dato.IndexOf('$');
            //if (index1 != -1)
            //{
            //    result2 = dato.Remove(index1, 1); // Use integer from IndexOf.
            //}
            //int index2 = dato.IndexOf(',');
            //if (index2 != -1)
            //{
            //    result2 = result2.Remove(index2 - 1, index2 - 1); // Use integer from IndexOf.
            //}
            result2 = result2.Replace("$", "");
            result2 = result2.Replace(",", "");
            num = Convert.ToDecimal(result2);
            return num;
        }

        private DataTable getInfoRep(List<InfoCombustibleDTO> raw, DateTime pfecha)
        {
            DataTable table = new DataTable();
            List<string> Row;
            decimal totalGeneral = 0;
            var diasMes = new List<int>();

            var noEconomico = raw.GroupBy(x => x.noEconomico);

            int dias = DateTime.DaysInMonth(pfecha.Year, pfecha.Month);
            table.Columns.Add("Economico");
            table.Columns.Add("Descripcion");
            table.Columns.Add("Serie");

            for (int i = 1; i <= dias; i++)
            {
                table.Columns.Add("D" + i);
                diasMes.Add(i);
            }
            table.Columns.Add("Total");

            foreach (var item in noEconomico)
            {

                var noSerie = raw.FirstOrDefault(x => x.noEconomico.Equals(item.Key)).noSerie;
                Row = new List<string>();
                Row.Add(item.Key);
                Row.Add(item.Key);
                Row.Add(noSerie);

                decimal Total = 0;
                foreach (var j in diasMes)
                {

                    DateTime current = new DateTime(pfecha.Year, pfecha.Month, j);

                    var celda = raw.FirstOrDefault(x => x.noEconomico.Equals(item.Key) && x.fecha.Equals(current));

                    if (celda != null)
                    {
                        Total += celda.total;
                        ///  var val = Convert.ToDecimal(valor == null ? "0" : valor.importe).ToString("C2");
                        ///
                        Row.Add(Convert.ToDecimal(celda == null ? 0 : celda.total).ToString("0,0", CultureInfo.InvariantCulture));
                    }
                    else
                    {
                        Row.Add(0.ToString("0,0", CultureInfo.InvariantCulture));
                    }


                }
                totalGeneral += Total;
                Row.Add(Total.ToString());
                table.Rows.Add(Row.ToArray());

            }

            Row = new List<string>();
            Row.Add("");
            Row.Add("");
            Row.Add("Total Por Dia");
            for (int i = 1; i <= dias; i++)
            {
                decimal totalesDia = 0;
                // var field1 = table.Columns["D1"].ToString();
                foreach (DataRow dtRow in table.Rows)
                {

                    decimal totalDiario = Convert.ToDecimal(dtRow["D" + i + ""]);
                    totalesDia += totalDiario;
                }
                Row.Add(totalesDia.ToString());
            }
            Row.Add(totalGeneral.ToString());



            return table;
        }
        private void setParametro(string nombre, object value)
        {
            ParameterField paramField;
            ParameterDiscreteValue paramDiscreteValue;

            paramField = new ParameterField();
            paramField.Name = nombre;
            paramDiscreteValue = new ParameterDiscreteValue();
            paramDiscreteValue.Value = value;
            paramField.CurrentValues.Add(paramDiscreteValue);
            //Agrega el parámetro que se utilizara en el reporte.
            paramFields.Add(paramField);
        }

        /// <summary>
        /// Método utilizado para cargar el encabezado de los reportes, contiene dos parámetros.
        /// </summary>
        /// <param name="nombreReporte">Este parámetro recibe el nombre del reporte.</param>
        /// <param name="area">Este parámetro es del área a la que pertenece el reporte.</param>
        /// <returns></returns>
        public DataTable getInfoEnca(string nombreReporte, string area)
        {
            DataTable tableEncabezado = new DataTable();

            tableEncabezado.Columns.Add("logo", System.Type.GetType("System.Byte[]"));
            tableEncabezado.Columns.Add("nombreEmpresa", System.Type.GetType("System.String"));
            tableEncabezado.Columns.Add("nombreReporte", System.Type.GetType("System.String"));
            tableEncabezado.Columns.Add("area", System.Type.GetType("System.String"));

            var data = encabezadoFactoryServices.getEncabezadoServices().getEncabezadoDatos();
            string path = data.logo;
            byte[] imgdata = File.ReadAllBytes(MapPath(path));
            string empresa = data.nombreEmpresa;

            tableEncabezado.Rows.Add(imgdata, empresa, nombreReporte, area);

            return tableEncabezado;
        }

        public DataTable getEvidenciaOrdenBL(int idBL, int idTipoEvidencia)
        {
            DataTable tbl = new DataTable();
            tbl.Columns.Add("evidencia", System.Type.GetType("System.Byte[]"));
            byte[] Imagen = new byte[0];
            Imagen = capturaOTDetFactoryServices.getCapturaOTDetFactoryServices().obtenerImagen(idBL, idTipoEvidencia);

            tbl.Rows.Add(Imagen);
            return tbl;
        }

        public DataTable getEvidenciaOrdenBLLista(int idBL, int idTipoEvidencia)
        {
            DataTable tbl = new DataTable();
            tbl.Columns.Add("evidencia", System.Type.GetType("System.Byte[]"));
            List<byte[]> Imagen = new List<byte[]>();
            Imagen = capturaOTDetFactoryServices.getCapturaOTDetFactoryServices().obtenerImagenLista(idBL, idTipoEvidencia);

            foreach (var item in Imagen)
            {
                tbl.Rows.Add(item);
            }
            return tbl;
        }

        public DataTable getInfoEncaCplan(string nombreReporte, string area)
        {
            DataTable tableEncabezado = new DataTable();

            tableEncabezado.Columns.Add("logo", System.Type.GetType("System.Byte[]"));
            tableEncabezado.Columns.Add("nombreEmpresa", System.Type.GetType("System.String"));
            tableEncabezado.Columns.Add("nombreReporte", System.Type.GetType("System.String"));
            tableEncabezado.Columns.Add("area", System.Type.GetType("System.String"));

            var data = encabezadoFactoryServices.getEncabezadoServices().getEncabezadoDatosCplan();
            string path = data.logo;
            byte[] imgdata = File.ReadAllBytes(MapPath(path));
            string empresa = data.nombreEmpresa;

            tableEncabezado.Rows.Add(imgdata, empresa, nombreReporte, area);

            return tableEncabezado;
        }
        public DataTable getInfoEncaCplan2(string nombreReporte, string area)
        {
            DataTable tableEncabezado = new DataTable();

            tableEncabezado.Columns.Add("logo", System.Type.GetType("System.Byte[]"));
            tableEncabezado.Columns.Add("titulo", System.Type.GetType("System.String"));
            tableEncabezado.Columns.Add("nombreEmpresa", System.Type.GetType("System.String"));
            tableEncabezado.Columns.Add("nombreReporte", System.Type.GetType("System.String"));
            tableEncabezado.Columns.Add("area", System.Type.GetType("System.String"));

            var data = encabezadoFactoryServices.getEncabezadoServices().getEncabezadoDatosCplan();
            string path = data.logo;
            string titulo = nombreReporte;
            byte[] imgdata = File.ReadAllBytes(MapPath(path));
            string empresa = data.nombreEmpresa;

            tableEncabezado.Rows.Add(imgdata, titulo, empresa, nombreReporte, area);

            return tableEncabezado;
        }
        protected void Page_Unload(object sender, EventArgs e)
        {
            if (rd != null)
            {
                rd.Close();
                rd.Dispose();
                GC.Collect();
            }
        }

        private string HoraToString(int hora)
        {
            string result = "";
            switch (hora)
            {
                case 0:
                    result = "00:00";
                    break;
                case 1:
                    result = "01:00";
                    break;
                case 2:
                    result = "02:00";
                    break;
                case 3:
                    result = "03:00";
                    break;
                case 4:
                    result = "04:00";
                    break;
                case 5:
                    result = "05:00";
                    break;
                case 6:
                    result = "06:00";
                    break;
                case 7:
                    result = "07:00";
                    break;
                case 8:
                    result = "08:00";
                    break;
                case 9:
                    result = "09:00";
                    break;
                case 10:
                    result = "10:00";
                    break;
                case 11:
                    result = "11:00";
                    break;
                case 12:
                    result = "12:00";
                    break;
                case 13:
                    result = "13:00";
                    break;
                case 14:
                    result = "14:00";
                    break;
                case 15:
                    result = "15:00";
                    break;
                case 16:
                    result = "16:00";
                    break;
                case 17:
                    result = "17:00";
                    break;
                case 18:
                    result = "18:00";
                    break;
                case 19:
                    result = "19:00";
                    break;
                case 20:
                    result = "20:00";
                    break;
                case 21:
                    result = "21:00";
                    break;
                case 22:
                    result = "22:00";
                    break;
                case 23:
                    result = "23:00";
                    break;
                default:
                    break;
            }
            return result;
        }

        private List<string> metodo(int mes, int anio)
        {

            var periodo = anio;
            var MesInicio = mes;
            List<string> tituloMeses = new List<string>();

            var count = 0;
            for (var i = MesInicio; i < 12; i++)
            {
                count++;

                string fullMonthName = new DateTime(2015, i + 1, 1).ToString("MMMM", CultureInfo.CreateSpecificCulture("es"));

                var MesFormat = fullMonthName.Substring(0, 3).ToUpper();

                tituloMeses.Add(MesFormat + " " + anio);
            }

            for (var i = 0; i < MesInicio; i++)
            {
                anio = periodo;
                string fullMonthName = new DateTime(2015, i + 1, 1).ToString("MMMM", CultureInfo.CreateSpecificCulture("es"));

                var MesFormat = fullMonthName.Substring(0, 3).ToUpper();
                anio += 1;
                tituloMeses.Add(MesFormat + " " + anio);
            }

            return tituloMeses;
        }

        public List<string> getAcumulado(int mes, EstadoResultadosDTO UtilidadNeta)
        {
            decimal Temp1 = UtilidadNeta.Fecha1;
            string acumulado = Temp1.ToString("#,##0.##");
            var count = 0;

            List<decimal> ListaUtilidadNeta = new List<decimal>();
            ListaUtilidadNeta.Add(UtilidadNeta.Fecha1);
            ListaUtilidadNeta.Add(UtilidadNeta.Fecha2);
            ListaUtilidadNeta.Add(42370);
            ListaUtilidadNeta.Add(UtilidadNeta.Fecha4);
            ListaUtilidadNeta.Add(UtilidadNeta.Fecha5);
            ListaUtilidadNeta.Add(UtilidadNeta.Fecha6);
            ListaUtilidadNeta.Add(UtilidadNeta.Fecha7);
            ListaUtilidadNeta.Add(UtilidadNeta.Fecha8);
            ListaUtilidadNeta.Add(UtilidadNeta.Fecha9);
            ListaUtilidadNeta.Add(UtilidadNeta.Fecha10);
            ListaUtilidadNeta.Add(UtilidadNeta.Fecha11);
            ListaUtilidadNeta.Add(UtilidadNeta.Fecha12);

            List<string> Acumulado = new List<string>();
            Acumulado.Add(acumulado);

            decimal TotalData = Temp1;
            for (var i = mes; i < 11; i++)
            {
                if (count == 2)
                {
                    TotalData = 42370;
                    acumulado = TotalData.ToString("#,##0.##");
                    Acumulado.Add(acumulado);
                    count++;
                }
                else
                {
                    TotalData += ListaUtilidadNeta[count];
                    acumulado = TotalData.ToString("#,##0.##");
                    Acumulado.Add(acumulado);
                    count++;
                }

            }
            TotalData = 0;
            TotalData += ListaUtilidadNeta[count];
            count++;
            acumulado = TotalData.ToString("#,##0.##");
            Acumulado.Add(acumulado);

            for (var i = 1; i < mes; i++)
            {
                TotalData += ListaUtilidadNeta[count];
                acumulado = TotalData.ToString("#,##0.##");
                Acumulado.Add(acumulado);
                count++;
                // Temp1 += Temp1;

            }

            return Acumulado;
        }

        public double CalcularDiasDeDiferencia(DateTime primerFecha, DateTime segundaFecha)
        {
            TimeSpan diferencia;
            diferencia = primerFecha - segundaFecha;

            return diferencia.Days;
        }

        protected void Button1_Click(object sender, EventArgs e)
        {
            var nombrePDF = "Reporte";

            int reporte = Convert.ToInt32(Request.QueryString["idReporte"]);
            SetInfoReporte(reporte);

            //Reporte de Enkontrol para las Órdenes de Compra.
            if (reporte == 113)
            {
                var cc = Request.QueryString["cc"];
                var numero = Request.QueryString["numero"];

                nombrePDF = "Orden de Compra " + cc + "-" + fillNo(numero, 6);
            }
            else if (reporte == (int)ReportesEnum.EvaluaciondeSubcontratista)
            {
                string DescripcionCC = !string.IsNullOrEmpty(Request.QueryString["descripcioncc"]) ? Request.QueryString["descripcioncc"].ToString() : "Reporte";
                nombrePDF = string.Format("{0}", DescripcionCC);
            }

            rd.ExportToHttpResponse(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat, Response, true, nombrePDF);
        }

        protected void Button2_Click(object sender, EventArgs e)
        {
            int reporte = Convert.ToInt32(Request.QueryString["idReporte"]);
            SetInfoReporte(reporte);
            rd.ExportToHttpResponse
            (CrystalDecisions.Shared.ExportFormatType.ExcelRecord, Response, true, "Reporte");
        }

        protected void Button3_Click(object sender, EventArgs e)
        {
            int reporte = Convert.ToInt32(Request.QueryString["idReporte"]);
            SetInfoReporte(reporte);
            rd.ExportToHttpResponse
           (CrystalDecisions.Shared.ExportFormatType.WordForWindows, Response, true, "Reporte");
        }

        protected string setTitleCCCorto()
        {
            return vSesiones.sesionEmpresaActual == 1 ? "CC" : "AC";
        }

        protected string setTitleCC()
        {
            return vSesiones.sesionEmpresaActual == 1 ? "Centro Costos" : "Area Cuenta";
        }

        protected string setTitleEco()
        {
            return vSesiones.sesionEmpresaActual == 1 ? "No Economico" : "Centro Costos";
        }

        public string fillNo(string e, int no)
        {
            var newe = "";
            var el = e.Length;
            if (e.Length < no)
            {
                for (int i = el; i < no; i++)
                {
                    newe += "0";
                }
                return newe + e;
            }
            else
            {
                return e;
            }
        }

        public void printChequeReporte(int pNumCheque, int mes, int year)
        {
            Moneda moneda = new Moneda();

            rd = new rptCheque();

            dtCapChequeDTO dtCheque = new dtCapChequeDTO();
            List<dtPolizaDTO> lstDtPoliza = new List<dtPolizaDTO>();
            List<dtCapChequeDTO> lstCapChequeDTO = new List<dtCapChequeDTO>();

            PrintInfoChequeDTO result = new PrintInfoChequeDTO();

            result = capChequeFactoryServices.getChequeServices().GetInfoCheque(pNumCheque, mes, year);

            dtCheque.cantidad = result.cheques.monto.ToString();
            dtCheque.cantidadLetra = moneda.Convertir(dtCheque.cantidad, false, "PESOS");
            dtCheque.cheque = Convert.ToInt32(result.cheques.numero);
            dtCheque.cuenta = "";
            dtCheque.fecha = result.cheques.fecha_mov.ToShortDateString();
            dtCheque.pageseA = result.cheques.descripcion;
            lstCapChequeDTO.Add(dtCheque);

            foreach (var item in result.movPolizas)
            {
                dtPolizaDTO dtPoliza = new dtPolizaDTO();
                dtPoliza.cc = item.cc;
                dtPoliza.cta = item.cta;
                if (item.tm == 1)
                    dtPoliza.debe = item.monto;
                else
                    dtPoliza.haber = item.monto;

                dtPoliza.referecia = item.referencia;
                dtPoliza.scta = item.scta;
                dtPoliza.sscta = item.sscta;
                dtPoliza.descripcion = item.concepto;
                lstDtPoliza.Add(dtPoliza);
            }
            rd.Database.Tables[0].SetDataSource(lstCapChequeDTO);
            rd.Database.Tables[1].SetDataSource(lstDtPoliza);
            Session.Add("reporte", rd);

        }

        public void printCheque(int pNumCheque, int mes, int year)
        {
            Moneda moneda = new Moneda();

            rd = new rptCheque();

            dtCapChequeDTO dtCheque = new dtCapChequeDTO();
            List<dtPolizaDTO> lstDtPoliza = new List<dtPolizaDTO>();
            List<dtCapChequeDTO> lstCapChequeDTO = new List<dtCapChequeDTO>();

            PrintInfoChequeDTO result = new PrintInfoChequeDTO();

            result = capChequeFactoryServices.getChequeServices().GetInfoCheque(pNumCheque, mes, year);

            dtCheque.cantidad = result.cheques.monto.ToString();
            dtCheque.cantidadLetra = moneda.Convertir(dtCheque.cantidad, false, "PESOS");
            dtCheque.cheque = Convert.ToInt32(result.cheques.numero);
            dtCheque.cuenta = "";
            dtCheque.fecha = result.cheques.fecha_mov.ToShortDateString();
            dtCheque.pageseA = result.cheques.descripcion;
            lstCapChequeDTO.Add(dtCheque);

            foreach (var item in result.movPolizas)
            {
                dtPolizaDTO dtPoliza = new dtPolizaDTO();
                dtPoliza.cc = item.cc;
                dtPoliza.cta = item.cta;
                if (item.tm == 1)
                    dtPoliza.debe = item.monto;
                else
                    dtPoliza.haber = item.monto;

                dtPoliza.referecia = item.referencia;
                dtPoliza.scta = item.scta;
                dtPoliza.sscta = item.sscta;
                dtPoliza.descripcion = item.concepto;
                lstDtPoliza.Add(dtPoliza);
            }
            rd.Database.Tables[0].SetDataSource(lstCapChequeDTO);
            rd.Database.Tables[1].SetDataSource(lstDtPoliza);
            Session.Add("reporte", rd);

        }

        protected void crvReporteEstandar_PreRender(object sender, EventArgs e)
        {

        }

        public Tuple<decimal, string> formatoValorCeldaDashboardEvaluacion(List<tblSED_Actividad> actividadesActuales, int indice, Core.DTO.Administracion.Seguridad.Evaluacion.EmpleadoDTO empleado)
        {
            decimal cumplido = 0m;
            string cumplidoValor = "";

            if (actividadesActuales.ElementAtOrDefault(indice) != null)
            {
                var listaActividadAplica = empleado.actividades.Where(x => x.id == actividadesActuales[indice].id).ToList();

                if (listaActividadAplica.Count() > 0)
                {
                    cumplido = listaActividadAplica.Select(x => x.porcentajeCumplido).FirstOrDefault();
                    cumplidoValor = cumplido.ToString("0.00") + "%";
                }
                else
                {
                    cumplido = -1;
                    cumplidoValor = "N/A";
                }
            }
            else
            {
                cumplido = -1;
                cumplidoValor = "";
            }

            return new Tuple<decimal, string>(cumplido, cumplidoValor);
        }

        private Dictionary<string, object> GetInfoActosCH()
        {
            Dictionary<string, object> resultado = new Dictionary<string, object>();
            try
            {
                string razonSocial = string.Empty;
                string direccion = string.Empty;
                string correo = string.Empty;
                switch (vSesiones.sesionEmpresaActual)
                {
                    case (int)EmpresaEnum.Construplan:
                        razonSocial = "SOL- INDUSTRIALES SA DE CV";
                        direccion = " ";
                        correo = "E-mail: ";
                        break;
                 /*   case (int)EmpresaEnum.Arrendadora:
                        razonSocial = "Arrendadora";
                        direccion = "Periférico Pte. 770, Col. Emiliano Zapata, Hermosillo, Sonora, México, C.P. 83280, Tel. Multilínea (662) 108 05 00";
                        correo = "E-mail: comercialización@construplan.com.mx";
                        break;
                    case (int)EmpresaEnum.Colombia:
                        razonSocial = "Colombia";
                        direccion = "Periférico Pte. 770, Col. Emiliano Zapata, Hermosillo, Sonora, México, C.P. 83280, Tel. Multilínea (662) 108 05 00";
                        correo = "E-mail: comercialización@construplan.com.mx";
                        break;
                    case (int)EmpresaEnum.Peru:
                        razonSocial = "Perú";
                        direccion = "Periférico Pte. 770, Col. Emiliano Zapata, Hermosillo, Sonora, México, C.P. 83280, Tel. Multilínea (662) 108 05 00";
                        correo = "E-mail: comercialización@construplan.com.mx";
                        break;
                    case (int)EmpresaEnum.GCPLAN:
                        razonSocial = "Grupo Construcciones Planificadas, S.A. De C.V.";
                        direccion = "Periférico Pte. 770, Col. Emiliano Zapata, Hermosillo, Sonora, México, C.P. 83280, Tel. Multilínea (662) 108 05 00";
                        correo = "E-mail: comercialización@construplan.com.mx";
                        break;*/
                    default:
                        break;
                }

                resultado = new Dictionary<string, object>();
                resultado.Add("razonSocial", razonSocial);
                resultado.Add("direccion", direccion);
                resultado.Add("correo", correo);
            }
            catch (Exception e)
            {
            }
            return resultado;
        }
    }
}





