/*! jQuery UI - v1.12.1 - 2020-10-13
* http://jqueryui.com
* Includes: widget.js, position.js, data.js, disable-selection.js, focusable.js, keycode.js, scroll-parent.js, unique-id.js, widgets/draggable.js, widgets/resizable.js, widgets/selectable.js, widgets/mouse.js
* Copyright jQuery Foundation and other contributors; Licensed MIT */

(function (d) { "function" === typeof define && define.amd ? define(["jquery"], d) : d(jQuery) })(function (d) {
    d.ui = d.ui || {}; d.ui.version = "1.12.1"; var S = 0, P = Array.prototype.slice; d.cleanData = function (a) { return function (b) { var c, e, f; for (f = 0; null != (e = b[f]); f++)try { (c = d._data(e, "events")) && c.remove && d(e).triggerHandler("remove") } catch (g) { } a(b) } }(d.cleanData); d.widget = function (a, b, c) {
        var e = {}, f = a.split(".")[0]; a = a.split(".")[1]; var g = f + "-" + a; c || (c = b, b = d.Widget); d.isArray(c) && (c = d.extend.apply(null, [{}].concat(c)));
        d.expr[":"][g.toLowerCase()] = function (r) { return !!d.data(r, g) }; d[f] = d[f] || {}; var k = d[f][a]; var n = d[f][a] = function (r, t) { if (!this._createWidget) return new n(r, t); arguments.length && this._createWidget(r, t) }; d.extend(n, k, { version: c.version, _proto: d.extend({}, c), _childConstructors: [] }); var l = new b; l.options = d.widget.extend({}, l.options); d.each(c, function (r, t) {
            d.isFunction(t) ? e[r] = function () {
                function h() { return b.prototype[r].apply(this, arguments) } function m(p) { return b.prototype[r].apply(this, p) } return function () {
                    var p =
                        this._super, q = this._superApply; this._super = h; this._superApply = m; var v = t.apply(this, arguments); this._super = p; this._superApply = q; return v
                }
            }() : e[r] = t
        }); n.prototype = d.widget.extend(l, { widgetEventPrefix: k ? l.widgetEventPrefix || a : a }, e, { constructor: n, namespace: f, widgetName: a, widgetFullName: g }); k ? (d.each(k._childConstructors, function (r, t) { var h = t.prototype; d.widget(h.namespace + "." + h.widgetName, n, t._proto) }), delete k._childConstructors) : b._childConstructors.push(n); d.widget.bridge(a, n); return n
    }; d.widget.extend =
        function (a) { for (var b = P.call(arguments, 1), c = 0, e = b.length, f, g; c < e; c++)for (f in b[c]) g = b[c][f], b[c].hasOwnProperty(f) && void 0 !== g && (d.isPlainObject(g) ? a[f] = d.isPlainObject(a[f]) ? d.widget.extend({}, a[f], g) : d.widget.extend({}, g) : a[f] = g); return a }; d.widget.bridge = function (a, b) {
            var c = b.prototype.widgetFullName || a; d.fn[a] = function (e) {
                var f = "string" === typeof e, g = P.call(arguments, 1), k = this; f ? this.length || "instance" !== e ? this.each(function () {
                    var n = d.data(this, c); if ("instance" === e) return k = n, !1; if (!n) return d.error("cannot call methods on " +
                        a + " prior to initialization; attempted to call method '" + e + "'"); if (!d.isFunction(n[e]) || "_" === e.charAt(0)) return d.error("no such method '" + e + "' for " + a + " widget instance"); var l = n[e].apply(n, g); if (l !== n && void 0 !== l) return k = l && l.jquery ? k.pushStack(l.get()) : l, !1
                }) : k = void 0 : (g.length && (e = d.widget.extend.apply(null, [e].concat(g))), this.each(function () { var n = d.data(this, c); n ? (n.option(e || {}), n._init && n._init()) : d.data(this, c, new b(e, this)) })); return k
            }
        }; d.Widget = function () { }; d.Widget._childConstructors =
            []; d.Widget.prototype = {
                widgetName: "widget", widgetEventPrefix: "", defaultElement: "<div>", options: { classes: {}, disabled: !1, create: null }, _createWidget: function (a, b) {
                    b = d(b || this.defaultElement || this)[0]; this.element = d(b); this.uuid = S++; this.eventNamespace = "." + this.widgetName + this.uuid; this.bindings = d(); this.hoverable = d(); this.focusable = d(); this.classesElementLookup = {}; b !== this && (d.data(b, this.widgetFullName, this), this._on(!0, this.element, { remove: function (c) { c.target === b && this.destroy() } }), this.document =
                        d(b.style ? b.ownerDocument : b.document || b), this.window = d(this.document[0].defaultView || this.document[0].parentWindow)); this.options = d.widget.extend({}, this.options, this._getCreateOptions(), a); this._create(); this.options.disabled && this._setOptionDisabled(this.options.disabled); this._trigger("create", null, this._getCreateEventData()); this._init()
                }, _getCreateOptions: function () { return {} }, _getCreateEventData: d.noop, _create: d.noop, _init: d.noop, destroy: function () {
                    var a = this; this._destroy(); d.each(this.classesElementLookup,
                        function (b, c) { a._removeClass(c, b) }); this.element.off(this.eventNamespace).removeData(this.widgetFullName); this.widget().off(this.eventNamespace).removeAttr("aria-disabled"); this.bindings.off(this.eventNamespace)
                }, _destroy: d.noop, widget: function () { return this.element }, option: function (a, b) {
                    var c = a, e; if (0 === arguments.length) return d.widget.extend({}, this.options); if ("string" === typeof a) {
                        c = {}; var f = a.split("."); a = f.shift(); if (f.length) {
                            var g = c[a] = d.widget.extend({}, this.options[a]); for (e = 0; e < f.length -
                                1; e++)g[f[e]] = g[f[e]] || {}, g = g[f[e]]; a = f.pop(); if (1 === arguments.length) return void 0 === g[a] ? null : g[a]; g[a] = b
                        } else { if (1 === arguments.length) return void 0 === this.options[a] ? null : this.options[a]; c[a] = b }
                    } this._setOptions(c); return this
                }, _setOptions: function (a) { for (var b in a) this._setOption(b, a[b]); return this }, _setOption: function (a, b) { "classes" === a && this._setOptionClasses(b); this.options[a] = b; "disabled" === a && this._setOptionDisabled(b); return this }, _setOptionClasses: function (a) {
                    var b; for (b in a) {
                        var c =
                            this.classesElementLookup[b]; if (a[b] !== this.options.classes[b] && c && c.length) { var e = d(c.get()); this._removeClass(c, b); e.addClass(this._classes({ element: e, keys: b, classes: a, add: !0 })) }
                    }
                }, _setOptionDisabled: function (a) { this._toggleClass(this.widget(), this.widgetFullName + "-disabled", null, !!a); a && (this._removeClass(this.hoverable, null, "ui-state-hover"), this._removeClass(this.focusable, null, "ui-state-focus")) }, enable: function () { return this._setOptions({ disabled: !1 }) }, disable: function () { return this._setOptions({ disabled: !0 }) },
                _classes: function (a) { function b(f, g) { var k; for (k = 0; k < f.length; k++) { var n = e.classesElementLookup[f[k]] || d(); n = a.add ? d(d.unique(n.get().concat(a.element.get()))) : d(n.not(a.element).get()); e.classesElementLookup[f[k]] = n; c.push(f[k]); g && a.classes[f[k]] && c.push(a.classes[f[k]]) } } var c = [], e = this; a = d.extend({ element: this.element, classes: this.options.classes || {} }, a); this._on(a.element, { remove: "_untrackClassesElement" }); a.keys && b(a.keys.match(/\S+/g) || [], !0); a.extra && b(a.extra.match(/\S+/g) || []); return c.join(" ") },
                _untrackClassesElement: function (a) { var b = this; d.each(b.classesElementLookup, function (c, e) { -1 !== d.inArray(a.target, e) && (b.classesElementLookup[c] = d(e.not(a.target).get())) }) }, _removeClass: function (a, b, c) { return this._toggleClass(a, b, c, !1) }, _addClass: function (a, b, c) { return this._toggleClass(a, b, c, !0) }, _toggleClass: function (a, b, c, e) { e = "boolean" === typeof e ? e : c; var f = "string" === typeof a || null === a; a = { extra: f ? b : c, keys: f ? a : b, element: f ? this.element : a, add: e }; a.element.toggleClass(this._classes(a), e); return this },
                _on: function (a, b, c) { var e, f = this; "boolean" !== typeof a && (c = b, b = a, a = !1); c ? (b = e = d(b), this.bindings = this.bindings.add(b)) : (c = b, b = this.element, e = this.widget()); d.each(c, function (g, k) { function n() { if (a || !0 !== f.options.disabled && !d(this).hasClass("ui-state-disabled")) return ("string" === typeof k ? f[k] : k).apply(f, arguments) } "string" !== typeof k && (n.guid = k.guid = k.guid || n.guid || d.guid++); var l = g.match(/^([\w:-]*)\s*(.*)$/), r = l[1] + f.eventNamespace; if (l = l[2]) e.on(r, l, n); else b.on(r, n) }) }, _off: function (a, b) {
                    b = (b ||
                        "").split(" ").join(this.eventNamespace + " ") + this.eventNamespace; a.off(b).off(b); this.bindings = d(this.bindings.not(a).get()); this.focusable = d(this.focusable.not(a).get()); this.hoverable = d(this.hoverable.not(a).get())
                }, _delay: function (a, b) { var c = this; return setTimeout(function () { return ("string" === typeof a ? c[a] : a).apply(c, arguments) }, b || 0) }, _hoverable: function (a) {
                    this.hoverable = this.hoverable.add(a); this._on(a, {
                        mouseenter: function (b) { this._addClass(d(b.currentTarget), null, "ui-state-hover") }, mouseleave: function (b) {
                            this._removeClass(d(b.currentTarget),
                                null, "ui-state-hover")
                        }
                    })
                }, _focusable: function (a) { this.focusable = this.focusable.add(a); this._on(a, { focusin: function (b) { this._addClass(d(b.currentTarget), null, "ui-state-focus") }, focusout: function (b) { this._removeClass(d(b.currentTarget), null, "ui-state-focus") } }) }, _trigger: function (a, b, c) {
                    var e, f = this.options[a]; c = c || {}; b = d.Event(b); b.type = (a === this.widgetEventPrefix ? a : this.widgetEventPrefix + a).toLowerCase(); b.target = this.element[0]; if (a = b.originalEvent) for (e in a) e in b || (b[e] = a[e]); this.element.trigger(b,
                        c); return !(d.isFunction(f) && !1 === f.apply(this.element[0], [b].concat(c)) || b.isDefaultPrevented())
                }
            }; d.each({ show: "fadeIn", hide: "fadeOut" }, function (a, b) {
                d.Widget.prototype["_" + a] = function (c, e, f) {
                    "string" === typeof e && (e = { effect: e }); var g = e ? !0 === e || "number" === typeof e ? b : e.effect || b : a; e = e || {}; "number" === typeof e && (e = { duration: e }); var k = !d.isEmptyObject(e); e.complete = f; e.delay && c.delay(e.delay); if (k && d.effects && d.effects.effect[g]) c[a](e); else if (g !== a && c[g]) c[g](e.duration, e.easing, f); else c.queue(function (n) {
                        d(this)[a]();
                        f && f.call(c[0]); n()
                    })
                }
            }); (function () {
                function a(h, m, p) { return [parseFloat(h[0]) * (r.test(h[0]) ? m / 100 : 1), parseFloat(h[1]) * (r.test(h[1]) ? p / 100 : 1)] } function b(h) { var m = h[0]; return 9 === m.nodeType ? { width: h.width(), height: h.height(), offset: { top: 0, left: 0 } } : d.isWindow(m) ? { width: h.width(), height: h.height(), offset: { top: h.scrollTop(), left: h.scrollLeft() } } : m.preventDefault ? { width: 0, height: 0, offset: { top: m.pageY, left: m.pageX } } : { width: h.outerWidth(), height: h.outerHeight(), offset: h.offset() } } var c, e = Math.max, f = Math.abs,
                    g = /left|center|right/, k = /top|center|bottom/, n = /[\+\-]\d+(\.[\d]+)?%?/, l = /^\w+/, r = /%$/, t = d.fn.position; d.position = {
                        scrollbarWidth: function () { if (void 0 !== c) return c; var h = d("<div style='display:block;position:absolute;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>"); var m = h.children()[0]; d("body").append(h); var p = m.offsetWidth; h.css("overflow", "scroll"); m = m.offsetWidth; p === m && (m = h[0].clientWidth); h.remove(); return c = p - m }, getScrollInfo: function (h) {
                            var m = h.isWindow ||
                                h.isDocument ? "" : h.element.css("overflow-x"), p = h.isWindow || h.isDocument ? "" : h.element.css("overflow-y"); m = "scroll" === m || "auto" === m && h.width < h.element[0].scrollWidth; return { width: "scroll" === p || "auto" === p && h.height < h.element[0].scrollHeight ? d.position.scrollbarWidth() : 0, height: m ? d.position.scrollbarWidth() : 0 }
                        }, getWithinInfo: function (h) {
                            var m = d(h || window), p = d.isWindow(m[0]), q = !!m[0] && 9 === m[0].nodeType; return {
                                element: m, isWindow: p, isDocument: q, offset: p || q ? { left: 0, top: 0 } : d(h).offset(), scrollLeft: m.scrollLeft(),
                                scrollTop: m.scrollTop(), width: m.outerWidth(), height: m.outerHeight()
                            }
                        }
                    }; d.fn.position = function (h) {
                        if (!h || !h.of) return t.apply(this, arguments); h = d.extend({}, h); var m = d(h.of), p = d.position.getWithinInfo(h.within), q = d.position.getScrollInfo(p), v = (h.collision || "flip").split(" "), w = {}; var u = b(m); m[0].preventDefault && (h.at = "left top"); var A = u.width; var y = u.height; var B = u.offset; var C = d.extend({}, B); d.each(["my", "at"], function () {
                            var x = (h[this] || "").split(" "); 1 === x.length && (x = g.test(x[0]) ? x.concat(["center"]) :
                                k.test(x[0]) ? ["center"].concat(x) : ["center", "center"]); x[0] = g.test(x[0]) ? x[0] : "center"; x[1] = k.test(x[1]) ? x[1] : "center"; var D = n.exec(x[0]); var E = n.exec(x[1]); w[this] = [D ? D[0] : 0, E ? E[0] : 0]; h[this] = [l.exec(x[0])[0], l.exec(x[1])[0]]
                        }); 1 === v.length && (v[1] = v[0]); "right" === h.at[0] ? C.left += A : "center" === h.at[0] && (C.left += A / 2); "bottom" === h.at[1] ? C.top += y : "center" === h.at[1] && (C.top += y / 2); var I = a(w.at, A, y); C.left += I[0]; C.top += I[1]; return this.each(function () {
                            var x, D = d(this), E = D.outerWidth(), F = D.outerHeight(), Q =
                                parseInt(d.css(this, "marginLeft"), 10) || 0, R = parseInt(d.css(this, "marginTop"), 10) || 0, T = E + Q + (parseInt(d.css(this, "marginRight"), 10) || 0) + q.width, U = F + R + (parseInt(d.css(this, "marginBottom"), 10) || 0) + q.height, z = d.extend({}, C), J = a(w.my, D.outerWidth(), D.outerHeight()); "right" === h.my[0] ? z.left -= E : "center" === h.my[0] && (z.left -= E / 2); "bottom" === h.my[1] ? z.top -= F : "center" === h.my[1] && (z.top -= F / 2); z.left += J[0]; z.top += J[1]; var V = { marginLeft: Q, marginTop: R }; d.each(["left", "top"], function (K, G) {
                                    if (d.ui.position[v[K]]) d.ui.position[v[K]][G](z,
                                        { targetWidth: A, targetHeight: y, elemWidth: E, elemHeight: F, collisionPosition: V, collisionWidth: T, collisionHeight: U, offset: [I[0] + J[0], I[1] + J[1]], my: h.my, at: h.at, within: p, elem: D })
                                }); h.using && (x = function (K) {
                                    var G = B.left - z.left, N = G + A - E, L = B.top - z.top, O = L + y - F, H = { target: { element: m, left: B.left, top: B.top, width: A, height: y }, element: { element: D, left: z.left, top: z.top, width: E, height: F }, horizontal: 0 > N ? "left" : 0 < G ? "right" : "center", vertical: 0 > O ? "top" : 0 < L ? "bottom" : "middle" }; A < E && f(G + N) < A && (H.horizontal = "center"); y < F && f(L +
                                        O) < y && (H.vertical = "middle"); e(f(G), f(N)) > e(f(L), f(O)) ? H.important = "horizontal" : H.important = "vertical"; h.using.call(this, K, H)
                                }); D.offset(d.extend(z, { using: x }))
                        })
                    }; d.ui.position = {
                        fit: {
                            left: function (h, m) {
                                var p = m.within, q = p.isWindow ? p.scrollLeft : p.offset.left, v = p.width, w = h.left - m.collisionPosition.marginLeft; p = q - w; var u = w + m.collisionWidth - v - q; m.collisionWidth > v ? 0 < p && 0 >= u ? (q = h.left + p + m.collisionWidth - v - q, h.left += p - q) : h.left = 0 < u && 0 >= p ? q : p > u ? q + v - m.collisionWidth : q : h.left = 0 < p ? h.left + p : 0 < u ? h.left - u : e(h.left -
                                    w, h.left)
                            }, top: function (h, m) { var p = m.within, q = p.isWindow ? p.scrollTop : p.offset.top, v = m.within.height, w = h.top - m.collisionPosition.marginTop; p = q - w; var u = w + m.collisionHeight - v - q; m.collisionHeight > v ? 0 < p && 0 >= u ? (q = h.top + p + m.collisionHeight - v - q, h.top += p - q) : h.top = 0 < u && 0 >= p ? q : p > u ? q + v - m.collisionHeight : q : h.top = 0 < p ? h.top + p : 0 < u ? h.top - u : e(h.top - w, h.top) }
                        }, flip: {
                            left: function (h, m) {
                                var p = m.within, q = p.offset.left + p.scrollLeft, v = p.width, w = p.isWindow ? p.scrollLeft : p.offset.left, u = h.left - m.collisionPosition.marginLeft;
                                p = u - w; var A = u + m.collisionWidth - v - w; u = "left" === m.my[0] ? -m.elemWidth : "right" === m.my[0] ? m.elemWidth : 0; var y = "left" === m.at[0] ? m.targetWidth : "right" === m.at[0] ? -m.targetWidth : 0, B = -2 * m.offset[0]; if (0 > p) { if (q = h.left + u + y + B + m.collisionWidth - v - q, 0 > q || q < f(p)) h.left += u + y + B } else 0 < A && (q = h.left - m.collisionPosition.marginLeft + u + y + B - w, 0 < q || f(q) < A) && (h.left += u + y + B)
                            }, top: function (h, m) {
                                var p = m.within, q = p.offset.top + p.scrollTop, v = p.height, w = p.isWindow ? p.scrollTop : p.offset.top, u = h.top - m.collisionPosition.marginTop; p = u -
                                    w; var A = u + m.collisionHeight - v - w; u = "top" === m.my[1] ? -m.elemHeight : "bottom" === m.my[1] ? m.elemHeight : 0; var y = "top" === m.at[1] ? m.targetHeight : "bottom" === m.at[1] ? -m.targetHeight : 0, B = -2 * m.offset[1]; if (0 > p) { if (q = h.top + u + y + B + m.collisionHeight - v - q, 0 > q || q < f(p)) h.top += u + y + B } else 0 < A && (q = h.top - m.collisionPosition.marginTop + u + y + B - w, 0 < q || f(q) < A) && (h.top += u + y + B)
                            }
                        }, flipfit: {
                            left: function () { d.ui.position.flip.left.apply(this, arguments); d.ui.position.fit.left.apply(this, arguments) }, top: function () {
                                d.ui.position.flip.top.apply(this,
                                    arguments); d.ui.position.fit.top.apply(this, arguments)
                            }
                        }
                    }
            })(); d.extend(d.expr[":"], { data: d.expr.createPseudo ? d.expr.createPseudo(function (a) { return function (b) { return !!d.data(b, a) } }) : function (a, b, c) { return !!d.data(a, c[3]) } }); d.fn.extend({ disableSelection: function () { var a = "onselectstart" in document.createElement("div") ? "selectstart" : "mousedown"; return function () { return this.on(a + ".ui-disableSelection", function (b) { b.preventDefault() }) } }(), enableSelection: function () { return this.off(".ui-disableSelection") } });
    d.ui.focusable = function (a, b) { var c = a.nodeName.toLowerCase(); if ("area" === c) { c = a.parentNode; var e = c.name; if (!a.href || !e || "map" !== c.nodeName.toLowerCase()) return !1; c = d("img[usemap='#" + e + "']"); return 0 < c.length && c.is(":visible") } /^(input|select|textarea|button|object)$/.test(c) ? (c = !a.disabled) && (e = d(a).closest("fieldset")[0]) && (c = !e.disabled) : c = "a" === c ? a.href || b : b; if (c = c && d(a).is(":visible")) { c = d(a); for (e = c.css("visibility"); "inherit" === e;)c = c.parent(), e = c.css("visibility"); c = "hidden" !== e } return c }; d.extend(d.expr[":"],
        { focusable: function (a) { return d.ui.focusable(a, null != d.attr(a, "tabindex")) } }); d.fn.form = function () { return "string" === typeof this[0].form ? this.closest("form") : d(this[0].form) }; d.ui.formResetMixin = {
            _formResetHandler: function () { var a = d(this); setTimeout(function () { var b = a.data("ui-form-reset-instances"); d.each(b, function () { this.refresh() }) }) }, _bindFormResetHandler: function () {
                this.form = this.element.form(); if (this.form.length) {
                    var a = this.form.data("ui-form-reset-instances") || []; if (!a.length) this.form.on("reset.ui-form-reset",
                        this._formResetHandler); a.push(this); this.form.data("ui-form-reset-instances", a)
                }
            }, _unbindFormResetHandler: function () { if (this.form.length) { var a = this.form.data("ui-form-reset-instances"); a.splice(d.inArray(this, a), 1); a.length ? this.form.data("ui-form-reset-instances", a) : this.form.removeData("ui-form-reset-instances").off("reset.ui-form-reset") } }
        }; d.ui.keyCode = {
            BACKSPACE: 8, COMMA: 188, DELETE: 46, DOWN: 40, END: 35, ENTER: 13, ESCAPE: 27, HOME: 36, LEFT: 37, PAGE_DOWN: 34, PAGE_UP: 33, PERIOD: 190, RIGHT: 39, SPACE: 32, TAB: 9,
            UP: 38
        }; d.ui.escapeSelector = function () { var a = /([!"#$%&'()*+,./:;<=>?@[\]^`{|}~])/g; return function (b) { return b.replace(a, "\\$1") } }(); d.fn.labels = function () { var a; if (this[0].labels && this[0].labels.length) return this.pushStack(this[0].labels); var b = this.eq(0).parents("label"); if (a = this.attr("id")) { var c = this.eq(0).parents().last(); c = c.add(c.length ? c.siblings() : this.siblings()); a = "label[for='" + d.ui.escapeSelector(a) + "']"; b = b.add(c.find(a).addBack(a)) } return this.pushStack(b) }; d.fn.scrollParent = function (a) {
            var b =
                this.css("position"), c = "absolute" === b, e = a ? /(auto|scroll|hidden)/ : /(auto|scroll)/; a = this.parents().filter(function () { var f = d(this); return c && "static" === f.css("position") ? !1 : e.test(f.css("overflow") + f.css("overflow-y") + f.css("overflow-x")) }).eq(0); return "fixed" !== b && a.length ? a : d(this[0].ownerDocument || document)
        }; d.extend(d.expr[":"], { tabbable: function (a) { var b = d.attr(a, "tabindex"), c = null != b; return (!c || 0 <= b) && d.ui.focusable(a, c) } }); d.fn.extend({
            uniqueId: function () {
                var a = 0; return function () {
                    return this.each(function () {
                        this.id ||
                        (this.id = "ui-id-" + ++a)
                    })
                }
            }(), removeUniqueId: function () { return this.each(function () { /^ui-id-\d+$/.test(this.id) && d(this).removeAttr("id") }) }
        }); d.ui.ie = !!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase()); var M = !1; d(document).on("mouseup", function () { M = !1 }); d.widget("ui.mouse", {
            version: "1.12.1", options: { cancel: "input, textarea, button, select, option", distance: 1, delay: 0 }, _mouseInit: function () {
                var a = this; this.element.on("mousedown." + this.widgetName, function (b) { return a._mouseDown(b) }).on("click." +
                    this.widgetName, function (b) { if (!0 === d.data(b.target, a.widgetName + ".preventClickEvent")) return d.removeData(b.target, a.widgetName + ".preventClickEvent"), b.stopImmediatePropagation(), !1 }); this.started = !1
            }, _mouseDestroy: function () { this.element.off("." + this.widgetName); this._mouseMoveDelegate && this.document.off("mousemove." + this.widgetName, this._mouseMoveDelegate).off("mouseup." + this.widgetName, this._mouseUpDelegate) }, _mouseDown: function (a) {
                if (!M) {
                    this._mouseMoved = !1; this._mouseStarted && this._mouseUp(a);
                    this._mouseDownEvent = a; var b = this, c = 1 === a.which, e = "string" === typeof this.options.cancel && a.target.nodeName ? d(a.target).closest(this.options.cancel).length : !1; if (!c || e || !this._mouseCapture(a)) return !0; this.mouseDelayMet = !this.options.delay; this.mouseDelayMet || (this._mouseDelayTimer = setTimeout(function () { b.mouseDelayMet = !0 }, this.options.delay)); if (this._mouseDistanceMet(a) && this._mouseDelayMet(a) && (this._mouseStarted = !1 !== this._mouseStart(a), !this._mouseStarted)) return a.preventDefault(), !0; !0 === d.data(a.target,
                        this.widgetName + ".preventClickEvent") && d.removeData(a.target, this.widgetName + ".preventClickEvent"); this._mouseMoveDelegate = function (f) { return b._mouseMove(f) }; this._mouseUpDelegate = function (f) { return b._mouseUp(f) }; this.document.on("mousemove." + this.widgetName, this._mouseMoveDelegate).on("mouseup." + this.widgetName, this._mouseUpDelegate); a.preventDefault(); return M = !0
                }
            }, _mouseMove: function (a) {
                if (this._mouseMoved) {
                    if (d.ui.ie && (!document.documentMode || 9 > document.documentMode) && !a.button) return this._mouseUp(a);
                    if (!a.which) if (a.originalEvent.altKey || a.originalEvent.ctrlKey || a.originalEvent.metaKey || a.originalEvent.shiftKey) this.ignoreMissingWhich = !0; else if (!this.ignoreMissingWhich) return this._mouseUp(a)
                } if (a.which || a.button) this._mouseMoved = !0; if (this._mouseStarted) return this._mouseDrag(a), a.preventDefault(); this._mouseDistanceMet(a) && this._mouseDelayMet(a) && ((this._mouseStarted = !1 !== this._mouseStart(this._mouseDownEvent, a)) ? this._mouseDrag(a) : this._mouseUp(a)); return !this._mouseStarted
            }, _mouseUp: function (a) {
                this.document.off("mousemove." +
                    this.widgetName, this._mouseMoveDelegate).off("mouseup." + this.widgetName, this._mouseUpDelegate); this._mouseStarted && (this._mouseStarted = !1, a.target === this._mouseDownEvent.target && d.data(a.target, this.widgetName + ".preventClickEvent", !0), this._mouseStop(a)); this._mouseDelayTimer && (clearTimeout(this._mouseDelayTimer), delete this._mouseDelayTimer); M = this.ignoreMissingWhich = !1; a.preventDefault()
            }, _mouseDistanceMet: function (a) {
                return Math.max(Math.abs(this._mouseDownEvent.pageX - a.pageX), Math.abs(this._mouseDownEvent.pageY -
                    a.pageY)) >= this.options.distance
            }, _mouseDelayMet: function () { return this.mouseDelayMet }, _mouseStart: function () { }, _mouseDrag: function () { }, _mouseStop: function () { }, _mouseCapture: function () { return !0 }
        }); d.ui.plugin = {
            add: function (a, b, c) { var e; a = d.ui[a].prototype; for (e in c) a.plugins[e] = a.plugins[e] || [], a.plugins[e].push([b, c[e]]) }, call: function (a, b, c, e) {
                if ((b = a.plugins[b]) && (e || a.element[0].parentNode && 11 !== a.element[0].parentNode.nodeType)) for (e = 0; e < b.length; e++)a.options[b[e][0]] && b[e][1].apply(a.element,
                    c)
            }
        }; d.ui.safeActiveElement = function (a) { try { var b = a.activeElement } catch (c) { b = a.body } b || (b = a.body); b.nodeName || (b = a.body); return b }; d.ui.safeBlur = function (a) { a && "body" !== a.nodeName.toLowerCase() && d(a).trigger("blur") }; d.widget("ui.draggable", d.ui.mouse, {
            version: "1.12.1", widgetEventPrefix: "drag", options: {
                addClasses: !0, appendTo: "parent", axis: !1, connectToSortable: !1, containment: !1, cursor: "auto", cursorAt: !1, grid: !1, handle: !1, helper: "original", iframeFix: !1, opacity: !1, refreshPositions: !1, revert: !1, revertDuration: 500,
                scope: "default", scroll: !0, scrollSensitivity: 20, scrollSpeed: 20, snap: !1, snapMode: "both", snapTolerance: 20, stack: !1, zIndex: !1, drag: null, start: null, stop: null
            }, _create: function () { "original" === this.options.helper && this._setPositionRelative(); this.options.addClasses && this._addClass("ui-draggable"); this._setHandleClassName(); this._mouseInit() }, _setOption: function (a, b) { this._super(a, b); "handle" === a && (this._removeHandleClassName(), this._setHandleClassName()) }, _destroy: function () {
                (this.helper || this.element).is(".ui-draggable-dragging") ?
                this.destroyOnClear = !0 : (this._removeHandleClassName(), this._mouseDestroy())
            }, _mouseCapture: function (a) { var b = this.options; if (this.helper || b.disabled || 0 < d(a.target).closest(".ui-resizable-handle").length) return !1; this.handle = this._getHandle(a); if (!this.handle) return !1; this._blurActiveElement(a); this._blockFrames(!0 === b.iframeFix ? "iframe" : b.iframeFix); return !0 }, _blockFrames: function (a) { this.iframeBlocks = this.document.find(a).map(function () { var b = d(this); return d("<div>").css("position", "absolute").appendTo(b.parent()).outerWidth(b.outerWidth()).outerHeight(b.outerHeight()).offset(b.offset())[0] }) },
            _unblockFrames: function () { this.iframeBlocks && (this.iframeBlocks.remove(), delete this.iframeBlocks) }, _blurActiveElement: function (a) { var b = d.ui.safeActiveElement(this.document[0]); d(a.target).closest(b).length || d.ui.safeBlur(b) }, _mouseStart: function (a) {
                var b = this.options; this.helper = this._createHelper(a); this._addClass(this.helper, "ui-draggable-dragging"); this._cacheHelperProportions(); d.ui.ddmanager && (d.ui.ddmanager.current = this); this._cacheMargins(); this.cssPosition = this.helper.css("position"); this.scrollParent =
                    this.helper.scrollParent(!0); this.offsetParent = this.helper.offsetParent(); this.hasFixedAncestor = 0 < this.helper.parents().filter(function () { return "fixed" === d(this).css("position") }).length; this.positionAbs = this.element.offset(); this._refreshOffsets(a); this.originalPosition = this.position = this._generatePosition(a, !1); this.originalPageX = a.pageX; this.originalPageY = a.pageY; b.cursorAt && this._adjustOffsetFromHelper(b.cursorAt); this._setContainment(); if (!1 === this._trigger("start", a)) return this._clear(), !1;
                this._cacheHelperProportions(); d.ui.ddmanager && !b.dropBehaviour && d.ui.ddmanager.prepareOffsets(this, a); this._mouseDrag(a, !0); d.ui.ddmanager && d.ui.ddmanager.dragStart(this, a); return !0
            }, _refreshOffsets: function (a) { this.offset = { top: this.positionAbs.top - this.margins.top, left: this.positionAbs.left - this.margins.left, scroll: !1, parent: this._getParentOffset(), relative: this._getRelativeOffset() }; this.offset.click = { left: a.pageX - this.offset.left, top: a.pageY - this.offset.top } }, _mouseDrag: function (a, b) {
                this.hasFixedAncestor &&
                (this.offset.parent = this._getParentOffset()); this.position = this._generatePosition(a, !0); this.positionAbs = this._convertPositionTo("absolute"); if (!b) { var c = this._uiHash(); if (!1 === this._trigger("drag", a, c)) return this._mouseUp(new d.Event("mouseup", a)), !1; this.position = c.position } this.helper[0].style.left = this.position.left + "px"; this.helper[0].style.top = this.position.top + "px"; d.ui.ddmanager && d.ui.ddmanager.drag(this, a); return !1
            }, _mouseStop: function (a) {
                var b = this, c = !1; d.ui.ddmanager && !this.options.dropBehaviour &&
                    (c = d.ui.ddmanager.drop(this, a)); this.dropped && (c = this.dropped, this.dropped = !1); "invalid" === this.options.revert && !c || "valid" === this.options.revert && c || !0 === this.options.revert || d.isFunction(this.options.revert) && this.options.revert.call(this.element, c) ? d(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function () { !1 !== b._trigger("stop", a) && b._clear() }) : !1 !== this._trigger("stop", a) && this._clear(); return !1
            }, _mouseUp: function (a) {
                this._unblockFrames(); d.ui.ddmanager &&
                    d.ui.ddmanager.dragStop(this, a); this.handleElement.is(a.target) && this.element.trigger("focus"); return d.ui.mouse.prototype._mouseUp.call(this, a)
            }, cancel: function () { this.helper.is(".ui-draggable-dragging") ? this._mouseUp(new d.Event("mouseup", { target: this.element[0] })) : this._clear(); return this }, _getHandle: function (a) { return this.options.handle ? !!d(a.target).closest(this.element.find(this.options.handle)).length : !0 }, _setHandleClassName: function () {
                this.handleElement = this.options.handle ? this.element.find(this.options.handle) :
                    this.element; this._addClass(this.handleElement, "ui-draggable-handle")
            }, _removeHandleClassName: function () { this._removeClass(this.handleElement, "ui-draggable-handle") }, _createHelper: function (a) {
                var b = this.options, c = d.isFunction(b.helper); a = c ? d(b.helper.apply(this.element[0], [a])) : "clone" === b.helper ? this.element.clone().removeAttr("id") : this.element; a.parents("body").length || a.appendTo("parent" === b.appendTo ? this.element[0].parentNode : b.appendTo); c && a[0] === this.element[0] && this._setPositionRelative();
                a[0] === this.element[0] || /(fixed|absolute)/.test(a.css("position")) || a.css("position", "absolute"); return a
            }, _setPositionRelative: function () { /^(?:r|a|f)/.test(this.element.css("position")) || (this.element[0].style.position = "relative") }, _adjustOffsetFromHelper: function (a) {
                "string" === typeof a && (a = a.split(" ")); d.isArray(a) && (a = { left: +a[0], top: +a[1] || 0 }); "left" in a && (this.offset.click.left = a.left + this.margins.left); "right" in a && (this.offset.click.left = this.helperProportions.width - a.right + this.margins.left);
                "top" in a && (this.offset.click.top = a.top + this.margins.top); "bottom" in a && (this.offset.click.top = this.helperProportions.height - a.bottom + this.margins.top)
            }, _isRootNode: function (a) { return /(html|body)/i.test(a.tagName) || a === this.document[0] }, _getParentOffset: function () {
                var a = this.offsetParent.offset(), b = this.document[0]; "absolute" === this.cssPosition && this.scrollParent[0] !== b && d.contains(this.scrollParent[0], this.offsetParent[0]) && (a.left += this.scrollParent.scrollLeft(), a.top += this.scrollParent.scrollTop());
                this._isRootNode(this.offsetParent[0]) && (a = { top: 0, left: 0 }); return { top: a.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0), left: a.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0) }
            }, _getRelativeOffset: function () {
                if ("relative" !== this.cssPosition) return { top: 0, left: 0 }; var a = this.element.position(), b = this._isRootNode(this.scrollParent[0]); return {
                    top: a.top - (parseInt(this.helper.css("top"), 10) || 0) + (b ? 0 : this.scrollParent.scrollTop()), left: a.left - (parseInt(this.helper.css("left"),
                        10) || 0) + (b ? 0 : this.scrollParent.scrollLeft())
                }
            }, _cacheMargins: function () { this.margins = { left: parseInt(this.element.css("marginLeft"), 10) || 0, top: parseInt(this.element.css("marginTop"), 10) || 0, right: parseInt(this.element.css("marginRight"), 10) || 0, bottom: parseInt(this.element.css("marginBottom"), 10) || 0 } }, _cacheHelperProportions: function () { this.helperProportions = { width: this.helper.outerWidth(), height: this.helper.outerHeight() } }, _setContainment: function () {
                var a; var b = this.options; var c = this.document[0]; this.relativeContainer =
                    null; if (b.containment) if ("window" === b.containment) this.containment = [d(window).scrollLeft() - this.offset.relative.left - this.offset.parent.left, d(window).scrollTop() - this.offset.relative.top - this.offset.parent.top, d(window).scrollLeft() + d(window).width() - this.helperProportions.width - this.margins.left, d(window).scrollTop() + (d(window).height() || c.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top]; else if ("document" === b.containment) this.containment = [0, 0, d(c).width() - this.helperProportions.width -
                        this.margins.left, (d(c).height() || c.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top]; else if (b.containment.constructor === Array) this.containment = b.containment; else {
                            if ("parent" === b.containment && (b.containment = this.helper[0].parentNode), c = d(b.containment), a = c[0]) b = /(scroll|auto)/.test(c.css("overflow")), this.containment = [(parseInt(c.css("borderLeftWidth"), 10) || 0) + (parseInt(c.css("paddingLeft"), 10) || 0), (parseInt(c.css("borderTopWidth"), 10) || 0) + (parseInt(c.css("paddingTop"),
                                10) || 0), (b ? Math.max(a.scrollWidth, a.offsetWidth) : a.offsetWidth) - (parseInt(c.css("borderRightWidth"), 10) || 0) - (parseInt(c.css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left - this.margins.right, (b ? Math.max(a.scrollHeight, a.offsetHeight) : a.offsetHeight) - (parseInt(c.css("borderBottomWidth"), 10) || 0) - (parseInt(c.css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top - this.margins.bottom], this.relativeContainer = c
                        } else this.containment = null
            }, _convertPositionTo: function (a,
                b) { b || (b = this.position); var c = "absolute" === a ? 1 : -1, e = this._isRootNode(this.scrollParent[0]); return { top: b.top + this.offset.relative.top * c + this.offset.parent.top * c - ("fixed" === this.cssPosition ? -this.offset.scroll.top : e ? 0 : this.offset.scroll.top) * c, left: b.left + this.offset.relative.left * c + this.offset.parent.left * c - ("fixed" === this.cssPosition ? -this.offset.scroll.left : e ? 0 : this.offset.scroll.left) * c } }, _generatePosition: function (a, b) {
                    var c = this.options, e = this._isRootNode(this.scrollParent[0]); var f = a.pageX; var g =
                        a.pageY; e && this.offset.scroll || (this.offset.scroll = { top: this.scrollParent.scrollTop(), left: this.scrollParent.scrollLeft() }); if (b) {
                            if (this.containment) {
                                if (this.relativeContainer) { var k = this.relativeContainer.offset(); k = [this.containment[0] + k.left, this.containment[1] + k.top, this.containment[2] + k.left, this.containment[3] + k.top] } else k = this.containment; a.pageX - this.offset.click.left < k[0] && (f = k[0] + this.offset.click.left); a.pageY - this.offset.click.top < k[1] && (g = k[1] + this.offset.click.top); a.pageX - this.offset.click.left >
                                    k[2] && (f = k[2] + this.offset.click.left); a.pageY - this.offset.click.top > k[3] && (g = k[3] + this.offset.click.top)
                            } c.grid && (g = c.grid[1] ? this.originalPageY + Math.round((g - this.originalPageY) / c.grid[1]) * c.grid[1] : this.originalPageY, g = k ? g - this.offset.click.top >= k[1] || g - this.offset.click.top > k[3] ? g : g - this.offset.click.top >= k[1] ? g - c.grid[1] : g + c.grid[1] : g, f = c.grid[0] ? this.originalPageX + Math.round((f - this.originalPageX) / c.grid[0]) * c.grid[0] : this.originalPageX, f = k ? f - this.offset.click.left >= k[0] || f - this.offset.click.left >
                                k[2] ? f : f - this.offset.click.left >= k[0] ? f - c.grid[0] : f + c.grid[0] : f); "y" === c.axis && (f = this.originalPageX); "x" === c.axis && (g = this.originalPageY)
                        } return { top: g - this.offset.click.top - this.offset.relative.top - this.offset.parent.top + ("fixed" === this.cssPosition ? -this.offset.scroll.top : e ? 0 : this.offset.scroll.top), left: f - this.offset.click.left - this.offset.relative.left - this.offset.parent.left + ("fixed" === this.cssPosition ? -this.offset.scroll.left : e ? 0 : this.offset.scroll.left) }
                }, _clear: function () {
                    this._removeClass(this.helper,
                        "ui-draggable-dragging"); this.helper[0] === this.element[0] || this.cancelHelperRemoval || this.helper.remove(); this.helper = null; this.cancelHelperRemoval = !1; this.destroyOnClear && this.destroy()
                }, _trigger: function (a, b, c) { c = c || this._uiHash(); d.ui.plugin.call(this, a, [b, c, this], !0); /^(drag|start|stop)/.test(a) && (this.positionAbs = this._convertPositionTo("absolute"), c.offset = this.positionAbs); return d.Widget.prototype._trigger.call(this, a, b, c) }, plugins: {}, _uiHash: function () {
                    return {
                        helper: this.helper, position: this.position,
                        originalPosition: this.originalPosition, offset: this.positionAbs
                    }
                }
        }); d.ui.plugin.add("draggable", "connectToSortable", {
            start: function (a, b, c) { var e = d.extend({}, b, { item: c.element }); c.sortables = []; d(c.options.connectToSortable).each(function () { var f = d(this).sortable("instance"); f && !f.options.disabled && (c.sortables.push(f), f.refreshPositions(), f._trigger("activate", a, e)) }) }, stop: function (a, b, c) {
                var e = d.extend({}, b, { item: c.element }); c.cancelHelperRemoval = !1; d.each(c.sortables, function () {
                    this.isOver ? (this.isOver =
                        0, c.cancelHelperRemoval = !0, this.cancelHelperRemoval = !1, this._storedCSS = { position: this.placeholder.css("position"), top: this.placeholder.css("top"), left: this.placeholder.css("left") }, this._mouseStop(a), this.options.helper = this.options._helper) : (this.cancelHelperRemoval = !0, this._trigger("deactivate", a, e))
                })
            }, drag: function (a, b, c) {
                d.each(c.sortables, function () {
                    var e = !1, f = this; f.positionAbs = c.positionAbs; f.helperProportions = c.helperProportions; f.offset.click = c.offset.click; f._intersectsWith(f.containerCache) &&
                        (e = !0, d.each(c.sortables, function () { this.positionAbs = c.positionAbs; this.helperProportions = c.helperProportions; this.offset.click = c.offset.click; this !== f && this._intersectsWith(this.containerCache) && d.contains(f.element[0], this.element[0]) && (e = !1); return e })); e ? (f.isOver || (f.isOver = 1, c._parent = b.helper.parent(), f.currentItem = b.helper.appendTo(f.element).data("ui-sortable-item", !0), f.options._helper = f.options.helper, f.options.helper = function () { return b.helper[0] }, a.target = f.currentItem[0], f._mouseCapture(a,
                            !0), f._mouseStart(a, !0, !0), f.offset.click.top = c.offset.click.top, f.offset.click.left = c.offset.click.left, f.offset.parent.left -= c.offset.parent.left - f.offset.parent.left, f.offset.parent.top -= c.offset.parent.top - f.offset.parent.top, c._trigger("toSortable", a), c.dropped = f.element, d.each(c.sortables, function () { this.refreshPositions() }), c.currentItem = c.element, f.fromOutside = c), f.currentItem && (f._mouseDrag(a), b.position = f.position)) : f.isOver && (f.isOver = 0, f.cancelHelperRemoval = !0, f.options._revert = f.options.revert,
                                f.options.revert = !1, f._trigger("out", a, f._uiHash(f)), f._mouseStop(a, !0), f.options.revert = f.options._revert, f.options.helper = f.options._helper, f.placeholder && f.placeholder.remove(), b.helper.appendTo(c._parent), c._refreshOffsets(a), b.position = c._generatePosition(a, !0), c._trigger("fromSortable", a), c.dropped = !1, d.each(c.sortables, function () { this.refreshPositions() }))
                })
            }
        }); d.ui.plugin.add("draggable", "cursor", {
            start: function (a, b, c) {
                a = d("body"); c = c.options; a.css("cursor") && (c._cursor = a.css("cursor")); a.css("cursor",
                    c.cursor)
            }, stop: function (a, b, c) { a = c.options; a._cursor && d("body").css("cursor", a._cursor) }
        }); d.ui.plugin.add("draggable", "opacity", { start: function (a, b, c) { a = d(b.helper); c = c.options; a.css("opacity") && (c._opacity = a.css("opacity")); a.css("opacity", c.opacity) }, stop: function (a, b, c) { a = c.options; a._opacity && d(b.helper).css("opacity", a._opacity) } }); d.ui.plugin.add("draggable", "scroll", {
            start: function (a, b, c) {
                c.scrollParentNotHidden || (c.scrollParentNotHidden = c.helper.scrollParent(!1)); c.scrollParentNotHidden[0] !==
                    c.document[0] && "HTML" !== c.scrollParentNotHidden[0].tagName && (c.overflowOffset = c.scrollParentNotHidden.offset())
            }, drag: function (a, b, c) {
                b = c.options; var e = !1, f = c.scrollParentNotHidden[0], g = c.document[0]; f !== g && "HTML" !== f.tagName ? (b.axis && "x" === b.axis || (c.overflowOffset.top + f.offsetHeight - a.pageY < b.scrollSensitivity ? f.scrollTop = e = f.scrollTop + b.scrollSpeed : a.pageY - c.overflowOffset.top < b.scrollSensitivity && (f.scrollTop = e = f.scrollTop - b.scrollSpeed)), b.axis && "y" === b.axis || (c.overflowOffset.left + f.offsetWidth -
                    a.pageX < b.scrollSensitivity ? f.scrollLeft = e = f.scrollLeft + b.scrollSpeed : a.pageX - c.overflowOffset.left < b.scrollSensitivity && (f.scrollLeft = e = f.scrollLeft - b.scrollSpeed))) : (b.axis && "x" === b.axis || (a.pageY - d(g).scrollTop() < b.scrollSensitivity ? e = d(g).scrollTop(d(g).scrollTop() - b.scrollSpeed) : d(window).height() - (a.pageY - d(g).scrollTop()) < b.scrollSensitivity && (e = d(g).scrollTop(d(g).scrollTop() + b.scrollSpeed))), b.axis && "y" === b.axis || (a.pageX - d(g).scrollLeft() < b.scrollSensitivity ? e = d(g).scrollLeft(d(g).scrollLeft() -
                        b.scrollSpeed) : d(window).width() - (a.pageX - d(g).scrollLeft()) < b.scrollSensitivity && (e = d(g).scrollLeft(d(g).scrollLeft() + b.scrollSpeed)))); !1 !== e && d.ui.ddmanager && !b.dropBehaviour && d.ui.ddmanager.prepareOffsets(c, a)
            }
        }); d.ui.plugin.add("draggable", "snap", {
            start: function (a, b, c) {
                a = c.options; c.snapElements = []; d(a.snap.constructor !== String ? a.snap.items || ":data(ui-draggable)" : a.snap).each(function () {
                    var e = d(this), f = e.offset(); this !== c.element[0] && c.snapElements.push({
                        item: this, width: e.outerWidth(), height: e.outerHeight(),
                        top: f.top, left: f.left
                    })
                })
            }, drag: function (a, b, c) {
                var e, f = c.options, g = f.snapTolerance, k = b.offset.left, n = k + c.helperProportions.width, l = b.offset.top, r = l + c.helperProportions.height; for (e = c.snapElements.length - 1; 0 <= e; e--) {
                    var t = c.snapElements[e].left - c.margins.left; var h = t + c.snapElements[e].width; var m = c.snapElements[e].top - c.margins.top; var p = m + c.snapElements[e].height; if (n < t - g || k > h + g || r < m - g || l > p + g || !d.contains(c.snapElements[e].item.ownerDocument, c.snapElements[e].item)) c.snapElements[e].snapping && c.options.snap.release &&
                        c.options.snap.release.call(c.element, a, d.extend(c._uiHash(), { snapItem: c.snapElements[e].item })), c.snapElements[e].snapping = !1; else {
                            if ("inner" !== f.snapMode) {
                                var q = Math.abs(m - r) <= g; var v = Math.abs(p - l) <= g; var w = Math.abs(t - n) <= g; var u = Math.abs(h - k) <= g; q && (b.position.top = c._convertPositionTo("relative", { top: m - c.helperProportions.height, left: 0 }).top); v && (b.position.top = c._convertPositionTo("relative", { top: p, left: 0 }).top); w && (b.position.left = c._convertPositionTo("relative", { top: 0, left: t - c.helperProportions.width }).left);
                                u && (b.position.left = c._convertPositionTo("relative", { top: 0, left: h }).left)
                            } var A = q || v || w || u; "outer" !== f.snapMode && (q = Math.abs(m - l) <= g, v = Math.abs(p - r) <= g, w = Math.abs(t - k) <= g, u = Math.abs(h - n) <= g, q && (b.position.top = c._convertPositionTo("relative", { top: m, left: 0 }).top), v && (b.position.top = c._convertPositionTo("relative", { top: p - c.helperProportions.height, left: 0 }).top), w && (b.position.left = c._convertPositionTo("relative", { top: 0, left: t }).left), u && (b.position.left = c._convertPositionTo("relative", {
                                top: 0, left: h -
                                    c.helperProportions.width
                            }).left)); !c.snapElements[e].snapping && (q || v || w || u || A) && c.options.snap.snap && c.options.snap.snap.call(c.element, a, d.extend(c._uiHash(), { snapItem: c.snapElements[e].item })); c.snapElements[e].snapping = q || v || w || u || A
                    }
                }
            }
        }); d.ui.plugin.add("draggable", "stack", {
            start: function (a, b, c) {
                a = d.makeArray(d(c.options.stack)).sort(function (f, g) { return (parseInt(d(f).css("zIndex"), 10) || 0) - (parseInt(d(g).css("zIndex"), 10) || 0) }); if (a.length) {
                    var e = parseInt(d(a[0]).css("zIndex"), 10) || 0; d(a).each(function (f) {
                        d(this).css("zIndex",
                            e + f)
                    }); this.css("zIndex", e + a.length)
                }
            }
        }); d.ui.plugin.add("draggable", "zIndex", { start: function (a, b, c) { a = d(b.helper); c = c.options; a.css("zIndex") && (c._zIndex = a.css("zIndex")); a.css("zIndex", c.zIndex) }, stop: function (a, b, c) { a = c.options; a._zIndex && d(b.helper).css("zIndex", a._zIndex) } }); d.widget("ui.resizable", d.ui.mouse, {
            version: "1.12.1", widgetEventPrefix: "resize", options: {
                alsoResize: !1, animate: !1, animateDuration: "slow", animateEasing: "swing", aspectRatio: !1, autoHide: !1, classes: { "ui-resizable-se": "ui-icon ui-icon-gripsmall-diagonal-se" },
                containment: !1, ghost: !1, grid: !1, handles: "e,s,se", helper: !1, maxHeight: null, maxWidth: null, minHeight: 10, minWidth: 10, zIndex: 90, resize: null, start: null, stop: null
            }, _num: function (a) { return parseFloat(a) || 0 }, _isNumber: function (a) { return !isNaN(parseFloat(a)) }, _hasScroll: function (a, b) { if ("hidden" === d(a).css("overflow")) return !1; var c = b && "left" === b ? "scrollLeft" : "scrollTop"; if (0 < a[c]) return !0; a[c] = 1; var e = 0 < a[c]; a[c] = 0; return e }, _create: function () {
                var a = this.options, b = this; this._addClass("ui-resizable"); d.extend(this,
                    { _aspectRatio: !!a.aspectRatio, aspectRatio: a.aspectRatio, originalElement: this.element, _proportionallyResizeElements: [], _helper: a.helper || a.ghost || a.animate ? a.helper || "ui-resizable-helper" : null }); if (this.element[0].nodeName.match(/^(canvas|textarea|input|select|button|img)$/i)) {
                        this.element.wrap(d("<div class='ui-wrapper' style='overflow: hidden;'></div>").css({ position: this.element.css("position"), width: this.element.outerWidth(), height: this.element.outerHeight(), top: this.element.css("top"), left: this.element.css("left") }));
                        this.element = this.element.parent().data("ui-resizable", this.element.resizable("instance")); this.elementIsWrapper = !0; var c = { marginTop: this.originalElement.css("marginTop"), marginRight: this.originalElement.css("marginRight"), marginBottom: this.originalElement.css("marginBottom"), marginLeft: this.originalElement.css("marginLeft") }; this.element.css(c); this.originalElement.css("margin", 0); this.originalResizeStyle = this.originalElement.css("resize"); this.originalElement.css("resize", "none"); this._proportionallyResizeElements.push(this.originalElement.css({
                            position: "static",
                            zoom: 1, display: "block"
                        })); this.originalElement.css(c); this._proportionallyResize()
                    } this._setupHandles(); if (a.autoHide) d(this.element).on("mouseenter", function () { a.disabled || (b._removeClass("ui-resizable-autohide"), b._handles.show()) }).on("mouseleave", function () { a.disabled || b.resizing || (b._addClass("ui-resizable-autohide"), b._handles.hide()) }); this._mouseInit()
            }, _destroy: function () {
                this._mouseDestroy(); var a = function (c) { d(c).removeData("resizable").removeData("ui-resizable").off(".resizable").find(".ui-resizable-handle").remove() };
                if (this.elementIsWrapper) { a(this.element); var b = this.element; this.originalElement.css({ position: b.css("position"), width: b.outerWidth(), height: b.outerHeight(), top: b.css("top"), left: b.css("left") }).insertAfter(b); b.remove() } this.originalElement.css("resize", this.originalResizeStyle); a(this.originalElement); return this
            }, _setOption: function (a, b) { this._super(a, b); switch (a) { case "handles": this._removeHandles(), this._setupHandles() } }, _setupHandles: function () {
                var a = this.options, b, c = this; this.handles = a.handles ||
                    (d(".ui-resizable-handle", this.element).length ? { n: ".ui-resizable-n", e: ".ui-resizable-e", s: ".ui-resizable-s", w: ".ui-resizable-w", se: ".ui-resizable-se", sw: ".ui-resizable-sw", ne: ".ui-resizable-ne", nw: ".ui-resizable-nw" } : "e,s,se"); this._handles = d(); if (this.handles.constructor === String) {
                        "all" === this.handles && (this.handles = "n,e,s,w,se,sw,ne,nw"); var e = this.handles.split(","); this.handles = {}; for (b = 0; b < e.length; b++) {
                            var f = d.trim(e[b]); var g = "ui-resizable-" + f; var k = d("<div>"); this._addClass(k, "ui-resizable-handle " +
                                g); k.css({ zIndex: a.zIndex }); this.handles[f] = ".ui-resizable-" + f; this.element.append(k)
                        }
                    } this._renderAxis = function (n) {
                        var l; n = n || this.element; for (l in this.handles) {
                            if (this.handles[l].constructor === String) this.handles[l] = this.element.children(this.handles[l]).first().show(); else if (this.handles[l].jquery || this.handles[l].nodeType) this.handles[l] = d(this.handles[l]), this._on(this.handles[l], { mousedown: c._mouseDown }); if (this.elementIsWrapper && this.originalElement[0].nodeName.match(/^(textarea|input|select|button)$/i)) {
                                var r =
                                    d(this.handles[l], this.element); var t = /sw|ne|nw|se|n|s/.test(l) ? r.outerHeight() : r.outerWidth(); r = ["padding", /ne|nw|n/.test(l) ? "Top" : /se|sw|s/.test(l) ? "Bottom" : /^e$/.test(l) ? "Right" : "Left"].join(""); n.css(r, t); this._proportionallyResize()
                            } this._handles = this._handles.add(this.handles[l])
                        }
                    }; this._renderAxis(this.element); this._handles = this._handles.add(this.element.find(".ui-resizable-handle")); this._handles.disableSelection(); this._handles.on("mouseover", function () {
                        c.resizing || (this.className && (k = this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i)),
                            c.axis = k && k[1] ? k[1] : "se")
                    }); a.autoHide && (this._handles.hide(), this._addClass("ui-resizable-autohide"))
            }, _removeHandles: function () { this._handles.remove() }, _mouseCapture: function (a) { var b, c = !1; for (b in this.handles) { var e = d(this.handles[b])[0]; if (e === a.target || d.contains(e, a.target)) c = !0 } return !this.options.disabled && c }, _mouseStart: function (a) {
                var b = this.options, c = this.element; this.resizing = !0; this._renderProxy(); var e = this._num(this.helper.css("left")); var f = this._num(this.helper.css("top")); b.containment &&
                    (e += d(b.containment).scrollLeft() || 0, f += d(b.containment).scrollTop() || 0); this.offset = this.helper.offset(); this.position = { left: e, top: f }; this.size = this._helper ? { width: this.helper.width(), height: this.helper.height() } : { width: c.width(), height: c.height() }; this.originalSize = this._helper ? { width: c.outerWidth(), height: c.outerHeight() } : { width: c.width(), height: c.height() }; this.sizeDiff = { width: c.outerWidth() - c.width(), height: c.outerHeight() - c.height() }; this.originalPosition = { left: e, top: f }; this.originalMousePosition =
                        { left: a.pageX, top: a.pageY }; this.aspectRatio = "number" === typeof b.aspectRatio ? b.aspectRatio : this.originalSize.width / this.originalSize.height || 1; e = d(".ui-resizable-" + this.axis).css("cursor"); d("body").css("cursor", "auto" === e ? this.axis + "-resize" : e); this._addClass("ui-resizable-resizing"); this._propagate("start", a); return !0
            }, _mouseDrag: function (a) {
                var b = this.originalMousePosition; var c = a.pageX - b.left || 0; b = a.pageY - b.top || 0; var e = this._change[this.axis]; this._updatePrevProperties(); if (!e) return !1; c = e.apply(this,
                    [a, c, b]); this._updateVirtualBoundaries(a.shiftKey); if (this._aspectRatio || a.shiftKey) c = this._updateRatio(c, a); c = this._respectSize(c, a); this._updateCache(c); this._propagate("resize", a); c = this._applyChanges(); !this._helper && this._proportionallyResizeElements.length && this._proportionallyResize(); d.isEmptyObject(c) || (this._updatePrevProperties(), this._trigger("resize", a, this.ui()), this._applyChanges()); return !1
            }, _mouseStop: function (a) {
                this.resizing = !1; var b, c = this.options; if (this._helper) {
                    var e = this._proportionallyResizeElements;
                    e = (b = e.length && /textarea/i.test(e[0].nodeName)) && this._hasScroll(e[0], "left") ? 0 : this.sizeDiff.height; b = b ? 0 : this.sizeDiff.width; b = { width: this.helper.width() - b, height: this.helper.height() - e }; e = parseFloat(this.element.css("left")) + (this.position.left - this.originalPosition.left) || null; var f = parseFloat(this.element.css("top")) + (this.position.top - this.originalPosition.top) || null; c.animate || this.element.css(d.extend(b, { top: f, left: e })); this.helper.height(this.size.height); this.helper.width(this.size.width);
                    this._helper && !c.animate && this._proportionallyResize()
                } d("body").css("cursor", "auto"); this._removeClass("ui-resizable-resizing"); this._propagate("stop", a); this._helper && this.helper.remove(); return !1
            }, _updatePrevProperties: function () { this.prevPosition = { top: this.position.top, left: this.position.left }; this.prevSize = { width: this.size.width, height: this.size.height } }, _applyChanges: function () {
                var a = {}; this.position.top !== this.prevPosition.top && (a.top = this.position.top + "px"); this.position.left !== this.prevPosition.left &&
                    (a.left = this.position.left + "px"); this.size.width !== this.prevSize.width && (a.width = this.size.width + "px"); this.size.height !== this.prevSize.height && (a.height = this.size.height + "px"); this.helper.css(a); return a
            }, _updateVirtualBoundaries: function (a) {
                var b = this.options; b = { minWidth: this._isNumber(b.minWidth) ? b.minWidth : 0, maxWidth: this._isNumber(b.maxWidth) ? b.maxWidth : Infinity, minHeight: this._isNumber(b.minHeight) ? b.minHeight : 0, maxHeight: this._isNumber(b.maxHeight) ? b.maxHeight : Infinity }; if (this._aspectRatio ||
                    a) { a = b.minHeight * this.aspectRatio; var c = b.minWidth / this.aspectRatio; var e = b.maxHeight * this.aspectRatio; var f = b.maxWidth / this.aspectRatio; a > b.minWidth && (b.minWidth = a); c > b.minHeight && (b.minHeight = c); e < b.maxWidth && (b.maxWidth = e); f < b.maxHeight && (b.maxHeight = f) } this._vBoundaries = b
            }, _updateCache: function (a) {
                this.offset = this.helper.offset(); this._isNumber(a.left) && (this.position.left = a.left); this._isNumber(a.top) && (this.position.top = a.top); this._isNumber(a.height) && (this.size.height = a.height); this._isNumber(a.width) &&
                    (this.size.width = a.width)
            }, _updateRatio: function (a) { var b = this.position, c = this.size, e = this.axis; this._isNumber(a.height) ? a.width = a.height * this.aspectRatio : this._isNumber(a.width) && (a.height = a.width / this.aspectRatio); "sw" === e && (a.left = b.left + (c.width - a.width), a.top = null); "nw" === e && (a.top = b.top + (c.height - a.height), a.left = b.left + (c.width - a.width)); return a }, _respectSize: function (a) {
                var b = this._vBoundaries, c = this.axis, e = this._isNumber(a.width) && b.maxWidth && b.maxWidth < a.width, f = this._isNumber(a.height) &&
                    b.maxHeight && b.maxHeight < a.height, g = this._isNumber(a.width) && b.minWidth && b.minWidth > a.width, k = this._isNumber(a.height) && b.minHeight && b.minHeight > a.height, n = this.originalPosition.left + this.originalSize.width, l = this.originalPosition.top + this.originalSize.height, r = /sw|nw|w/.test(c); c = /nw|ne|n/.test(c); g && (a.width = b.minWidth); k && (a.height = b.minHeight); e && (a.width = b.maxWidth); f && (a.height = b.maxHeight); g && r && (a.left = n - b.minWidth); e && r && (a.left = n - b.maxWidth); k && c && (a.top = l - b.minHeight); f && c && (a.top = l - b.maxHeight);
                a.width || a.height || a.left || !a.top ? a.width || a.height || a.top || !a.left || (a.left = null) : a.top = null; return a
            }, _getPaddingPlusBorderDimensions: function (a) { var b = 0, c = [], e = [a.css("borderTopWidth"), a.css("borderRightWidth"), a.css("borderBottomWidth"), a.css("borderLeftWidth")]; for (a = [a.css("paddingTop"), a.css("paddingRight"), a.css("paddingBottom"), a.css("paddingLeft")]; 4 > b; b++)c[b] = parseFloat(e[b]) || 0, c[b] += parseFloat(a[b]) || 0; return { height: c[0] + c[2], width: c[1] + c[3] } }, _proportionallyResize: function () {
                if (this._proportionallyResizeElements.length) for (var a,
                    b = 0, c = this.helper || this.element; b < this._proportionallyResizeElements.length; b++)a = this._proportionallyResizeElements[b], this.outerDimensions || (this.outerDimensions = this._getPaddingPlusBorderDimensions(a)), a.css({ height: c.height() - this.outerDimensions.height || 0, width: c.width() - this.outerDimensions.width || 0 })
            }, _renderProxy: function () {
                var a = this.options; this.elementOffset = this.element.offset(); this._helper ? (this.helper = this.helper || d("<div style='overflow:hidden;'></div>"), this._addClass(this.helper,
                    this._helper), this.helper.css({ width: this.element.outerWidth(), height: this.element.outerHeight(), position: "absolute", left: this.elementOffset.left + "px", top: this.elementOffset.top + "px", zIndex: ++a.zIndex }), this.helper.appendTo("body").disableSelection()) : this.helper = this.element
            }, _change: {
                e: function (a, b) { return { width: this.originalSize.width + b } }, w: function (a, b) { return { left: this.originalPosition.left + b, width: this.originalSize.width - b } }, n: function (a, b, c) {
                    return {
                        top: this.originalPosition.top + c, height: this.originalSize.height -
                            c
                    }
                }, s: function (a, b, c) { return { height: this.originalSize.height + c } }, se: function (a, b, c) { return d.extend(this._change.s.apply(this, arguments), this._change.e.apply(this, [a, b, c])) }, sw: function (a, b, c) { return d.extend(this._change.s.apply(this, arguments), this._change.w.apply(this, [a, b, c])) }, ne: function (a, b, c) { return d.extend(this._change.n.apply(this, arguments), this._change.e.apply(this, [a, b, c])) }, nw: function (a, b, c) { return d.extend(this._change.n.apply(this, arguments), this._change.w.apply(this, [a, b, c])) }
            },
            _propagate: function (a, b) { d.ui.plugin.call(this, a, [b, this.ui()]); "resize" !== a && this._trigger(a, b, this.ui()) }, plugins: {}, ui: function () { return { originalElement: this.originalElement, element: this.element, helper: this.helper, position: this.position, size: this.size, originalSize: this.originalSize, originalPosition: this.originalPosition } }
        }); d.ui.plugin.add("resizable", "animate", {
            stop: function (a) {
                var b = d(this).resizable("instance"), c = b.options, e = b._proportionallyResizeElements, f = e.length && /textarea/i.test(e[0].nodeName),
                g = f && b._hasScroll(e[0], "left") ? 0 : b.sizeDiff.height; f = { width: b.size.width - (f ? 0 : b.sizeDiff.width), height: b.size.height - g }; g = parseFloat(b.element.css("left")) + (b.position.left - b.originalPosition.left) || null; var k = parseFloat(b.element.css("top")) + (b.position.top - b.originalPosition.top) || null; b.element.animate(d.extend(f, k && g ? { top: k, left: g } : {}), {
                    duration: c.animateDuration, easing: c.animateEasing, step: function () {
                        var n = {
                            width: parseFloat(b.element.css("width")), height: parseFloat(b.element.css("height")), top: parseFloat(b.element.css("top")),
                            left: parseFloat(b.element.css("left"))
                        }; e && e.length && d(e[0]).css({ width: n.width, height: n.height }); b._updateCache(n); b._propagate("resize", a)
                    }
                })
            }
        }); d.ui.plugin.add("resizable", "containment", {
            start: function () {
                var a = d(this).resizable("instance"), b = a.element; var c = a.options.containment; if (b = c instanceof d ? c.get(0) : /parent/.test(c) ? b.parent().get(0) : c) if (a.containerElement = d(b), /document/.test(c) || c === document) a.containerOffset = { left: 0, top: 0 }, a.containerPosition = { left: 0, top: 0 }, a.parentData = {
                    element: d(document),
                    left: 0, top: 0, width: d(document).width(), height: d(document).height() || document.body.parentNode.scrollHeight
                }; else {
                    var e = d(b); var f = []; d(["Top", "Right", "Left", "Bottom"]).each(function (n, l) { f[n] = a._num(e.css("padding" + l)) }); a.containerOffset = e.offset(); a.containerPosition = e.position(); a.containerSize = { height: e.innerHeight() - f[3], width: e.innerWidth() - f[1] }; c = a.containerOffset; var g = a.containerSize.height; var k = a.containerSize.width; k = a._hasScroll(b, "left") ? b.scrollWidth : k; g = a._hasScroll(b) ? b.scrollHeight :
                        g; a.parentData = { element: b, left: c.left, top: c.top, width: k, height: g }
                }
            }, resize: function (a) {
                var b = d(this).resizable("instance"); var c = b.options; var e = b.containerOffset; var f = b.position; a = b._aspectRatio || a.shiftKey; var g = { top: 0, left: 0 }, k = b.containerElement, n = !0; k[0] !== document && /static/.test(k.css("position")) && (g = e); f.left < (b._helper ? e.left : 0) && (b.size.width += b._helper ? b.position.left - e.left : b.position.left - g.left, a && (b.size.height = b.size.width / b.aspectRatio, n = !1), b.position.left = c.helper ? e.left : 0); f.top <
                    (b._helper ? e.top : 0) && (b.size.height += b._helper ? b.position.top - e.top : b.position.top, a && (b.size.width = b.size.height * b.aspectRatio, n = !1), b.position.top = b._helper ? e.top : 0); c = b.containerElement.get(0) === b.element.parent().get(0); f = /relative|absolute/.test(b.containerElement.css("position")); c && f ? (b.offset.left = b.parentData.left + b.position.left, b.offset.top = b.parentData.top + b.position.top) : (b.offset.left = b.element.offset().left, b.offset.top = b.element.offset().top); c = Math.abs(b.sizeDiff.width + (b._helper ?
                        b.offset.left - g.left : b.offset.left - e.left)); e = Math.abs(b.sizeDiff.height + (b._helper ? b.offset.top - g.top : b.offset.top - e.top)); c + b.size.width >= b.parentData.width && (b.size.width = b.parentData.width - c, a && (b.size.height = b.size.width / b.aspectRatio, n = !1)); e + b.size.height >= b.parentData.height && (b.size.height = b.parentData.height - e, a && (b.size.width = b.size.height * b.aspectRatio, n = !1)); n || (b.position.left = b.prevPosition.left, b.position.top = b.prevPosition.top, b.size.width = b.prevSize.width, b.size.height = b.prevSize.height)
            },
            stop: function () { var a = d(this).resizable("instance"), b = a.options, c = a.containerOffset, e = a.containerPosition, f = a.containerElement, g = d(a.helper), k = g.offset(), n = g.outerWidth() - a.sizeDiff.width; g = g.outerHeight() - a.sizeDiff.height; a._helper && !b.animate && /relative/.test(f.css("position")) && d(this).css({ left: k.left - e.left - c.left, width: n, height: g }); a._helper && !b.animate && /static/.test(f.css("position")) && d(this).css({ left: k.left - e.left - c.left, width: n, height: g }) }
        }); d.ui.plugin.add("resizable", "alsoResize", {
            start: function () {
                var a =
                    d(this).resizable("instance").options; d(a.alsoResize).each(function () { var b = d(this); b.data("ui-resizable-alsoresize", { width: parseFloat(b.width()), height: parseFloat(b.height()), left: parseFloat(b.css("left")), top: parseFloat(b.css("top")) }) })
            }, resize: function (a, b) {
                var c = d(this).resizable("instance"), e = c.originalSize, f = c.originalPosition, g = { height: c.size.height - e.height || 0, width: c.size.width - e.width || 0, top: c.position.top - f.top || 0, left: c.position.left - f.left || 0 }; d(c.options.alsoResize).each(function () {
                    var k =
                        d(this), n = d(this).data("ui-resizable-alsoresize"), l = {}, r = k.parents(b.originalElement[0]).length ? ["width", "height"] : ["width", "height", "top", "left"]; d.each(r, function (t, h) { var m = (n[h] || 0) + (g[h] || 0); m && 0 <= m && (l[h] = m || null) }); k.css(l)
                })
            }, stop: function () { d(this).removeData("ui-resizable-alsoresize") }
        }); d.ui.plugin.add("resizable", "ghost", {
            start: function () {
                var a = d(this).resizable("instance"), b = a.size; a.ghost = a.originalElement.clone(); a.ghost.css({
                    opacity: .25, display: "block", position: "relative", height: b.height,
                    width: b.width, margin: 0, left: 0, top: 0
                }); a._addClass(a.ghost, "ui-resizable-ghost"); !1 !== d.uiBackCompat && "string" === typeof a.options.ghost && a.ghost.addClass(this.options.ghost); a.ghost.appendTo(a.helper)
            }, resize: function () { var a = d(this).resizable("instance"); a.ghost && a.ghost.css({ position: "relative", height: a.size.height, width: a.size.width }) }, stop: function () { var a = d(this).resizable("instance"); a.ghost && a.helper && a.helper.get(0).removeChild(a.ghost.get(0)) }
        }); d.ui.plugin.add("resizable", "grid", {
            resize: function () {
                var a =
                    d(this).resizable("instance"), b = a.options, c = a.size, e = a.originalSize, f = a.originalPosition, g = a.axis, k = "number" === typeof b.grid ? [b.grid, b.grid] : b.grid, n = k[0] || 1, l = k[1] || 1, r = Math.round((c.width - e.width) / n) * n; c = Math.round((c.height - e.height) / l) * l; var t = e.width + r, h = e.height + c, m = b.maxWidth && b.maxWidth < t, p = b.maxHeight && b.maxHeight < h, q = b.minWidth && b.minWidth > t, v = b.minHeight && b.minHeight > h; b.grid = k; q && (t += n); v && (h += l); m && (t -= n); p && (h -= l); if (/^(se|s|e)$/.test(g)) a.size.width = t, a.size.height = h; else if (/^(ne)$/.test(g)) a.size.width =
                        t, a.size.height = h, a.position.top = f.top - c; else if (/^(sw)$/.test(g)) a.size.width = t, a.size.height = h, a.position.left = f.left - r; else { if (0 >= h - l || 0 >= t - n) var w = a._getPaddingPlusBorderDimensions(this); 0 < h - l ? (a.size.height = h, a.position.top = f.top - c) : (h = l - w.height, a.size.height = h, a.position.top = f.top + e.height - h); 0 < t - n ? (a.size.width = t, a.position.left = f.left - r) : (t = n - w.width, a.size.width = t, a.position.left = f.left + e.width - t) }
            }
        }); d.widget("ui.selectable", d.ui.mouse, {
            version: "1.12.1", options: {
                appendTo: "body", autoRefresh: !0,
                distance: 0, filter: "*", tolerance: "touch", selected: null, selecting: null, start: null, stop: null, unselected: null, unselecting: null
            }, _create: function () {
                var a = this; this._addClass("ui-selectable"); this.dragged = !1; this.refresh = function () {
                    a.elementPos = d(a.element[0]).offset(); a.selectees = d(a.options.filter, a.element[0]); a._addClass(a.selectees, "ui-selectee"); a.selectees.each(function () {
                        var b = d(this), c = b.offset(), e = c.left - a.elementPos.left; c = c.top - a.elementPos.top; d.data(this, "selectable-item", {
                            element: this, $element: b,
                            left: e, top: c, right: e + b.outerWidth(), bottom: c + b.outerHeight(), startselected: !1, selected: b.hasClass("ui-selected"), selecting: b.hasClass("ui-selecting"), unselecting: b.hasClass("ui-unselecting")
                        })
                    })
                }; this.refresh(); this._mouseInit(); this.helper = d("<div>"); this._addClass(this.helper, "ui-selectable-helper")
            }, _destroy: function () { this.selectees.removeData("selectable-item"); this._mouseDestroy() }, _mouseStart: function (a) {
                var b = this, c = this.options; this.opos = [a.pageX, a.pageY]; this.elementPos = d(this.element[0]).offset();
                this.options.disabled || (this.selectees = d(c.filter, this.element[0]), this._trigger("start", a), d(c.appendTo).append(this.helper), this.helper.css({ left: a.pageX, top: a.pageY, width: 0, height: 0 }), c.autoRefresh && this.refresh(), this.selectees.filter(".ui-selected").each(function () { var e = d.data(this, "selectable-item"); e.startselected = !0; a.metaKey || a.ctrlKey || (b._removeClass(e.$element, "ui-selected"), e.selected = !1, b._addClass(e.$element, "ui-unselecting"), e.unselecting = !0, b._trigger("unselecting", a, { unselecting: e.element })) }),
                    d(a.target).parents().addBack().each(function () { var e = d.data(this, "selectable-item"); if (e) { var f = !a.metaKey && !a.ctrlKey || !e.$element.hasClass("ui-selected"); b._removeClass(e.$element, f ? "ui-unselecting" : "ui-selected")._addClass(e.$element, f ? "ui-selecting" : "ui-unselecting"); e.unselecting = !f; e.selecting = f; (e.selected = f) ? b._trigger("selecting", a, { selecting: e.element }) : b._trigger("unselecting", a, { unselecting: e.element }); return !1 } }))
            }, _mouseDrag: function (a) {
                this.dragged = !0; if (!this.options.disabled) {
                    var b =
                        this, c = this.options, e = this.opos[0], f = this.opos[1], g = a.pageX, k = a.pageY; if (e > g) { var n = g; g = e; e = n } f > k && (n = k, k = f, f = n); this.helper.css({ left: e, top: f, width: g - e, height: k - f }); this.selectees.each(function () {
                            var l = d.data(this, "selectable-item"), r = !1; if (l && l.element !== b.element[0]) {
                                var t = l.left + b.elementPos.left; var h = l.right + b.elementPos.left; var m = l.top + b.elementPos.top; var p = l.bottom + b.elementPos.top; "touch" === c.tolerance ? r = !(t > g || h < e || m > k || p < f) : "fit" === c.tolerance && (r = t > e && h < g && m > f && p < k); r ? (l.selected && (b._removeClass(l.$element,
                                    "ui-selected"), l.selected = !1), l.unselecting && (b._removeClass(l.$element, "ui-unselecting"), l.unselecting = !1), l.selecting || (b._addClass(l.$element, "ui-selecting"), l.selecting = !0, b._trigger("selecting", a, { selecting: l.element }))) : (l.selecting && ((a.metaKey || a.ctrlKey) && l.startselected ? (b._removeClass(l.$element, "ui-selecting"), l.selecting = !1, b._addClass(l.$element, "ui-selected"), l.selected = !0) : (b._removeClass(l.$element, "ui-selecting"), l.selecting = !1, l.startselected && (b._addClass(l.$element, "ui-unselecting"),
                                        l.unselecting = !0), b._trigger("unselecting", a, { unselecting: l.element }))), !l.selected || a.metaKey || a.ctrlKey || l.startselected || (b._removeClass(l.$element, "ui-selected"), l.selected = !1, b._addClass(l.$element, "ui-unselecting"), l.unselecting = !0, b._trigger("unselecting", a, { unselecting: l.element })))
                            }
                        }); return !1
                }
            }, _mouseStop: function (a) {
                var b = this; this.dragged = !1; d(".ui-unselecting", this.element[0]).each(function () {
                    var c = d.data(this, "selectable-item"); b._removeClass(c.$element, "ui-unselecting"); c.unselecting =
                        !1; c.startselected = !1; b._trigger("unselected", a, { unselected: c.element })
                }); d(".ui-selecting", this.element[0]).each(function () { var c = d.data(this, "selectable-item"); b._removeClass(c.$element, "ui-selecting")._addClass(c.$element, "ui-selected"); c.selecting = !1; c.selected = !0; c.startselected = !0; b._trigger("selected", a, { selected: c.element }) }); this._trigger("stop", a); this.helper.remove(); return !1
            }
        }); var W = /ui-corner-([a-z]){2,6}/g; d.widget("ui.controlgroup", {
            version: "1.12.1", defaultElement: "<div>", options: {
                direction: "horizontal",
                disabled: null, onlyVisible: !0, items: { button: "input[type=button], input[type=submit], input[type=reset], button, a", controlgroupLabel: ".ui-controlgroup-label", checkboxradio: "input[type='checkbox'], input[type='radio']", selectmenu: "select", spinner: ".ui-spinner-input" }
            }, _create: function () { this._enhance() }, _enhance: function () { this.element.attr("role", "toolbar"); this.refresh() }, _destroy: function () {
                this._callChildMethod("destroy"); this.childWidgets.removeData("ui-controlgroup-data"); this.element.removeAttr("role");
                this.options.items.controlgroupLabel && this.element.find(this.options.items.controlgroupLabel).find(".ui-controlgroup-label-contents").contents().unwrap()
            }, _initWidgets: function () {
                var a = this, b = []; d.each(this.options.items, function (c, e) {
                    var f = {}; if (e) if ("controlgroupLabel" === c) {
                        var g = a.element.find(e); g.each(function () { var k = d(this); k.children(".ui-controlgroup-label-contents").length || k.contents().wrapAll("<span class='ui-controlgroup-label-contents'></span>") }); a._addClass(g, null, "ui-widget ui-widget-content ui-state-default");
                        b = b.concat(g.get())
                    } else d.fn[c] && (f = a["_" + c + "Options"] ? a["_" + c + "Options"]("middle") : { classes: {} }, a.element.find(e).each(function () { var k = d(this), n = k[c]("instance"), l = d.widget.extend({}, f); "button" === c && k.parent(".ui-spinner").length || (n || (n = k[c]()[c]("instance")), n && (l.classes = a._resolveClassesValues(l.classes, n)), k[c](l), l = k[c]("widget"), d.data(l[0], "ui-controlgroup-data", n ? n : k[c]("instance")), b.push(l[0])) }))
                }); this.childWidgets = d(d.unique(b)); this._addClass(this.childWidgets, "ui-controlgroup-item")
            },
            _callChildMethod: function (a) { this.childWidgets.each(function () { var b = d(this).data("ui-controlgroup-data"); if (b && b[a]) b[a]() }) }, _updateCornerClass: function (a, b) { var c = this._buildSimpleOptions(b, "label").classes.label; this._removeClass(a, null, "ui-corner-top ui-corner-bottom ui-corner-left ui-corner-right ui-corner-all"); this._addClass(a, null, c) }, _buildSimpleOptions: function (a, b) {
                var c = "vertical" === this.options.direction, e = { classes: {} }; e.classes[b] = {
                    middle: "", first: "ui-corner-" + (c ? "top" : "left"), last: "ui-corner-" +
                        (c ? "bottom" : "right"), only: "ui-corner-all"
                }[a]; return e
            }, _spinnerOptions: function (a) { a = this._buildSimpleOptions(a, "ui-spinner"); a.classes["ui-spinner-up"] = ""; a.classes["ui-spinner-down"] = ""; return a }, _buttonOptions: function (a) { return this._buildSimpleOptions(a, "ui-button") }, _checkboxradioOptions: function (a) { return this._buildSimpleOptions(a, "ui-checkboxradio-label") }, _selectmenuOptions: function (a) {
                var b = "vertical" === this.options.direction; return {
                    width: b ? "auto" : !1, classes: {
                        middle: {
                            "ui-selectmenu-button-open": "",
                            "ui-selectmenu-button-closed": ""
                        }, first: { "ui-selectmenu-button-open": "ui-corner-" + (b ? "top" : "tl"), "ui-selectmenu-button-closed": "ui-corner-" + (b ? "top" : "left") }, last: { "ui-selectmenu-button-open": b ? "" : "ui-corner-tr", "ui-selectmenu-button-closed": "ui-corner-" + (b ? "bottom" : "right") }, only: { "ui-selectmenu-button-open": "ui-corner-top", "ui-selectmenu-button-closed": "ui-corner-all" }
                    }[a]
                }
            }, _resolveClassesValues: function (a, b) {
                var c = {}; d.each(a, function (e) {
                    var f = b.options.classes[e] || ""; f = d.trim(f.replace(W, ""));
                    c[e] = (f + " " + a[e]).replace(/\s+/g, " ")
                }); return c
            }, _setOption: function (a, b) { "direction" === a && this._removeClass("ui-controlgroup-" + this.options.direction); this._super(a, b); "disabled" === a ? this._callChildMethod(b ? "disable" : "enable") : this.refresh() }, refresh: function () {
                var a = this; this._addClass("ui-controlgroup ui-controlgroup-" + this.options.direction); "horizontal" === this.options.direction && this._addClass(null, "ui-helper-clearfix"); this._initWidgets(); var b = this.childWidgets; this.options.onlyVisible && (b =
                    b.filter(":visible")); b.length && (d.each(["first", "last"], function (c, e) { var f = b[e]().data("ui-controlgroup-data"); if (f && a["_" + f.widgetName + "Options"]) { var g = a["_" + f.widgetName + "Options"](1 === b.length ? "only" : e); g.classes = a._resolveClassesValues(g.classes, f); f.element[f.widgetName](g) } else a._updateCornerClass(b[e](), e) }), this._callChildMethod("refresh"))
            }
        }); d.widget("ui.checkboxradio", [d.ui.formResetMixin, {
            version: "1.12.1", options: {
                disabled: null, label: null, icon: !0, classes: {
                    "ui-checkboxradio-label": "ui-corner-all",
                    "ui-checkboxradio-icon": "ui-corner-all"
                }
            }, _getCreateOptions: function () { var a = this, b = this._super() || {}; this._readType(); var c = this.element.labels(); this.label = d(c[c.length - 1]); this.label.length || d.error("No label found for checkboxradio widget"); this.originalLabel = ""; this.label.contents().not(this.element[0]).each(function () { a.originalLabel += 3 === this.nodeType ? d(this).text() : this.outerHTML }); this.originalLabel && (b.label = this.originalLabel); c = this.element[0].disabled; null != c && (b.disabled = c); return b },
            _create: function () {
                var a = this.element[0].checked; this._bindFormResetHandler(); null == this.options.disabled && (this.options.disabled = this.element[0].disabled); this._setOption("disabled", this.options.disabled); this._addClass("ui-checkboxradio", "ui-helper-hidden-accessible"); this._addClass(this.label, "ui-checkboxradio-label", "ui-button ui-widget"); "radio" === this.type && this._addClass(this.label, "ui-checkboxradio-radio-label"); this.options.label && this.options.label !== this.originalLabel ? this._updateLabel() :
                    this.originalLabel && (this.options.label = this.originalLabel); this._enhance(); a && (this._addClass(this.label, "ui-checkboxradio-checked", "ui-state-active"), this.icon && this._addClass(this.icon, null, "ui-state-hover")); this._on({ change: "_toggleClasses", focus: function () { this._addClass(this.label, null, "ui-state-focus ui-visual-focus") }, blur: function () { this._removeClass(this.label, null, "ui-state-focus ui-visual-focus") } })
            }, _readType: function () {
                var a = this.element[0].nodeName.toLowerCase(); this.type = this.element[0].type;
                "input" === a && /radio|checkbox/.test(this.type) || d.error("Can't create checkboxradio on element.nodeName=" + a + " and element.type=" + this.type)
            }, _enhance: function () { this._updateIcon(this.element[0].checked) }, widget: function () { return this.label }, _getRadioGroup: function () { var a = this.element[0].name, b = "input[name='" + d.ui.escapeSelector(a) + "']"; return a ? (this.form.length ? d(this.form[0].elements).filter(b) : d(b).filter(function () { return 0 === d(this).form().length })).not(this.element) : d([]) }, _toggleClasses: function () {
                var a =
                    this.element[0].checked; this._toggleClass(this.label, "ui-checkboxradio-checked", "ui-state-active", a); this.options.icon && "checkbox" === this.type && this._toggleClass(this.icon, null, "ui-icon-check ui-state-checked", a)._toggleClass(this.icon, null, "ui-icon-blank", !a); "radio" === this.type && this._getRadioGroup().each(function () { var b = d(this).checkboxradio("instance"); b && b._removeClass(b.label, "ui-checkboxradio-checked", "ui-state-active") })
            }, _destroy: function () {
                this._unbindFormResetHandler(); this.icon && (this.icon.remove(),
                    this.iconSpace.remove())
            }, _setOption: function (a, b) { if ("label" !== a || b) this._super(a, b), "disabled" === a ? (this._toggleClass(this.label, null, "ui-state-disabled", b), this.element[0].disabled = b) : this.refresh() }, _updateIcon: function (a) {
                var b = "ui-icon ui-icon-background "; this.options.icon ? (this.icon || (this.icon = d("<span>"), this.iconSpace = d("<span> </span>"), this._addClass(this.iconSpace, "ui-checkboxradio-icon-space")), "checkbox" === this.type ? (b += a ? "ui-icon-check ui-state-checked" : "ui-icon-blank", this._removeClass(this.icon,
                    null, a ? "ui-icon-blank" : "ui-icon-check")) : b += "ui-icon-blank", this._addClass(this.icon, "ui-checkboxradio-icon", b), a || this._removeClass(this.icon, null, "ui-icon-check ui-state-checked"), this.icon.prependTo(this.label).after(this.iconSpace)) : void 0 !== this.icon && (this.icon.remove(), this.iconSpace.remove(), delete this.icon)
            }, _updateLabel: function () { var a = this.label.contents().not(this.element[0]); this.icon && (a = a.not(this.icon[0])); this.iconSpace && (a = a.not(this.iconSpace[0])); a.remove(); this.label.append(this.options.label) },
            refresh: function () { var a = this.element[0].checked, b = this.element[0].disabled; this._updateIcon(a); this._toggleClass(this.label, "ui-checkboxradio-checked", "ui-state-active", a); null !== this.options.label && this._updateLabel(); b !== this.options.disabled && this._setOptions({ disabled: b }) }
        }]); d.widget("ui.button", {
            version: "1.12.1", defaultElement: "<button>", options: { classes: { "ui-button": "ui-corner-all" }, disabled: null, icon: null, iconPosition: "beginning", label: null, showLabel: !0 }, _getCreateOptions: function () {
                var a =
                    this._super() || {}; this.isInput = this.element.is("input"); var b = this.element[0].disabled; null != b && (a.disabled = b); if (this.originalLabel = this.isInput ? this.element.val() : this.element.html()) a.label = this.originalLabel; return a
            }, _create: function () {
                !this.option.showLabel & !this.options.icon && (this.options.showLabel = !0); null == this.options.disabled && (this.options.disabled = this.element[0].disabled || !1); this.hasTitle = !!this.element.attr("title"); this.options.label && this.options.label !== this.originalLabel && (this.isInput ?
                    this.element.val(this.options.label) : this.element.html(this.options.label)); this._addClass("ui-button", "ui-widget"); this._setOption("disabled", this.options.disabled); this._enhance(); this.element.is("a") && this._on({ keyup: function (a) { a.keyCode === d.ui.keyCode.SPACE && (a.preventDefault(), this.element[0].click ? this.element[0].click() : this.element.trigger("click")) } })
            }, _enhance: function () {
                this.element.is("button") || this.element.attr("role", "button"); this.options.icon && (this._updateIcon("icon", this.options.icon),
                    this._updateTooltip())
            }, _updateTooltip: function () { this.title = this.element.attr("title"); this.options.showLabel || this.title || this.element.attr("title", this.options.label) }, _updateIcon: function (a, b) {
                var c = "iconPosition" !== a, e = c ? this.options.iconPosition : b, f = "top" === e || "bottom" === e; this.icon ? c && this._removeClass(this.icon, null, this.options.icon) : (this.icon = d("<span>"), this._addClass(this.icon, "ui-button-icon", "ui-icon"), this.options.showLabel || this._addClass("ui-button-icon-only")); c && this._addClass(this.icon,
                    null, b); this._attachIcon(e); f ? (this._addClass(this.icon, null, "ui-widget-icon-block"), this.iconSpace && this.iconSpace.remove()) : (this.iconSpace || (this.iconSpace = d("<span> </span>"), this._addClass(this.iconSpace, "ui-button-icon-space")), this._removeClass(this.icon, null, "ui-wiget-icon-block"), this._attachIconSpace(e))
            }, _destroy: function () { this.element.removeAttr("role"); this.icon && this.icon.remove(); this.iconSpace && this.iconSpace.remove(); this.hasTitle || this.element.removeAttr("title") }, _attachIconSpace: function (a) {
                this.icon[/^(?:end|bottom)/.test(a) ?
                    "before" : "after"](this.iconSpace)
            }, _attachIcon: function (a) { this.element[/^(?:end|bottom)/.test(a) ? "append" : "prepend"](this.icon) }, _setOptions: function (a) { var b = void 0 === a.icon ? this.options.icon : a.icon; (void 0 === a.showLabel ? this.options.showLabel : a.showLabel) || b || (a.showLabel = !0); this._super(a) }, _setOption: function (a, b) {
                "icon" === a && (b ? this._updateIcon(a, b) : this.icon && (this.icon.remove(), this.iconSpace && this.iconSpace.remove())); "iconPosition" === a && this._updateIcon(a, b); "showLabel" === a && (this._toggleClass("ui-button-icon-only",
                    null, !b), this._updateTooltip()); "label" === a && (this.isInput ? this.element.val(b) : (this.element.html(b), this.icon && (this._attachIcon(this.options.iconPosition), this._attachIconSpace(this.options.iconPosition)))); this._super(a, b); "disabled" === a && (this._toggleClass(null, "ui-state-disabled", b), (this.element[0].disabled = b) && this.element.blur())
            }, refresh: function () {
                var a = this.element.is("input, button") ? this.element[0].disabled : this.element.hasClass("ui-button-disabled"); a !== this.options.disabled && this._setOptions({ disabled: a });
                this._updateTooltip()
            }
        }); !1 !== d.uiBackCompat && (d.widget("ui.button", d.ui.button, {
            options: { text: !0, icons: { primary: null, secondary: null } }, _create: function () {
                this.options.showLabel && !this.options.text && (this.options.showLabel = this.options.text); !this.options.showLabel && this.options.text && (this.options.text = this.options.showLabel); this.options.icon || !this.options.icons.primary && !this.options.icons.secondary ? this.options.icon && (this.options.icons.primary = this.options.icon) : this.options.icons.primary ? this.options.icon =
                    this.options.icons.primary : (this.options.icon = this.options.icons.secondary, this.options.iconPosition = "end"); this._super()
            }, _setOption: function (a, b) { "text" === a ? this._super("showLabel", b) : ("showLabel" === a && (this.options.text = b), "icon" === a && (this.options.icons.primary = b), "icons" === a && (b.primary ? (this._super("icon", b.primary), this._super("iconPosition", "beginning")) : b.secondary && (this._super("icon", b.secondary), this._super("iconPosition", "end"))), this._superApply(arguments)) }
        }), d.fn.button = function (a) {
            return function () {
                if (!this.length ||
                    this.length && "INPUT" !== this[0].tagName || this.length && "INPUT" === this[0].tagName && "checkbox" !== this.attr("type") && "radio" !== this.attr("type")) return a.apply(this, arguments); d.ui.checkboxradio || d.error("Checkboxradio widget missing"); return 0 === arguments.length ? this.checkboxradio({ icon: !1 }) : this.checkboxradio.apply(this, arguments)
            }
        }(d.fn.button), d.fn.buttonset = function () {
            d.ui.controlgroup || d.error("Controlgroup widget missing"); if ("option" === arguments[0] && "items" === arguments[1] && arguments[2]) return this.controlgroup.apply(this,
                [arguments[0], "items.button", arguments[2]]); if ("option" === arguments[0] && "items" === arguments[1]) return this.controlgroup.apply(this, [arguments[0], "items.button"]); "object" === typeof arguments[0] && arguments[0].items && (arguments[0].items = { button: arguments[0].items }); return this.controlgroup.apply(this, arguments)
        }); d.widget("ui.dialog", {
            version: "1.12.1", options: {
                appendTo: "body", autoOpen: !0, buttons: [], classes: { "ui-dialog": "ui-corner-all", "ui-dialog-titlebar": "ui-corner-all" }, closeOnEscape: !0, closeText: "Close",
                draggable: !0, hide: null, height: "auto", maxHeight: null, maxWidth: null, minHeight: 150, minWidth: 150, modal: !1, position: { my: "center", at: "center", of: window, collision: "fit", using: function (a) { var b = d(this).css(a).offset().top; 0 > b && d(this).css("top", a.top - b) } }, resizable: !0, show: null, title: null, width: 300, beforeClose: null, close: null, drag: null, dragStart: null, dragStop: null, focus: null, open: null, resize: null, resizeStart: null, resizeStop: null
            }, sizeRelatedOptions: {
                buttons: !0, height: !0, maxHeight: !0, maxWidth: !0, minHeight: !0,
                minWidth: !0, width: !0
            }, resizableRelatedOptions: { maxHeight: !0, maxWidth: !0, minHeight: !0, minWidth: !0 }, _create: function () {
                this.originalCss = { display: this.element[0].style.display, width: this.element[0].style.width, minHeight: this.element[0].style.minHeight, maxHeight: this.element[0].style.maxHeight, height: this.element[0].style.height }; this.originalPosition = { parent: this.element.parent(), index: this.element.parent().children().index(this.element) }; this.originalTitle = this.element.attr("title"); null == this.options.title &&
                    null != this.originalTitle && (this.options.title = this.originalTitle); this.options.disabled && (this.options.disabled = !1); this._createWrapper(); this.element.show().removeAttr("title").appendTo(this.uiDialog); this._addClass("ui-dialog-content", "ui-widget-content"); this._createTitlebar(); this._createButtonPane(); this.options.draggable && d.fn.draggable && this._makeDraggable(); this.options.resizable && d.fn.resizable && this._makeResizable(); this._isOpen = !1; this._trackFocus()
            }, _init: function () {
                this.options.autoOpen &&
                this.open()
            }, _appendTo: function () { var a = this.options.appendTo; return a && (a.jquery || a.nodeType) ? d(a) : this.document.find(a || "body").eq(0) }, _destroy: function () { var a = this.originalPosition; this._untrackInstance(); this._destroyOverlay(); this.element.removeUniqueId().css(this.originalCss).detach(); this.uiDialog.remove(); this.originalTitle && this.element.attr("title", this.originalTitle); var b = a.parent.children().eq(a.index); b.length && b[0] !== this.element[0] ? b.before(this.element) : a.parent.append(this.element) },
            widget: function () { return this.uiDialog }, disable: d.noop, enable: d.noop, close: function (a) { var b = this; this._isOpen && !1 !== this._trigger("beforeClose", a) && (this._isOpen = !1, this._focusedElement = null, this._destroyOverlay(), this._untrackInstance(), this.opener.filter(":focusable").trigger("focus").length || d.ui.safeBlur(d.ui.safeActiveElement(this.document[0])), this._hide(this.uiDialog, this.options.hide, function () { b._trigger("close", a) })) }, isOpen: function () { return this._isOpen }, moveToTop: function () { this._moveToTop() },
            _moveToTop: function (a, b) { var c = !1, e = this.uiDialog.siblings(".ui-front:visible").map(function () { return +d(this).css("z-index") }).get(); e = Math.max.apply(null, e); e >= +this.uiDialog.css("z-index") && (this.uiDialog.css("z-index", e + 1), c = !0); c && !b && this._trigger("focus", a); return c }, open: function () {
                var a = this; this._isOpen ? this._moveToTop() && this._focusTabbable() : (this._isOpen = !0, this.opener = d(d.ui.safeActiveElement(this.document[0])), this._size(), this._position(), this._createOverlay(), this._moveToTop(null,
                    !0), this.overlay && this.overlay.css("z-index", this.uiDialog.css("z-index") - 1), this._show(this.uiDialog, this.options.show, function () { a._focusTabbable(); a._trigger("focus") }), this._makeFocusTarget(), this._trigger("open"))
            }, _focusTabbable: function () {
                var a = this._focusedElement; a || (a = this.element.find("[autofocus]")); a.length || (a = this.element.find(":tabbable")); a.length || (a = this.uiDialogButtonPane.find(":tabbable")); a.length || (a = this.uiDialogTitlebarClose.filter(":tabbable")); a.length || (a = this.uiDialog);
                a.eq(0).trigger("focus")
            }, _keepFocus: function (a) { function b() { var c = d.ui.safeActiveElement(this.document[0]); this.uiDialog[0] === c || d.contains(this.uiDialog[0], c) || this._focusTabbable() } a.preventDefault(); b.call(this); this._delay(b) }, _createWrapper: function () {
                this.uiDialog = d("<div>").hide().attr({ tabIndex: -1, role: "dialog" }).appendTo(this._appendTo()); this._addClass(this.uiDialog, "ui-dialog", "ui-widget ui-widget-content ui-front"); this._on(this.uiDialog, {
                    keydown: function (a) {
                        if (this.options.closeOnEscape &&
                            !a.isDefaultPrevented() && a.keyCode && a.keyCode === d.ui.keyCode.ESCAPE) a.preventDefault(), this.close(a); else if (a.keyCode === d.ui.keyCode.TAB && !a.isDefaultPrevented()) { var b = this.uiDialog.find(":tabbable"), c = b.filter(":first"), e = b.filter(":last"); a.target !== e[0] && a.target !== this.uiDialog[0] || a.shiftKey ? a.target !== c[0] && a.target !== this.uiDialog[0] || !a.shiftKey || (this._delay(function () { e.trigger("focus") }), a.preventDefault()) : (this._delay(function () { c.trigger("focus") }), a.preventDefault()) }
                    }, mousedown: function (a) {
                        this._moveToTop(a) &&
                        this._focusTabbable()
                    }
                }); this.element.find("[aria-describedby]").length || this.uiDialog.attr({ "aria-describedby": this.element.uniqueId().attr("id") })
            }, _createTitlebar: function () {
                this.uiDialogTitlebar = d("<div>"); this._addClass(this.uiDialogTitlebar, "ui-dialog-titlebar", "ui-widget-header ui-helper-clearfix"); this._on(this.uiDialogTitlebar, { mousedown: function (b) { d(b.target).closest(".ui-dialog-titlebar-close") || this.uiDialog.trigger("focus") } }); this.uiDialogTitlebarClose = d("<button type='button'></button>").button({
                    label: d("<a>").text(this.options.closeText).html(),
                    icon: "ui-icon-closethick", showLabel: !1
                }).appendTo(this.uiDialogTitlebar); this._addClass(this.uiDialogTitlebarClose, "ui-dialog-titlebar-close"); this._on(this.uiDialogTitlebarClose, { click: function (b) { b.preventDefault(); this.close(b) } }); var a = d("<span>").uniqueId().prependTo(this.uiDialogTitlebar); this._addClass(a, "ui-dialog-title"); this._title(a); this.uiDialogTitlebar.prependTo(this.uiDialog); this.uiDialog.attr({ "aria-labelledby": a.attr("id") })
            }, _title: function (a) {
                this.options.title ? a.text(this.options.title) :
                a.html("&#160;")
            }, _createButtonPane: function () { this.uiDialogButtonPane = d("<div>"); this._addClass(this.uiDialogButtonPane, "ui-dialog-buttonpane", "ui-widget-content ui-helper-clearfix"); this.uiButtonSet = d("<div>").appendTo(this.uiDialogButtonPane); this._addClass(this.uiButtonSet, "ui-dialog-buttonset"); this._createButtons() }, _createButtons: function () {
                var a = this, b = this.options.buttons; this.uiDialogButtonPane.remove(); this.uiButtonSet.empty(); d.isEmptyObject(b) || d.isArray(b) && !b.length ? this._removeClass(this.uiDialog,
                    "ui-dialog-buttons") : (d.each(b, function (c, e) { e = d.isFunction(e) ? { click: e, text: c } : e; e = d.extend({ type: "button" }, e); var f = e.click; var g = { icon: e.icon, iconPosition: e.iconPosition, showLabel: e.showLabel, icons: e.icons, text: e.text }; delete e.click; delete e.icon; delete e.iconPosition; delete e.showLabel; delete e.icons; "boolean" === typeof e.text && delete e.text; d("<button></button>", e).button(g).appendTo(a.uiButtonSet).on("click", function () { f.apply(a.element[0], arguments) }) }), this._addClass(this.uiDialog, "ui-dialog-buttons"),
                        this.uiDialogButtonPane.appendTo(this.uiDialog))
            }, _makeDraggable: function () {
                function a(e) { return { position: e.position, offset: e.offset } } var b = this, c = this.options; this.uiDialog.draggable({
                    cancel: ".ui-dialog-content, .ui-dialog-titlebar-close", handle: ".ui-dialog-titlebar", containment: "document", start: function (e, f) { b._addClass(d(this), "ui-dialog-dragging"); b._blockFrames(); b._trigger("dragStart", e, a(f)) }, drag: function (e, f) { b._trigger("drag", e, a(f)) }, stop: function (e, f) {
                        var g = f.offset.left - b.document.scrollLeft(),
                        k = f.offset.top - b.document.scrollTop(); c.position = { my: "left top", at: "left" + (0 <= g ? "+" : "") + g + " top" + (0 <= k ? "+" : "") + k, of: b.window }; b._removeClass(d(this), "ui-dialog-dragging"); b._unblockFrames(); b._trigger("dragStop", e, a(f))
                    }
                })
            }, _makeResizable: function () {
                function a(g) { return { originalPosition: g.originalPosition, originalSize: g.originalSize, position: g.position, size: g.size } } var b = this, c = this.options, e = c.resizable, f = this.uiDialog.css("position"); e = "string" === typeof e ? e : "n,e,s,w,se,sw,ne,nw"; this.uiDialog.resizable({
                    cancel: ".ui-dialog-content",
                    containment: "document", alsoResize: this.element, maxWidth: c.maxWidth, maxHeight: c.maxHeight, minWidth: c.minWidth, minHeight: this._minHeight(), handles: e, start: function (g, k) { b._addClass(d(this), "ui-dialog-resizing"); b._blockFrames(); b._trigger("resizeStart", g, a(k)) }, resize: function (g, k) { b._trigger("resize", g, a(k)) }, stop: function (g, k) {
                        var n = b.uiDialog.offset(), l = n.left - b.document.scrollLeft(); n = n.top - b.document.scrollTop(); c.height = b.uiDialog.height(); c.width = b.uiDialog.width(); c.position = {
                            my: "left top",
                            at: "left" + (0 <= l ? "+" : "") + l + " top" + (0 <= n ? "+" : "") + n, of: b.window
                        }; b._removeClass(d(this), "ui-dialog-resizing"); b._unblockFrames(); b._trigger("resizeStop", g, a(k))
                    }
                }).css("position", f)
            }, _trackFocus: function () { this._on(this.widget(), { focusin: function (a) { this._makeFocusTarget(); this._focusedElement = d(a.target) } }) }, _makeFocusTarget: function () { this._untrackInstance(); this._trackingInstances().unshift(this) }, _untrackInstance: function () { var a = this._trackingInstances(), b = d.inArray(this, a); -1 !== b && a.splice(b, 1) },
            _trackingInstances: function () { var a = this.document.data("ui-dialog-instances"); a || (a = [], this.document.data("ui-dialog-instances", a)); return a }, _minHeight: function () { var a = this.options; return "auto" === a.height ? a.minHeight : Math.min(a.minHeight, a.height) }, _position: function () { var a = this.uiDialog.is(":visible"); a || this.uiDialog.show(); this.uiDialog.position(this.options.position); a || this.uiDialog.hide() }, _setOptions: function (a) {
                var b = this, c = !1, e = {}; d.each(a, function (f, g) {
                    b._setOption(f, g); f in b.sizeRelatedOptions &&
                        (c = !0); f in b.resizableRelatedOptions && (e[f] = g)
                }); c && (this._size(), this._position()); this.uiDialog.is(":data(ui-resizable)") && this.uiDialog.resizable("option", e)
            }, _setOption: function (a, b) {
                var c, e = this.uiDialog; "disabled" !== a && (this._super(a, b), "appendTo" === a && this.uiDialog.appendTo(this._appendTo()), "buttons" === a && this._createButtons(), "closeText" === a && this.uiDialogTitlebarClose.button({ label: d("<a>").text("" + this.options.closeText).html() }), "draggable" === a && ((c = e.is(":data(ui-draggable)")) && !b &&
                    e.draggable("destroy"), !c && b && this._makeDraggable()), "position" === a && this._position(), "resizable" === a && ((c = e.is(":data(ui-resizable)")) && !b && e.resizable("destroy"), c && "string" === typeof b && e.resizable("option", "handles", b), c || !1 === b || this._makeResizable()), "title" === a && this._title(this.uiDialogTitlebar.find(".ui-dialog-title")))
            }, _size: function () {
                var a = this.options; this.element.show().css({ width: "auto", minHeight: 0, maxHeight: "none", height: 0 }); a.minWidth > a.width && (a.width = a.minWidth); var b = this.uiDialog.css({
                    height: "auto",
                    width: a.width
                }).outerHeight(); var c = Math.max(0, a.minHeight - b); var e = "number" === typeof a.maxHeight ? Math.max(0, a.maxHeight - b) : "none"; "auto" === a.height ? this.element.css({ minHeight: c, maxHeight: e, height: "auto" }) : this.element.height(Math.max(0, a.height - b)); this.uiDialog.is(":data(ui-resizable)") && this.uiDialog.resizable("option", "minHeight", this._minHeight())
            }, _blockFrames: function () {
                this.iframeBlocks = this.document.find("iframe").map(function () {
                    var a = d(this); return d("<div>").css({
                        position: "absolute", width: a.outerWidth(),
                        height: a.outerHeight()
                    }).appendTo(a.parent()).offset(a.offset())[0]
                })
            }, _unblockFrames: function () { this.iframeBlocks && (this.iframeBlocks.remove(), delete this.iframeBlocks) }, _allowInteraction: function (a) { return d(a.target).closest(".ui-dialog").length ? !0 : !!d(a.target).closest(".ui-datepicker").length }, _createOverlay: function () {
                if (this.options.modal) {
                    var a = !0; this._delay(function () { a = !1 }); this.document.data("ui-dialog-overlays") || this._on(this.document, {
                        focusin: function (b) {
                            a || this._allowInteraction(b) ||
                            (b.preventDefault(), this._trackingInstances()[0]._focusTabbable())
                        }
                    }); this.overlay = d("<div>").appendTo(this._appendTo()); this._addClass(this.overlay, null, "ui-widget-overlay ui-front"); this._on(this.overlay, { mousedown: "_keepFocus" }); this.document.data("ui-dialog-overlays", (this.document.data("ui-dialog-overlays") || 0) + 1)
                }
            }, _destroyOverlay: function () {
                if (this.options.modal && this.overlay) {
                    var a = this.document.data("ui-dialog-overlays") - 1; a ? this.document.data("ui-dialog-overlays", a) : (this._off(this.document,
                        "focusin"), this.document.removeData("ui-dialog-overlays")); this.overlay.remove(); this.overlay = null
                }
            }
        }); !1 !== d.uiBackCompat && d.widget("ui.dialog", d.ui.dialog, { options: { dialogClass: "" }, _createWrapper: function () { this._super(); this.uiDialog.addClass(this.options.dialogClass) }, _setOption: function (a, b) { "dialogClass" === a && this.uiDialog.removeClass(this.options.dialogClass).addClass(b); this._superApply(arguments) } })
});