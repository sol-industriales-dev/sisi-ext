@using DoconutBlazor.Model
@using Newtonsoft.Json
@using Microsoft.AspNetCore.Hosting
@using Microsoft.AspNetCore.Http
@using Microsoft.Extensions.Caching.Memory
@using System.IO
@using System.Text

@*Reference all the three DLLs from .NET Core Setup Zip or copy them over to the bin folder*@
@using Doconut.Config;
@using Doconut.Viewer;


@inject IJSRuntime js
@inject IWebHostEnvironment _env
@inject IMemoryCache _cache
@inject IHttpContextAccessor _accessor

@code {

    [Parameter]
    public string DocID { get; set; }
    [Parameter]
    public int ImageResolution { get; set; }
    [Parameter]
    public int TimeOut { get; set; }
    [Parameter]
    public string Watermark { get; set; }


    private DocModel _docModel;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (string.IsNullOrEmpty(DocID))
        {
            throw new Exception("Doconut: DocID property is not defined");
        }

        if (null == _docModel)
        {
            throw new Exception("Doconut: DocModel is not defined");
        }

        await js.InvokeAsync<object>("DocInit", DocID, JsonConvert.SerializeObject(_docModel)); // dovViewer.UI.js

        await base.OnAfterRenderAsync(firstRender);
    }

    public void SetModelData(DocModel docModel)
    {
        _docModel = docModel;
    }

    // This method is required when calling an instance method
    public async Task<string> OpenDocumentInstanceJS(string fileName, string password)
    {
        var dotNetObjRef = DotNetObjectReference.Create(this);
        var token = await js.InvokeAsync<string>("openDocumentJS", dotNetObjRef, fileName, password);
        return token;
    }


    [JSInvokable]
    public string OpenDocument(string fileName, string password)
    {
        var pathToFile = Path.Combine(Path.Combine(_env.WebRootPath, "files"), fileName);

        if (!System.IO.File.Exists(pathToFile))
        {
            throw new Exception($"File does not exists: {pathToFile}");
        }

        var fileInfo = new FileInfo(pathToFile);

        var licenseFilePath = Path.Combine(_env.WebRootPath, "Doconut.lic");

        var docViewer = new DocViewer(_cache, _accessor, licenseFilePath);

        if (Startup.initDone)
        {
            docViewer.InitCache();
            Startup.initDone = true;
        }

        // Set from the control's properties
        var documentOptions = new DocOptions
        {
            Password = password,
            ImageResolution = ImageResolution,
            Watermark = Watermark,
            TimeOut = TimeOut
        };


        BaseConfig config = null;

        switch (fileInfo.Extension.ToUpper())
        {
            case ".DOC":
            case ".DOCX":
            case ".ODT":
            case ".RTF":
                var pdfConfig = new PdfConfig { ExtractHyperlinks = false };
                config = new WordConfig { ConvertPdf = false, PdfConfig = pdfConfig };
                break;
            case ".XLS":
            case ".XLSX":
            case ".ODS":
            case ".CSV":
                config = new ExcelConfig { SplitWorksheets = true, ShowEmptyWorkSheets = false, DocumentCulture = "en-US", PaperSize = ExcelPaperSize.PaperA3, AutoFitContents = true };
                break;
            case ".PPT":
            case ".PPTX":
            case ".ODP":
                config = new PptConfig();
                break;
            case ".DWG":
            case ".DXF":
            case ".DGN":
                config = new CadConfig { DefaultRender = true, ShowColor = false, WhiteBackground = true, ShowModel = true, ShowLayouts = true, LineWidth = 1, Check3DSolid = false };
                break;
            case ".EML":
            case ".MSG":
                config = new EmailConfig { EmailEncoding = Encoding.UTF8 };
                break;
            case ".PDF":
                config = new PdfConfig
                {
                    DefaultRender = true, // For {Linux, Docker} use DefaultRender = false 
                    ImageResolution = 200,
                    ExtractHyperlinks = true,
                    HyperlinksPageCount = 5,
                    ResizeImages = false,
                    ResizeResolution = 150
                };
                break;
            case ".BMP":
            case ".CDR":
            case ".CMX":
            case ".DCM":
            case ".DNG":
            case ".EPS":
            case ".GIF":
            case ".ICO":
            case ".JPG":
            case ".JPEG":
            case ".PNG":
            case ".PSD":
            case ".TGA":
            case ".WEBP":
                config = new ImageConfig { MaxImagePixelSize = 2000, TransparentPng = false };
                break;
            case ".TXT":
                config = new WordConfig { PaperSize = DocPaperSize.A4 };
                break;
            case ".MPP":
            case ".MPPX":
                config = new ProjectConfig { ExportPdfA = true, PaperSize = MppPaperSize.A3 };
                break;
            case ".VSD":
            case ".VSDX":
                config = new VisioConfig { ExportPdfA = true };
                break;
        }

        try
        {
            var token = docViewer.OpenDocument(pathToFile, config, documentOptions);
            return token;
        }
        catch (Exception e)
        {
            return e.Message + ": " + e.InnerException?.Message;
        }

    }
}

<style>

    #divDocViewer_@DocID {
        border-radius: 6px;
        background-color: whitesmoke;
        border: 1px grey;
        margin-top: 10px;
    }

    /* IMP: This css is required to avoid bootstrap css shrinking the main viewer */

    .docPage {
        max-width: none;
    }

    .row {
        margin-right: 0;
        margin-left: 0
    }

    /* end css */

    .loader {
        border: 5px solid #f3f3f3;
        border-top: 5px solid #3498db;
        border-radius: 50%;
        width: 30px;
        height: 30px;
        animation: spin 2s linear infinite;
    }

    @@keyframes spin {
        0% {
            transform: rotate(0);
        }

        100% {
            transform: rotate(360deg);
        }
    }
</style>


        <div id="divDocViewer_@DocID">
            <div id="div_@DocID"></div>
        </div>



